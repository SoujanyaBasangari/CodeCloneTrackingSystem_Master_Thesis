,codeBlockId,codeBlock_start,codeBlock_end,codeBlock_fileinfo,codeblock_Code,tokens,codeCloneBlockId,codeCloneBlock_Fileinfo,Similarity_Tokens,Similarity_Variable_Flow,Similarity_MethodCall_Flow,nloc,change_type,Revision,datetime
0,CodeBlock4,123,140,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,"['  public void commandTest() {', '    class Delegate {', '      @Parameter(names = ""-a"")', '      public String a = ""b"";', '    }', '    class Command {', '      @ParametersDelegate', '      public Delegate delegate = new Delegate();', '    }', '', '    Command c = new Command();', '', '    JCommander cmd = new JCommander();', '    cmd.addCommand(""command"", c);', '', '    cmd.parse(""command -a a"".split("" ""));', '    Assert.assertEquals(c.delegate.a, ""a"");', '  }']","{'public': 3, 'void': 1, 'commandTest': 1, 'class': 2, 'TOKEN_VARIABLE': 13, '@Parameter': 1, 'STRING_LITERAL': 6, 'String': 1, 'new': 3, 'Delegate': 1, 'Command': 1, 'JCommander': 1, 'addCommand': 1, 'parse': 1, 'split': 1, 'assertEquals': 1}",CodeBlock15,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.5952380952380952,0.6666666666666666,0.8333333333333334,4,NA,3,2022-10-15 20:33:33.565759
1,CodeBlock4,123,140,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,"['  public void commandTest() {', '    class Delegate {', '      @Parameter(names = ""-a"")', '      public String a = ""b"";', '    }', '    class Command {', '      @ParametersDelegate', '      public Delegate delegate = new Delegate();', '    }', '', '    Command c = new Command();', '', '    JCommander cmd = new JCommander();', '    cmd.addCommand(""command"", c);', '', '    cmd.parse(""command -a a"".split("" ""));', '    Assert.assertEquals(c.delegate.a, ""a"");', '  }']","{'public': 3, 'void': 1, 'commandTest': 1, 'class': 2, 'TOKEN_VARIABLE': 13, '@Parameter': 1, 'STRING_LITERAL': 6, 'String': 1, 'new': 3, 'Delegate': 1, 'Command': 1, 'JCommander': 1, 'addCommand': 1, 'parse': 1, 'split': 1, 'assertEquals': 1}",CodeBlock18,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.5952380952380952,0.6666666666666666,0.8333333333333334,4,NA,3,2022-10-15 20:33:33.565759
2,CodeBlock4,123,140,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,"['  public void commandTest() {', '    class Delegate {', '      @Parameter(names = ""-a"")', '      public String a = ""b"";', '    }', '    class Command {', '      @ParametersDelegate', '      public Delegate delegate = new Delegate();', '    }', '', '    Command c = new Command();', '', '    JCommander cmd = new JCommander();', '    cmd.addCommand(""command"", c);', '', '    cmd.parse(""command -a a"".split("" ""));', '    Assert.assertEquals(c.delegate.a, ""a"");', '  }']","{'public': 3, 'void': 1, 'commandTest': 1, 'class': 2, 'TOKEN_VARIABLE': 13, '@Parameter': 1, 'STRING_LITERAL': 6, 'String': 1, 'new': 3, 'Delegate': 1, 'Command': 1, 'JCommander': 1, 'addCommand': 1, 'parse': 1, 'split': 1, 'assertEquals': 1}",CodeBlock19,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.6046511627906976,0.6666666666666666,0.8333333333333334,4,NA,3,2022-10-15 20:33:33.565759
3,CodeBlock4,123,140,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,"['  public void commandTest() {', '    class Delegate {', '      @Parameter(names = ""-a"")', '      public String a = ""b"";', '    }', '    class Command {', '      @ParametersDelegate', '      public Delegate delegate = new Delegate();', '    }', '', '    Command c = new Command();', '', '    JCommander cmd = new JCommander();', '    cmd.addCommand(""command"", c);', '', '    cmd.parse(""command -a a"".split("" ""));', '    Assert.assertEquals(c.delegate.a, ""a"");', '  }']","{'public': 3, 'void': 1, 'commandTest': 1, 'class': 2, 'TOKEN_VARIABLE': 13, '@Parameter': 1, 'STRING_LITERAL': 6, 'String': 1, 'new': 3, 'Delegate': 1, 'Command': 1, 'JCommander': 1, 'addCommand': 1, 'parse': 1, 'split': 1, 'assertEquals': 1}",CodeBlock37,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,0.5581395348837209,0.6666666666666666,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
4,CodeBlock4,123,140,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,"['  public void commandTest() {', '    class Delegate {', '      @Parameter(names = ""-a"")', '      public String a = ""b"";', '    }', '    class Command {', '      @ParametersDelegate', '      public Delegate delegate = new Delegate();', '    }', '', '    Command c = new Command();', '', '    JCommander cmd = new JCommander();', '    cmd.addCommand(""command"", c);', '', '    cmd.parse(""command -a a"".split("" ""));', '    Assert.assertEquals(c.delegate.a, ""a"");', '  }']","{'public': 3, 'void': 1, 'commandTest': 1, 'class': 2, 'TOKEN_VARIABLE': 13, '@Parameter': 1, 'STRING_LITERAL': 6, 'String': 1, 'new': 3, 'Delegate': 1, 'Command': 1, 'JCommander': 1, 'addCommand': 1, 'parse': 1, 'split': 1, 'assertEquals': 1}",CodeBlock38,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,0.5581395348837209,0.6666666666666666,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
5,CodeBlock11,42,57,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/MethodSetterTest.java,"['  public void setterThatThrows() {', '    class Arg {', '      @Parameter(names = ""--host"")', '      public void setHost(String host) {', '        throw new ParameterException(""Illegal host"");', '      }', '    }', '    boolean passed = false;', '    try {', '      JCommander.newBuilder().addObject(new Arg()).build().parse(""--host"", ""host"");', '    } catch(ParameterException ex) {', '      Assert.assertEquals(ex.getCause(), null);', '      passed = true;', '    }', '    Assert.assertTrue(passed, ""Should have thrown an exception"");', '  }']","{'public': 2, 'void': 2, 'setterThatThrows': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'setHost': 1, 'String': 1, 'throw': 1, 'new': 2, 'ParameterException': 1, 'boolean': 1, 'try': 1, 'newBuilder': 1, 'addObject': 1, 'Arg': 1, 'build': 1, 'parse': 1, 'catch': 1, 'assertEquals': 1, 'getCause': 1, 'assertTrue': 1}",CodeBlock36,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5652173913043478,0.6666666666666666,0.75,4,NA,3,2022-10-15 20:33:33.565759
6,CodeBlock15,11,22,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void caseInsensitiveOption() {', '    class Arg {', '  ', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.parse(""--PARAM"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'caseInsensitiveOption': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock4,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,0.5952380952380952,0.6666666666666666,0.8333333333333334,4,NA,3,2022-10-15 20:33:33.565759
7,CodeBlock15,11,22,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void caseInsensitiveOption() {', '    class Arg {', '  ', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.parse(""--PARAM"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'caseInsensitiveOption': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock18,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.8709677419354839,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
8,CodeBlock15,11,22,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void caseInsensitiveOption() {', '    class Arg {', '  ', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.parse(""--PARAM"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'caseInsensitiveOption': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock19,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.875,0.8333333333333334,0.8333333333333334,4,NA,3,2022-10-15 20:33:33.565759
9,CodeBlock17,36,50,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void caseInsensitiveArguments() throws Exception {', '    @Parameters(separators = ""="")', '    class TestJobRunnerArgs {', '      @Parameter(names = ""someParameter2"")', '      private String someParameter2;', '    }', '', '    String[] testValues = {""someparameter2=2""};', '    TestJobRunnerArgs testJobRunnerArgs = new TestJobRunnerArgs();', '', '    JCommander jCommander = JCommander.newBuilder().addObject(testJobRunnerArgs).build();', '    jCommander.setCaseSensitiveOptions(false);', '    jCommander.parse(testValues);', '    Assert.assertEquals(""2"", testJobRunnerArgs.someParameter2);', '  }']","{'public': 1, 'void': 1, 'caseInsensitiveArguments': 1, 'throws': 1, 'TOKEN_VARIABLE': 14, '@Parameters': 1, 'STRING_LITERAL': 4, 'class': 1, '@Parameter': 1, 'private': 1, 'String': 2, 'new': 1, 'TestJobRunnerArgs': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setCaseSensitiveOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock32,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5510204081632653,0.75,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
10,CodeBlock18,52,62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptions() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--par"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock4,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,0.5952380952380952,0.6666666666666666,0.8333333333333334,4,NA,3,2022-10-15 20:33:33.565759
11,CodeBlock18,52,62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptions() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--par"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock15,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.8709677419354839,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
12,CodeBlock18,52,62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptions() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--par"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock19,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.875,0.8333333333333334,0.8333333333333334,4,NA,3,2022-10-15 20:33:33.565759
13,CodeBlock19,64,75,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptionsCaseInsensitive() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--PAR"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptionsCaseInsensitive': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock4,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,0.6046511627906976,0.6666666666666666,0.8333333333333334,4,NA,3,2022-10-15 20:33:33.565759
14,CodeBlock19,64,75,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptionsCaseInsensitive() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--PAR"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptionsCaseInsensitive': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock15,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.875,0.8333333333333334,0.8333333333333334,4,NA,3,2022-10-15 20:33:33.565759
15,CodeBlock19,64,75,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptionsCaseInsensitive() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--PAR"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptionsCaseInsensitive': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock18,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.875,0.8333333333333334,0.8333333333333334,4,NA,3,2022-10-15 20:33:33.565759
16,CodeBlock20,78,90,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void ambiguousAbbreviatedOptions() {', '    class Arg {', '      @Parameter(names = { ""--param"" })', '      private String param;', '      @Parameter(names = { ""--parb"" })', '      private String parb;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--par"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'ambiguousAbbreviatedOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 12, '@Parameter': 2, 'STRING_LITERAL': 5, 'private': 2, 'String': 2, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock21,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.8918918918918919,1.0,0.8333333333333334,4,NA,3,2022-10-15 20:33:33.565759
17,CodeBlock21,93,106,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void ambiguousAbbreviatedOptionsCaseInsensitive() {', '    class Arg {', '      @Parameter(names = { ""--param"" })', '      private String param;', '      @Parameter(names = { ""--parb"" })', '      private String parb;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--PAR"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'ambiguousAbbreviatedOptionsCaseInsensitive': 1, 'class': 1, 'TOKEN_VARIABLE': 13, '@Parameter': 2, 'STRING_LITERAL': 5, 'private': 2, 'String': 2, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock20,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.8918918918918919,1.0,0.8333333333333334,4,NA,3,2022-10-15 20:33:33.565759
18,CodeBlock22,32,96,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testOutputFormat() {', '        class ArgsTemplate {', '            @Parameter(names = {""--a"", ""-a""})', '            public int a;', '            @Parameter(names = {""--b"", ""-b""})', '            public int b = 2;', '            @Parameter(names = {""--c"", ""-c""}, description = ""sets c"")', '            public int c;', '            @Parameter(names = {""--d"", ""-d""}, description = ""sets d"")', '            public int d = 2;', '            @Parameter(names = {""--e""})', '            public TestEnum1 e;', '            @Parameter(names = {""--f""})', '            public TestEnum1 f = TestEnum1.A;', '            @Parameter(names = {""--g""}, description = ""sets g"")', '            public TestEnum1 g;', '            @Parameter(names = {""--h""}, description = ""sets h"")', '            public TestEnum1 h = TestEnum1.A;', '            @Parameter(names = {""-i""})', '            public TestEnum2 i;', '            @Parameter(names = {""-k""}, description = ""sets k"")', '            public TestEnum2 k;', '        }', '', '        ', '        StringBuilder sb = new StringBuilder();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsTemplate())', '                .build();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        String expected = ""Usage: <main class> [options]\\n""', '                + ""  Options:\\n""', '                + ""    --a, -a\\n""', '                + ""      Default: 0\\n""', '                + ""    --b, -b\\n""', '                + ""      Default: 2\\n""', '                + ""    --c, -c\\n""', '                + ""      sets c\\n""', '                + ""      Default: 0\\n""', '                + ""    --d, -d\\n""', '                + ""      sets d\\n""', '                + ""      Default: 2\\n""', '                + ""    --e\\n""', '                + ""      Options: [A, B, C, D]\\n""', '                + ""    --f\\n""', '                + ""      Options: [A, B, C, D]\\n""', '                + ""      Default: A\\n""', '                + ""    --g\\n""', '                + ""      sets g\\n""', '                + ""      Possible Values: [A, B, C, D]\\n""', '                + ""    --h\\n""', '                + ""      sets h\\n""', '                + ""      Default: A\\n""', '                + ""      Possible Values: [A, B, C, D]\\n""', '                + ""    -i\\n""', '                + ""      Options: []\\n""', '                + ""    -k\\n""', '                + ""      sets k\\n""', '                + ""      Possible Values: []\\n"";', '        Assert.assertEquals(sb.toString(), expected);', '    }']","{'public': 11, 'void': 1, 'testOutputFormat': 1, 'class': 1, 'TOKEN_VARIABLE': 41, '@Parameter': 10, 'STRING_LITERAL': 48, 'int': 4, 'INTEGER_LITERAL': 30, 'new': 2, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsTemplate': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'assertEquals': 1, 'toString': 1}",CodeBlock47,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.7668711656441718,0.9285714285714286,0.8888888888888888,4,NA,3,2022-10-15 20:33:33.565759
19,CodeBlock23,99,113,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 2, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock25,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8333333333333334,0.75,0.8888888888888888,4,NA,3,2022-10-15 20:33:33.565759
20,CodeBlock23,99,113,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 2, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock29,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5714285714285714,1.0,0.8,4,NA,3,2022-10-15 20:33:33.565759
21,CodeBlock23,99,113,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 2, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8709677419354839,0.75,0.8,4,NA,3,2022-10-15 20:33:33.565759
22,CodeBlock23,99,113,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 2, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock50,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.7352941176470589,0.75,0.8,4,NA,3,2022-10-15 20:33:33.565759
23,CodeBlock24,116,130,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testLongCommandDescription() throws Exception {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addCommand(new ArgsLongCommandDescription())', '                .build();', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongCommandDescription': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addCommand': 1, 'new': 2, 'ArgsLongCommandDescription': 1, 'build': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock49,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8787878787878788,0.75,0.8,4,NA,3,2022-10-15 20:33:33.565759
24,CodeBlock25,133,147,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 6, 'new': 2, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock23,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8333333333333334,0.75,0.8888888888888888,4,NA,3,2022-10-15 20:33:33.565759
25,CodeBlock25,133,147,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 6, 'new': 2, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock29,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5555555555555556,0.75,0.8,4,NA,3,2022-10-15 20:33:33.565759
26,CodeBlock25,133,147,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 6, 'new': 2, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.7352941176470589,0.75,0.8,4,NA,3,2022-10-15 20:33:33.565759
27,CodeBlock25,133,147,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 6, 'new': 2, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock50,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.875,0.75,0.9,4,NA,3,2022-10-15 20:33:33.565759
28,CodeBlock26,150,159,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void programName() {', '        JCommander jcommander = new JCommander();', '        String programName = ""main"";', '        jcommander.setProgramName(programName);', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '', '        Assert.assertTrue(sb.toString().contains(programName));', '        Assert.assertEquals(jcommander.getProgramName(), programName);', '    }']","{'public': 1, 'void': 1, 'programName': 1, 'TOKEN_VARIABLE': 9, 'new': 2, 'JCommander': 1, 'String': 1, 'STRING_LITERAL': 1, 'setProgramName': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1, 'assertEquals': 1, 'getProgramName': 1}",CodeBlock51,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8666666666666667,0.75,0.7777777777777778,4,NA,3,2022-10-15 20:33:33.565759
29,CodeBlock27,162,176,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void dontShowOptionUsageIfThereAreNoOptions() {', '        class CommandTemplate {', '            @Parameter', '            List<String> parameters = new ArrayList<>();', '        }', '', '        CommandTemplate template = new CommandTemplate();', '        JCommander jcommander = JCommander.newBuilder()', '                .addObject(template)', '                .build();', '        jcommander.setProgramName(""main"");', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '        Assert.assertEquals(sb.toString().indexOf(""options""), -1);', '    }']","{'public': 1, 'void': 1, 'dontShowOptionUsageIfThereAreNoOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 13, 'String': 1, 'new': 3, 'CommandTemplate': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setProgramName': 1, 'STRING_LITERAL': 2, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertEquals': 1, 'toString': 1, 'indexOf': 1, 'INTEGER_LITERAL': 2}",CodeBlock36,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.6190476190476191,0.7142857142857143,0.75,4,NA,3,2022-10-15 20:33:33.565759
30,CodeBlock27,162,176,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void dontShowOptionUsageIfThereAreNoOptions() {', '        class CommandTemplate {', '            @Parameter', '            List<String> parameters = new ArrayList<>();', '        }', '', '        CommandTemplate template = new CommandTemplate();', '        JCommander jcommander = JCommander.newBuilder()', '                .addObject(template)', '                .build();', '        jcommander.setProgramName(""main"");', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '        Assert.assertEquals(sb.toString().indexOf(""options""), -1);', '    }']","{'public': 1, 'void': 1, 'dontShowOptionUsageIfThereAreNoOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 13, 'String': 1, 'new': 3, 'CommandTemplate': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setProgramName': 1, 'STRING_LITERAL': 2, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertEquals': 1, 'toString': 1, 'indexOf': 1, 'INTEGER_LITERAL': 2}",CodeBlock52,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9,0.8571428571428571,0.7,4,NA,3,2022-10-15 20:33:33.565759
31,CodeBlock28,179,192,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void annotationsAndDynamicParameters() {', '        class DSimple {', '            @DynamicParameter(names = ""-D"", description = ""Dynamic parameters go here"")', '            public Map<String, String> params = Maps.newHashMap();', '', '            @DynamicParameter(names = ""-A"", assignment = ""@"")', '            public Map<String, String> params2 = Maps.newHashMap();', '        }', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new DSimple())', '                .build();', '        jc.getUsageFormatter().usage(new StringBuilder());', '    }']","{'public': 3, 'void': 1, 'annotationsAndDynamicParameters': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@DynamicParameter': 2, 'STRING_LITERAL': 4, 'String': 4, 'newHashMap': 2, 'newBuilder': 1, 'addObject': 1, 'new': 2, 'DSimple': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'StringBuilder': 1}",CodeBlock53,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9047619047619048,0.8333333333333334,0.875,4,NA,3,2022-10-15 20:33:33.565759
32,CodeBlock29,206,216,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(getResourceBundle())', '                .build();', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock23,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5714285714285714,1.0,0.8,4,NA,3,2022-10-15 20:33:33.565759
33,CodeBlock29,206,216,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(getResourceBundle())', '                .build();', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock25,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5555555555555556,0.75,0.8,4,NA,3,2022-10-15 20:33:33.565759
34,CodeBlock29,206,216,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(getResourceBundle())', '                .build();', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.5526315789473685,0.75,0.9,4,NA,3,2022-10-15 20:33:33.565759
35,CodeBlock29,206,216,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(getResourceBundle())', '                .build();', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock54,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.875,0.75,0.75,4,NA,3,2022-10-15 20:33:33.565759
36,CodeBlock30,234,249,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithRequiredArgsAndResourceBundle() {', '        ArgsHelp argsHelp = new ArgsHelp();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new Object[] {argsHelp, new ArgsRequired()})', '                .resourceBundle(getResourceBundle())', '                .build();', '        ', '        jc.getUsageFormatter().usage(new StringBuilder());', '        try {', '            jc.parse(""-h"");', '            Assert.fail(""Should have thrown a required parameter exception"");', '        } catch (ParameterException e) {', '            Assert.assertTrue(e.getMessage().contains(""are required""));', '        }', '        Assert.assertTrue(argsHelp.help);', '    }']","{'public': 1, 'void': 1, 'usageWithRequiredArgsAndResourceBundle': 1, 'TOKEN_VARIABLE': 9, 'new': 4, 'ArgsHelp': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsRequired': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'StringBuilder': 1, 'try': 1, 'parse': 1, 'STRING_LITERAL': 3, 'fail': 1, 'catch': 1, 'assertTrue': 2, 'getMessage': 1, 'contains': 1}",CodeBlock56,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9024390243902439,0.8333333333333334,0.9166666666666666,4,NA,3,2022-10-15 20:33:33.565759
37,CodeBlock31,252,263,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageShouldNotChange() {', '        JCommander jc = JCommander.newBuilder().addObject(new Args1()).build();', '        jc.parse(""-log"", ""1"");', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String expected = sb.toString();', '', '        sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String actual = sb.toString();', '        Assert.assertEquals(actual, expected);', '    }']","{'public': 1, 'void': 1, 'usageShouldNotChange': 1, 'TOKEN_VARIABLE': 11, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'Args1': 1, 'build': 1, 'parse': 1, 'STRING_LITERAL': 2, 'StringBuilder': 2, 'getUsageFormatter': 2, 'usage': 2, 'String': 2, 'toString': 2, 'assertEquals': 1}",CodeBlock57,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8974358974358975,0.75,0.8888888888888888,4,NA,3,2022-10-15 20:33:33.565759
38,CodeBlock32,274,289,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void doNotDisplayHelpDefaultValue() {', '        class Arg {', '            @Parameter(names = ""--help"", help = true)', '            public boolean help = false;', '        }', '        Arg args = new Arg();', '        String[] argv = {""--help""};', '        JCommander jc = JCommander.newBuilder().addObject(args).build();', '        jc.parse(argv);', '', '        StringBuilder sb = new StringBuilder();', '', '        jc.getUsageFormatter().usage(sb);', '', '        Assert.assertFalse(sb.toString().contains(""Default""));', '    }']","{'public': 2, 'void': 1, 'doNotDisplayHelpDefaultValue': 1, 'class': 1, 'TOKEN_VARIABLE': 16, '@Parameter': 1, 'STRING_LITERAL': 3, 'boolean': 1, 'new': 2, 'Arg': 1, 'String': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'parse': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertFalse': 1, 'toString': 1, 'contains': 1}",CodeBlock17,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.5510204081632653,0.75,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
39,CodeBlock32,274,289,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void doNotDisplayHelpDefaultValue() {', '        class Arg {', '            @Parameter(names = ""--help"", help = true)', '            public boolean help = false;', '        }', '        Arg args = new Arg();', '        String[] argv = {""--help""};', '        JCommander jc = JCommander.newBuilder().addObject(args).build();', '        jc.parse(argv);', '', '        StringBuilder sb = new StringBuilder();', '', '        jc.getUsageFormatter().usage(sb);', '', '        Assert.assertFalse(sb.toString().contains(""Default""));', '    }']","{'public': 2, 'void': 1, 'doNotDisplayHelpDefaultValue': 1, 'class': 1, 'TOKEN_VARIABLE': 16, '@Parameter': 1, 'STRING_LITERAL': 3, 'boolean': 1, 'new': 2, 'Arg': 1, 'String': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'parse': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertFalse': 1, 'toString': 1, 'contains': 1}",CodeBlock58,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9090909090909091,0.875,0.8,4,NA,3,2022-10-15 20:33:33.565759
40,CodeBlock33,292,317,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock34,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9649122807017544,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
41,CodeBlock33,292,317,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock59,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9333333333333333,0.875,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
42,CodeBlock33,292,317,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock60,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9016393442622951,0.875,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
43,CodeBlock34,320,345,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock33,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9649122807017544,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
44,CodeBlock34,320,345,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock59,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9016393442622951,0.875,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
45,CodeBlock34,320,345,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock60,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9333333333333333,0.875,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
46,CodeBlock35,348,378,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.setColumnSize(100);', '        c.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = c.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 21, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock59,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.7887323943661971,0.7777777777777778,0.6923076923076923,4,NA,3,2022-10-15 20:33:33.565759
47,CodeBlock35,348,378,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.setColumnSize(100);', '        c.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = c.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 21, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock60,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.7887323943661971,0.7777777777777778,0.6923076923076923,4,NA,3,2022-10-15 20:33:33.565759
48,CodeBlock35,348,378,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.setColumnSize(100);', '        c.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = c.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 21, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock61,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9436619718309859,0.8888888888888888,0.8571428571428571,4,NA,3,2022-10-15 20:33:33.565759
49,CodeBlock36,381,393,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""Default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 2, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock11,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/MethodSetterTest.java,0.5652173913043478,0.6666666666666666,0.75,4,NA,3,2022-10-15 20:33:33.565759
50,CodeBlock36,381,393,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""Default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 2, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock27,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.6190476190476191,0.7142857142857143,0.75,4,NA,3,2022-10-15 20:33:33.565759
51,CodeBlock36,381,393,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""Default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 2, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8888888888888888,0.8333333333333334,0.8,4,NA,3,2022-10-15 20:33:33.565759
52,CodeBlock37,10,19,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,"['  public void validateTest() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--port"" }, description = ""Shows help"", validateWith = PositiveInteger.class)', '      private int port = 0;', '    }', '    Arg arg = new Arg();', '    JCommander jc = new JCommander(arg);', '    jc.parse(""-p"", ""8080"");', '', '  }']","{'public': 1, 'void': 1, 'validateTest': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'int': 1, 'INTEGER_LITERAL': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'parse': 1}",CodeBlock4,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,0.5581395348837209,0.6666666666666666,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
53,CodeBlock37,10,19,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,"['  public void validateTest() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--port"" }, description = ""Shows help"", validateWith = PositiveInteger.class)', '      private int port = 0;', '    }', '    Arg arg = new Arg();', '    JCommander jc = new JCommander(arg);', '    jc.parse(""-p"", ""8080"");', '', '  }']","{'public': 1, 'void': 1, 'validateTest': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'int': 1, 'INTEGER_LITERAL': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'parse': 1}",CodeBlock38,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,0.9333333333333333,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
54,CodeBlock38,55,64,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,"['  public void validateTest5() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--port"" }, description = ""Port Number"", validateWith = PositiveInteger.class)', '      private int port = 0;', '    }', '', '    Arg arg = new Arg();', '    JCommander jc = new JCommander(arg);', '    jc.parse(""--port"", "" "");', '  }']","{'public': 1, 'void': 1, 'validateTest5': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'int': 1, 'INTEGER_LITERAL': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'parse': 1}",CodeBlock4,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,0.5581395348837209,0.6666666666666666,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
55,CodeBlock38,55,64,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,"['  public void validateTest5() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--port"" }, description = ""Port Number"", validateWith = PositiveInteger.class)', '      private int port = 0;', '    }', '', '    Arg arg = new Arg();', '    JCommander jc = new JCommander(arg);', '    jc.parse(""--port"", "" "");', '  }']","{'public': 1, 'void': 1, 'validateTest5': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'int': 1, 'INTEGER_LITERAL': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'parse': 1}",CodeBlock37,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,0.9333333333333333,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
56,CodeBlock47,23,71,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testOutputFormat() {', '        class ArgsTemplate {', '            @Parameter(names = {""--a"", ""-a""})', '            public int a;', '            @Parameter(names = {""--b"", ""-b""})', '            public int b = 2;', '            @Parameter(names = {""--c"", ""-c""}, description = ""sets c"")', '            public int c;', '            @Parameter(names = {""--d"", ""-d""}, description = ""sets d"")', '            public int d = 2;', '            @Parameter(names = {""--e""})', '            public TestEnum1 e;', '            @Parameter(names = {""--f""})', '            public TestEnum1 f = TestEnum1.A;', '            @Parameter(names = {""--g""}, description = ""sets g"")', '            public TestEnum1 g;', '            @Parameter(names = {""--h""}, description = ""sets h"")', '            public TestEnum1 h = TestEnum1.A;', '            @Parameter(names = {""-i""})', '            public TestEnum2 i;', '            @Parameter(names = {""-k""}, description = ""sets k"")', '            public TestEnum2 k;', '        }', '', '        ', '        StringBuilder sb = new StringBuilder();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsTemplate())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        String expected = ""Usage: <main class> [options]\\n""', '                + ""  Options:\\n""', '                + ""    --a, -a (default: 0)\\n""', '                + ""    --b, -b (default: 2)\\n""', '                + ""    --c, -c sets c (default: 0)\\n""', '                + ""    --d, -d sets d (default: 2)\\n""', '                + ""    --e     Options: [A, B, C, D]\\n""', '                + ""    --f     Options: [A, B, C, D] (default: A)\\n""', '                + ""    --g     sets g (values: [A, B, C, D])\\n""', '                + ""    --h     sets h (default: A) (values: [A, B, C, D])\\n""', '                + ""    -i      Options: []\\n""', '                + ""    -k      sets k (values: [])\\n"";', '        Assert.assertEquals(sb.toString(), expected);', '    }']","{'public': 11, 'void': 1, 'testOutputFormat': 1, 'class': 1, 'TOKEN_VARIABLE': 42, '@Parameter': 10, 'STRING_LITERAL': 31, 'int': 4, 'INTEGER_LITERAL': 13, 'new': 3, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsTemplate': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'assertEquals': 1, 'toString': 1}",CodeBlock22,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.7668711656441718,0.9285714285714286,0.8888888888888888,4,NA,3,2022-10-15 20:33:33.565759
57,CodeBlock48,74,89,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock23,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8709677419354839,0.75,0.8,4,NA,3,2022-10-15 20:33:33.565759
58,CodeBlock48,74,89,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock25,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.7352941176470589,0.75,0.8,4,NA,3,2022-10-15 20:33:33.565759
59,CodeBlock48,74,89,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock29,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5526315789473685,0.75,0.9,4,NA,3,2022-10-15 20:33:33.565759
60,CodeBlock48,74,89,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock50,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8529411764705882,0.75,0.9,4,NA,3,2022-10-15 20:33:33.565759
61,CodeBlock48,74,89,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock54,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6153846153846154,1.0,0.75,4,NA,3,2022-10-15 20:33:33.565759
62,CodeBlock49,92,107,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongCommandDescription() throws Exception {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addCommand(new ArgsLongCommandDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongCommandDescription': 1, 'throws': 1, 'TOKEN_VARIABLE': 8, 'newBuilder': 1, 'addCommand': 1, 'new': 3, 'ArgsLongCommandDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock24,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8787878787878788,0.75,0.8,4,NA,3,2022-10-15 20:33:33.565759
63,CodeBlock50,110,125,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 7, 'new': 3, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock23,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.7352941176470589,0.75,0.8,4,NA,3,2022-10-15 20:33:33.565759
64,CodeBlock50,110,125,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 7, 'new': 3, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock25,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.875,0.75,0.9,4,NA,3,2022-10-15 20:33:33.565759
65,CodeBlock50,110,125,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 7, 'new': 3, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8529411764705882,0.75,0.9,4,NA,3,2022-10-15 20:33:33.565759
66,CodeBlock50,110,125,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 7, 'new': 3, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock54,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6,0.75,0.75,4,NA,3,2022-10-15 20:33:33.565759
67,CodeBlock51,128,138,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void programName() {', '        JCommander jcommander = new JCommander();', '        jcommander.setUsageFormatter(new UnixStyleUsageFormatter(jcommander));', '        String programName = ""main"";', '        jcommander.setProgramName(programName);', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '', '        Assert.assertTrue(sb.toString().contains(programName));', '        Assert.assertEquals(jcommander.getProgramName(), programName);', '    }']","{'public': 1, 'void': 1, 'programName': 1, 'TOKEN_VARIABLE': 10, 'new': 3, 'JCommander': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'String': 1, 'STRING_LITERAL': 1, 'setProgramName': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1, 'assertEquals': 1, 'getProgramName': 1}",CodeBlock26,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8666666666666667,0.75,0.7777777777777778,4,NA,3,2022-10-15 20:33:33.565759
68,CodeBlock52,141,156,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void dontShowOptionUsageIfThereAreNoOptions() {', '        class CommandTemplate {', '            @Parameter', '            List<String> parameters = new ArrayList<>();', '        }', '', '        CommandTemplate template = new CommandTemplate();', '        JCommander jcommander = JCommander.newBuilder()', '                .addObject(template)', '                .build();', '        jcommander.setUsageFormatter(new UnixStyleUsageFormatter(jcommander));', '        jcommander.setProgramName(""main"");', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '        Assert.assertEquals(sb.toString().indexOf(""options""), -1);', '    }']","{'public': 1, 'void': 1, 'dontShowOptionUsageIfThereAreNoOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 14, 'String': 1, 'new': 4, 'CommandTemplate': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'setProgramName': 1, 'STRING_LITERAL': 2, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertEquals': 1, 'toString': 1, 'indexOf': 1, 'INTEGER_LITERAL': 2}",CodeBlock27,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9,0.8571428571428571,0.7,4,NA,3,2022-10-15 20:33:33.565759
69,CodeBlock52,141,156,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void dontShowOptionUsageIfThereAreNoOptions() {', '        class CommandTemplate {', '            @Parameter', '            List<String> parameters = new ArrayList<>();', '        }', '', '        CommandTemplate template = new CommandTemplate();', '        JCommander jcommander = JCommander.newBuilder()', '                .addObject(template)', '                .build();', '        jcommander.setUsageFormatter(new UnixStyleUsageFormatter(jcommander));', '        jcommander.setProgramName(""main"");', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '        Assert.assertEquals(sb.toString().indexOf(""options""), -1);', '    }']","{'public': 1, 'void': 1, 'dontShowOptionUsageIfThereAreNoOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 14, 'String': 1, 'new': 4, 'CommandTemplate': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'setProgramName': 1, 'STRING_LITERAL': 2, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertEquals': 1, 'toString': 1, 'indexOf': 1, 'INTEGER_LITERAL': 2}",CodeBlock62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6521739130434783,0.7142857142857143,0.8,4,NA,3,2022-10-15 20:33:33.565759
70,CodeBlock53,159,173,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void annotationsAndDynamicParameters() {', '        class DSimple {', '            @DynamicParameter(names = ""-D"", description = ""Dynamic parameters go here"")', '            public Map<String, String> params = Maps.newHashMap();', '', '            @DynamicParameter(names = ""-A"", assignment = ""@"")', '            public Map<String, String> params2 = Maps.newHashMap();', '        }', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new DSimple())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.getUsageFormatter().usage(new StringBuilder());', '    }']","{'public': 3, 'void': 1, 'annotationsAndDynamicParameters': 1, 'class': 1, 'TOKEN_VARIABLE': 12, '@DynamicParameter': 2, 'STRING_LITERAL': 4, 'String': 4, 'newHashMap': 2, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'DSimple': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'StringBuilder': 1}",CodeBlock28,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9047619047619048,0.8333333333333334,0.875,4,NA,3,2022-10-15 20:33:33.565759
71,CodeBlock54,188,199,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(DefaultUsageFormatterTest.getResourceBundle())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 4, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock29,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.875,0.75,0.75,4,NA,3,2022-10-15 20:33:33.565759
72,CodeBlock54,188,199,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(DefaultUsageFormatterTest.getResourceBundle())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 4, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6153846153846154,1.0,0.75,4,NA,3,2022-10-15 20:33:33.565759
73,CodeBlock54,188,199,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(DefaultUsageFormatterTest.getResourceBundle())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 4, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock50,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6,0.75,0.75,4,NA,3,2022-10-15 20:33:33.565759
74,CodeBlock56,218,234,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithRequiredArgsAndResourceBundle() {', '        ArgsHelp argsHelp = new ArgsHelp();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new Object[] {argsHelp, new ArgsRequired()})', '                .resourceBundle(DefaultUsageFormatterTest.getResourceBundle())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        ', '        jc.getUsageFormatter().usage(new StringBuilder());', '        try {', '            jc.parse(""-h"");', '            Assert.fail(""Should have thrown a required parameter exception"");', '        } catch (ParameterException e) {', '            Assert.assertTrue(e.getMessage().contains(""are required""));', '        }', '        Assert.assertTrue(argsHelp.help);', '    }']","{'public': 1, 'void': 1, 'usageWithRequiredArgsAndResourceBundle': 1, 'TOKEN_VARIABLE': 10, 'new': 5, 'ArgsHelp': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsRequired': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'StringBuilder': 1, 'try': 1, 'parse': 1, 'STRING_LITERAL': 3, 'fail': 1, 'catch': 1, 'assertTrue': 2, 'getMessage': 1, 'contains': 1}",CodeBlock30,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9024390243902439,0.8333333333333334,0.9166666666666666,4,NA,3,2022-10-15 20:33:33.565759
75,CodeBlock56,218,234,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithRequiredArgsAndResourceBundle() {', '        ArgsHelp argsHelp = new ArgsHelp();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new Object[] {argsHelp, new ArgsRequired()})', '                .resourceBundle(DefaultUsageFormatterTest.getResourceBundle())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        ', '        jc.getUsageFormatter().usage(new StringBuilder());', '        try {', '            jc.parse(""-h"");', '            Assert.fail(""Should have thrown a required parameter exception"");', '        } catch (ParameterException e) {', '            Assert.assertTrue(e.getMessage().contains(""are required""));', '        }', '        Assert.assertTrue(argsHelp.help);', '    }']","{'public': 1, 'void': 1, 'usageWithRequiredArgsAndResourceBundle': 1, 'TOKEN_VARIABLE': 10, 'new': 5, 'ArgsHelp': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsRequired': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'StringBuilder': 1, 'try': 1, 'parse': 1, 'STRING_LITERAL': 3, 'fail': 1, 'catch': 1, 'assertTrue': 2, 'getMessage': 1, 'contains': 1}",CodeBlock62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.5714285714285714,0.6666666666666666,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
76,CodeBlock57,237,249,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageShouldNotChange() {', '        JCommander jc = JCommander.newBuilder().addObject(new Args1()).build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.parse(""-log"", ""1"");', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String expected = sb.toString();', '', '        sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String actual = sb.toString();', '        Assert.assertEquals(actual, expected);', '    }']","{'public': 1, 'void': 1, 'usageShouldNotChange': 1, 'TOKEN_VARIABLE': 12, 'newBuilder': 1, 'addObject': 1, 'new': 4, 'Args1': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'parse': 1, 'STRING_LITERAL': 2, 'StringBuilder': 2, 'getUsageFormatter': 2, 'usage': 2, 'String': 2, 'toString': 2, 'assertEquals': 1}",CodeBlock31,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8974358974358975,0.75,0.8888888888888888,4,NA,3,2022-10-15 20:33:33.565759
77,CodeBlock58,261,277,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void doNotDisplayHelpDefaultValue() {', '        class Arg {', '            @Parameter(names = ""--help"", help = true)', '            public boolean help = false;', '        }', '        Arg args = new Arg();', '        String[] argv = {""--help""};', '        JCommander jc = JCommander.newBuilder().addObject(args).build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.parse(argv);', '', '        StringBuilder sb = new StringBuilder();', '', '        jc.getUsageFormatter().usage(sb);', '', '        Assert.assertFalse(sb.toString().contains(""Default""));', '    }']","{'public': 2, 'void': 1, 'doNotDisplayHelpDefaultValue': 1, 'class': 1, 'TOKEN_VARIABLE': 17, '@Parameter': 1, 'STRING_LITERAL': 3, 'boolean': 1, 'new': 3, 'Arg': 1, 'String': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'parse': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertFalse': 1, 'toString': 1, 'contains': 1}",CodeBlock32,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9090909090909091,0.875,0.8,4,NA,3,2022-10-15 20:33:33.565759
78,CodeBlock59,280,306,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock33,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9333333333333333,0.875,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
79,CodeBlock59,280,306,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock34,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9016393442622951,0.875,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
80,CodeBlock59,280,306,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock35,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.7887323943661971,0.7777777777777778,0.6923076923076923,4,NA,3,2022-10-15 20:33:33.565759
81,CodeBlock59,280,306,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock60,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9672131147540983,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
82,CodeBlock59,280,306,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock61,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8194444444444444,0.7777777777777778,0.7142857142857143,4,NA,3,2022-10-15 20:33:33.565759
83,CodeBlock60,309,335,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock33,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9016393442622951,0.875,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
84,CodeBlock60,309,335,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock34,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9333333333333333,0.875,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
85,CodeBlock60,309,335,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock35,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.7887323943661971,0.7777777777777778,0.6923076923076923,4,NA,3,2022-10-15 20:33:33.565759
86,CodeBlock60,309,335,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock59,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9672131147540983,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
87,CodeBlock60,309,335,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock61,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8194444444444444,0.7777777777777778,0.7142857142857143,4,NA,3,2022-10-15 20:33:33.565759
88,CodeBlock61,338,369,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.setColumnSize(100);', '        jc.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = jc.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 22, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock35,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9436619718309859,0.8888888888888888,0.8571428571428571,4,NA,3,2022-10-15 20:33:33.565759
89,CodeBlock61,338,369,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.setColumnSize(100);', '        jc.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = jc.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 22, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock59,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8194444444444444,0.7777777777777778,0.7142857142857143,4,NA,3,2022-10-15 20:33:33.565759
90,CodeBlock61,338,369,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.setColumnSize(100);', '        jc.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = jc.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 22, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock60,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8194444444444444,0.7777777777777778,0.7142857142857143,4,NA,3,2022-10-15 20:33:33.565759
91,CodeBlock62,372,385,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 12, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 3, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock36,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8888888888888888,0.8333333333333334,0.8,4,NA,3,2022-10-15 20:33:33.565759
92,CodeBlock62,372,385,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 12, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 3, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock52,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6521739130434783,0.7142857142857143,0.8,4,NA,3,2022-10-15 20:33:33.565759
93,CodeBlock62,372,385,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 12, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 3, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock56,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.5714285714285714,0.6666666666666666,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
94,CodeBlock68,32,44,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,"['  public void namedCommandTest1() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    NamedCommandAdd add = new NamedCommandAdd();', '    jc.addCommand(add);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit);', '    jc.parse(""add"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'namedCommandTest1': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'NamedCommandAdd': 1, 'addCommand': 2, 'CommandCommit': 1, 'STRING_LITERAL': 6, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock69,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,0.8809523809523809,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
95,CodeBlock68,32,44,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,"['  public void namedCommandTest1() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    NamedCommandAdd add = new NamedCommandAdd();', '    jc.addCommand(add);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit);', '    jc.parse(""add"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'namedCommandTest1': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'NamedCommandAdd': 1, 'addCommand': 2, 'CommandCommit': 1, 'STRING_LITERAL': 6, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock76,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,0.8222222222222222,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
96,CodeBlock69,55,67,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,"['  public void commandTest1() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandAdd add = new CommandAdd();', '    jc.addCommand(""add"", add);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit);', '    jc.parse(""add"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'commandTest1': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandAdd': 1, 'addCommand': 2, 'STRING_LITERAL': 7, 'CommandCommit': 1, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock68,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,0.8809523809523809,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
97,CodeBlock69,55,67,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,"['  public void commandTest1() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandAdd add = new CommandAdd();', '    jc.addCommand(""add"", add);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit);', '    jc.parse(""add"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'commandTest1': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandAdd': 1, 'addCommand': 2, 'STRING_LITERAL': 7, 'CommandCommit': 1, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock76,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,0.8863636363636364,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
98,CodeBlock72,109,120,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,"['  public void noParametersAnnotationOnCommandTest() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandNoParametersAnnotation noParametersAnnotation = new CommandNoParametersAnnotation();', '    jc.addCommand(""no-annotation"", noParametersAnnotation);', '', '    jc.setProgramName(""TestCommander"");', '    StringBuilder out = new StringBuilder();', '    jc.getUsageFormatter().usage(out);', '', '    Assert.assertTrue(out.toString().contains(""no-annotation""));', '  }']","{'public': 1, 'void': 1, 'noParametersAnnotationOnCommandTest': 1, 'TOKEN_VARIABLE': 11, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandNoParametersAnnotation': 1, 'addCommand': 1, 'STRING_LITERAL': 3, 'setProgramName': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock79,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,0.7297297297297297,0.8333333333333334,0.75,4,NA,3,2022-10-15 20:33:33.565759
99,CodeBlock74,37,48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,"['  public void oneCommandWithSingleAlias() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandAdd add = new CommandAdd();', '    jc.addCommand(""add"", add, ""a"");', '    jc.parse(""a"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(jc.getParsedAlias(), ""a"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'oneCommandWithSingleAlias': 1, 'TOKEN_VARIABLE': 10, 'new': 3, 'CommandMain': 1, 'JCommander': 1, 'CommandAdd': 1, 'addCommand': 1, 'STRING_LITERAL': 8, 'parse': 1, 'assertEquals': 4, 'getParsedCommand': 1, 'getParsedAlias': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock75,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,0.7083333333333334,0.7142857142857143,0.875,4,NA,3,2022-10-15 20:33:33.565759
100,CodeBlock75,60,72,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,"['  private void testCommitWithAlias(String alias) {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit, ""ci"", ""cmt"");', '    jc.parse(alias, ""--amend"", ""--author"", ""jack"", ""file1.txt"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""commit"");', '    Assert.assertEquals(jc.getParsedAlias(), alias);', '    Assert.assertEquals(commit.amend.booleanValue(), true);', '    Assert.assertEquals(commit.author, ""jack"");', '    Assert.assertEquals(commit.files, Arrays.asList(""file1.txt""));', '  }']","{'private': 1, 'void': 1, 'testCommitWithAlias': 1, 'String': 1, 'TOKEN_VARIABLE': 14, 'new': 3, 'CommandMain': 1, 'JCommander': 1, 'CommandCommit': 1, 'addCommand': 1, 'STRING_LITERAL': 10, 'parse': 1, 'assertEquals': 5, 'getParsedCommand': 1, 'getParsedAlias': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock74,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,0.7083333333333334,0.7142857142857143,0.875,4,NA,3,2022-10-15 20:33:33.565759
101,CodeBlock76,75,87,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,"['  public void twoCommandsWithAliases() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandAdd add = new CommandAdd();', '    jc.addCommand(""add"", add, ""a"");', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit, ""ci"", ""cmt"");', '    jc.parse(""a"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'twoCommandsWithAliases': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandAdd': 1, 'addCommand': 2, 'STRING_LITERAL': 10, 'CommandCommit': 1, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock68,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,0.8222222222222222,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
102,CodeBlock76,75,87,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,"['  public void twoCommandsWithAliases() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandAdd add = new CommandAdd();', '    jc.addCommand(""add"", add, ""a"");', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit, ""ci"", ""cmt"");', '    jc.parse(""a"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'twoCommandsWithAliases': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandAdd': 1, 'addCommand': 2, 'STRING_LITERAL': 10, 'CommandCommit': 1, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock69,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,0.8863636363636364,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
103,CodeBlock79,135,145,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,"['  public void usageDisplaysCommandWithAliasesOnlyOnce() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit, ""ci"", ""cmt"");', '    StringBuilder out = new StringBuilder();', '    jc.getUsageFormatter().usage(out);', '    ', '    ', '    patternMatchesTimes(""commit\\\\(ci,cmt\\\\)"", out.toString(), 2);', '  }']","{'public': 1, 'void': 1, 'usageDisplaysCommandWithAliasesOnlyOnce': 1, 'TOKEN_VARIABLE': 11, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandCommit': 1, 'addCommand': 1, 'STRING_LITERAL': 4, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'patternMatchesTimes': 1, 'toString': 1, 'INTEGER_LITERAL': 1}",CodeBlock72,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,0.7297297297297297,0.8333333333333334,0.75,4,NA,3,2022-10-15 20:33:33.565759
104,CodeBlock83,44,55,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/ParameterizedParserTest.java,"['  public void standardParameterizedParsingTest() {', '    StandardCommandClassExample_01 commandOptions = new StandardCommandClassExample_01();', '    ', '    JCommander jcommander = new JCommander(commandOptions);', '    ', '    testFields(jcommander, EXPECTED_MAP);', '', '    jcommander.parse(ARGS);', '    Assert.assertTrue(EXPECTED_VERSION.equals(commandOptions.version), ""Version is not "" + EXPECTED_VERSION);', '    Assert.assertTrue(EXPECTED_STACK_LEVEL == commandOptions.subCommands.stackLevel, ""Stack level field is not"" + EXPECTED_STACK_LEVEL);', '    Assert.assertTrue(EXPECTED_LOG_LEVEL.equals(commandOptions.subCommands.loggingLevel), ""Log level is not "" + EXPECTED_LOG_LEVEL);', '  }']","{'public': 1, 'void': 1, 'standardParameterizedParsingTest': 1, 'TOKEN_VARIABLE': 15, 'new': 2, 'StandardCommandClassExample_01': 1, 'JCommander': 1, 'testFields': 1, 'parse': 1, 'assertTrue': 3, 'equals': 2, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 3}",CodeBlock84,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/ParameterizedParserTest.java,0.8048780487804879,0.875,0.7142857142857143,4,NA,3,2022-10-15 20:33:33.565759
105,CodeBlock84,58,71,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/ParameterizedParserTest.java,"['  public void jsonParameterizedParsingTest() {', '    JsonCommandClassExample_01 commandOptions = new JsonCommandClassExample_01();', '    ', '    JCommander jcommander = new JCommander();', '    jcommander.setParameterizedParser(new JsonAnnotationParameterizedParser());', '    jcommander.addObject(commandOptions);', '    ', '    testFields(jcommander, EXPECTED_MAP);', '', '    jcommander.parse(ARGS);', '    Assert.assertTrue(EXPECTED_VERSION.equals(commandOptions.version), ""Version is not "" + EXPECTED_VERSION);', '    Assert.assertTrue(EXPECTED_STACK_LEVEL == commandOptions.subCommands.stackLevel, ""Stack level field is not"" + EXPECTED_STACK_LEVEL);', '    Assert.assertTrue(EXPECTED_LOG_LEVEL.equals(commandOptions.subCommands.loggingLevel), ""Log level is not "" + EXPECTED_LOG_LEVEL);', '  }']","{'public': 1, 'void': 1, 'jsonParameterizedParsingTest': 1, 'TOKEN_VARIABLE': 15, 'new': 3, 'JsonCommandClassExample_01': 1, 'JCommander': 1, 'setParameterizedParser': 1, 'JsonAnnotationParameterizedParser': 1, 'addObject': 1, 'testFields': 1, 'parse': 1, 'assertTrue': 3, 'equals': 2, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 3}",CodeBlock83,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/ParameterizedParserTest.java,0.8048780487804879,0.875,0.7142857142857143,4,NA,3,2022-10-15 20:33:33.565759
106,CodeBlock86,76,97,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/JsonAnnotationParameterizedParser.java,"['  private void describeClassTree(Class<?> inputClass, Set<Class<?>> setOfClasses) {', '    ', '    if (inputClass == null) {', '      return;', '    }', '', '    ', '    if (Object.class.equals(inputClass) || setOfClasses.contains(inputClass)) {', '      return;', '    }', '', '    ', '    setOfClasses.add(inputClass);', '', '    ', '    describeClassTree(inputClass.getSuperclass(), setOfClasses);', '', '    ', '    for (Class<?> hasInterface : inputClass.getInterfaces()) {', '      describeClassTree(hasInterface, setOfClasses);', '    }', '  }']","{'private': 1, 'void': 1, 'describeClassTree': 3, 'TOKEN_VARIABLE': 15, 'if': 2, 'return': 2, 'equals': 1, 'contains': 1, 'add': 1, 'getSuperclass': 1, 'for': 1, 'getInterfaces': 1}",CodeBlock90,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/Parameterized.java,0.967741935483871,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
107,CodeBlock87,105,117,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/JsonAnnotationParameterizedParser.java,"['  private Set<Class<?>> describeClassTree(Class<?> inputClass) {', '    if (inputClass == null) {', '      return Collections.emptySet();', '    }', '', '    ', '    Set<Class<?>> classes = Sets.newLinkedHashSet();', '', '    ', '    describeClassTree(inputClass, classes);', '', '    return classes;', '  }']","{'private': 1, 'TOKEN_VARIABLE': 12, 'describeClassTree': 2, 'if': 1, 'return': 2, 'emptySet': 1, 'newLinkedHashSet': 1}",CodeBlock91,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/Parameterized.java,0.9523809523809523,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
108,CodeBlock90,48,69,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/Parameterized.java,"['  private static void describeClassTree(Class<?> inputClass, Set<Class<?>> setOfClasses) {', '    ', '    if(inputClass == null) {', '      return;', '    }', '', '    ', '    if(Object.class.equals(inputClass) || setOfClasses.contains(inputClass)) {', '      return;', '    }', '', '    ', '    setOfClasses.add(inputClass);', '', '    ', '    describeClassTree(inputClass.getSuperclass(), setOfClasses);', '', '    ', '    for(Class<?> hasInterface : inputClass.getInterfaces()) {', '      describeClassTree(hasInterface, setOfClasses);', '    }', '  }']","{'private': 1, 'static': 1, 'void': 1, 'describeClassTree': 3, 'TOKEN_VARIABLE': 15, 'if': 2, 'return': 2, 'equals': 1, 'contains': 1, 'add': 1, 'getSuperclass': 1, 'for': 1, 'getInterfaces': 1}",CodeBlock86,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/JsonAnnotationParameterizedParser.java,0.967741935483871,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
109,CodeBlock91,78,90,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/Parameterized.java,"['  private static Set<Class<?>> describeClassTree(Class<?> inputClass) {', '    if(inputClass == null) {', '      return Collections.emptySet();', '    }', '', '    ', '    Set<Class<?>> classes = Sets.newLinkedHashSet();', '', '    ', '    describeClassTree(inputClass, classes);', '', '    return classes;', '  }']","{'private': 1, 'static': 1, 'TOKEN_VARIABLE': 12, 'describeClassTree': 2, 'if': 1, 'return': 2, 'emptySet': 1, 'newLinkedHashSet': 1}",CodeBlock87,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/JsonAnnotationParameterizedParser.java,0.9523809523809523,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
110,CodeBlock125,32,46,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/StringKey.java,"['  public boolean equals(Object obj) {', '    if (this == obj) { ', '      return true; } ', '    if (obj == null) { ', '      return false; } ', '    if (getClass() != obj.getClass()) { ', '      return false; } ', '    StringKey other = (StringKey) obj;', '    if (name == null) {', '      if (other.name != null) { ', '        return false; } ', '    } else if (!name.equals(other.name)) {  { ', '      return false; } ', '    return true; } ', '  }']","{'public': 1, 'boolean': 1, 'equals': 2, 'TOKEN_VARIABLE': 21, 'if': 6, 'this': 1, 'return': 6, 'getClass': 2}",CodeBlock157,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,1.0,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
111,CodeBlock148,1324,1340,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,"['    public void addConverterFactory(final IStringConverterFactory converterFactory) {', '        addConverterInstanceFactory(new IStringConverterInstanceFactory() {', '            @SuppressWarnings(""unchecked"")', '            @Override', '            public IStringConverter<?> getConverterInstance(Parameter parameter, Class<?> forType, String optionName) {', '                final Class<? extends IStringConverter<?>> converterClass = converterFactory.getConverter(forType);', '                try {', '                    if(optionName == null) {', '                        optionName = parameter.names().length > 0 ? parameter.names()[0] : ""[Main class]"";', '                    }', '                    return converterClass != null ? instantiateConverter(optionName, converterClass) : null;', '                } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {', '                    throw new ParameterException(e);', '                }', '            }', '        });', '    }']","{'public': 2, 'void': 1, 'addConverterFactory': 1, 'final': 2, 'TOKEN_VARIABLE': 27, 'addConverterInstanceFactory': 1, 'new': 2, 'IStringConverterInstanceFactory': 1, '@SuppressWarnings': 1, 'STRING_LITERAL': 2, 'getConverterInstance': 1, 'String': 1, 'extends': 1, 'getConverter': 1, 'try': 1, 'if': 1, 'names': 2, 'INTEGER_LITERAL': 2, 'return': 1, 'instantiateConverter': 1, 'catch': 1, 'throw': 1, 'ParameterException': 1}",CodeBlock149,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,0.7818181818181819,0.7272727272727273,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
112,CodeBlock149,1328,1338,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,"['            public IStringConverter<?> getConverterInstance(Parameter parameter, Class<?> forType, String optionName) {', '                final Class<? extends IStringConverter<?>> converterClass = converterFactory.getConverter(forType);', '                try {', '                    if(optionName == null) {', '                        optionName = parameter.names().length > 0 ? parameter.names()[0] : ""[Main class]"";', '                    }', '                    return converterClass != null ? instantiateConverter(optionName, converterClass) : null;', '                } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {', '                    throw new ParameterException(e);', '                }', '            }']","{'public': 1, 'TOKEN_VARIABLE': 24, 'getConverterInstance': 1, 'String': 1, 'final': 1, 'extends': 1, 'getConverter': 1, 'try': 1, 'if': 1, 'names': 2, 'INTEGER_LITERAL': 2, 'STRING_LITERAL': 1, 'return': 1, 'instantiateConverter': 1, 'catch': 1, 'throw': 1, 'new': 1, 'ParameterException': 1}",CodeBlock148,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,0.7818181818181819,0.7272727272727273,0.6666666666666666,4,NA,3,2022-10-15 20:33:33.565759
113,CodeBlock157,1621,1635,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,"['        public boolean equals(Object obj) {', '            if (this == obj) { ', '                return true; } ', '            if (obj == null) { ', '                return false; } ', '            if (getClass() != obj.getClass()) { ', '                return false; } ', '            ProgramName other = (ProgramName) obj;', '            if (name == null) {', '                if (other.name != null) { ', '                    return false; } ', '            } else if (!name.equals(other.name)) {  { ', '                return false; } ', '            return true; } ', '        }']","{'public': 1, 'boolean': 1, 'equals': 2, 'TOKEN_VARIABLE': 21, 'if': 6, 'this': 1, 'return': 6, 'getClass': 2}",CodeBlock125,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/StringKey.java,1.0,1.0,1.0,4,NA,3,2022-10-15 20:33:33.565759
114,CodeBlock4,123,140,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,"['  public void commandTest() {', '    class Delegate {', '      @Parameter(names = ""-a"")', '      public String a = ""b"";', '    }', '    class Command {', '      @ParametersDelegate', '      public Delegate delegate = new Delegate();', '    }', '', '    Command c = new Command();', '', '    JCommander cmd = new JCommander();', '    cmd.addCommand(""command"", c);', '', '    cmd.parse(""command -a a"".split("" ""));', '    Assert.assertEquals(c.delegate.a, ""a"");', '  }']","{'public': 3, 'void': 1, 'commandTest': 1, 'class': 2, 'TOKEN_VARIABLE': 13, '@Parameter': 1, 'STRING_LITERAL': 6, 'String': 1, 'new': 3, 'Delegate': 1, 'Command': 1, 'JCommander': 1, 'addCommand': 1, 'parse': 1, 'split': 1, 'assertEquals': 1}",CodeBlock15,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.5952380952380952,0.6666666666666666,0.8333333333333334,4,<NA>,2,2022-10-15 20:33:33.565759
115,CodeBlock4,123,140,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,"['  public void commandTest() {', '    class Delegate {', '      @Parameter(names = ""-a"")', '      public String a = ""b"";', '    }', '    class Command {', '      @ParametersDelegate', '      public Delegate delegate = new Delegate();', '    }', '', '    Command c = new Command();', '', '    JCommander cmd = new JCommander();', '    cmd.addCommand(""command"", c);', '', '    cmd.parse(""command -a a"".split("" ""));', '    Assert.assertEquals(c.delegate.a, ""a"");', '  }']","{'public': 3, 'void': 1, 'commandTest': 1, 'class': 2, 'TOKEN_VARIABLE': 13, '@Parameter': 1, 'STRING_LITERAL': 6, 'String': 1, 'new': 3, 'Delegate': 1, 'Command': 1, 'JCommander': 1, 'addCommand': 1, 'parse': 1, 'split': 1, 'assertEquals': 1}",CodeBlock18,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.5952380952380952,0.6666666666666666,0.8333333333333334,4,<NA>,2,2022-10-15 20:33:33.565759
116,CodeBlock4,123,140,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,"['  public void commandTest() {', '    class Delegate {', '      @Parameter(names = ""-a"")', '      public String a = ""b"";', '    }', '    class Command {', '      @ParametersDelegate', '      public Delegate delegate = new Delegate();', '    }', '', '    Command c = new Command();', '', '    JCommander cmd = new JCommander();', '    cmd.addCommand(""command"", c);', '', '    cmd.parse(""command -a a"".split("" ""));', '    Assert.assertEquals(c.delegate.a, ""a"");', '  }']","{'public': 3, 'void': 1, 'commandTest': 1, 'class': 2, 'TOKEN_VARIABLE': 13, '@Parameter': 1, 'STRING_LITERAL': 6, 'String': 1, 'new': 3, 'Delegate': 1, 'Command': 1, 'JCommander': 1, 'addCommand': 1, 'parse': 1, 'split': 1, 'assertEquals': 1}",CodeBlock19,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.6046511627906976,0.6666666666666666,0.8333333333333334,4,<NA>,2,2022-10-15 20:33:33.565759
117,CodeBlock4,123,140,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,"['  public void commandTest() {', '    class Delegate {', '      @Parameter(names = ""-a"")', '      public String a = ""b"";', '    }', '    class Command {', '      @ParametersDelegate', '      public Delegate delegate = new Delegate();', '    }', '', '    Command c = new Command();', '', '    JCommander cmd = new JCommander();', '    cmd.addCommand(""command"", c);', '', '    cmd.parse(""command -a a"".split("" ""));', '    Assert.assertEquals(c.delegate.a, ""a"");', '  }']","{'public': 3, 'void': 1, 'commandTest': 1, 'class': 2, 'TOKEN_VARIABLE': 13, '@Parameter': 1, 'STRING_LITERAL': 6, 'String': 1, 'new': 3, 'Delegate': 1, 'Command': 1, 'JCommander': 1, 'addCommand': 1, 'parse': 1, 'split': 1, 'assertEquals': 1}",CodeBlock37,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,0.5581395348837209,0.6666666666666666,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
118,CodeBlock4,123,140,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,"['  public void commandTest() {', '    class Delegate {', '      @Parameter(names = ""-a"")', '      public String a = ""b"";', '    }', '    class Command {', '      @ParametersDelegate', '      public Delegate delegate = new Delegate();', '    }', '', '    Command c = new Command();', '', '    JCommander cmd = new JCommander();', '    cmd.addCommand(""command"", c);', '', '    cmd.parse(""command -a a"".split("" ""));', '    Assert.assertEquals(c.delegate.a, ""a"");', '  }']","{'public': 3, 'void': 1, 'commandTest': 1, 'class': 2, 'TOKEN_VARIABLE': 13, '@Parameter': 1, 'STRING_LITERAL': 6, 'String': 1, 'new': 3, 'Delegate': 1, 'Command': 1, 'JCommander': 1, 'addCommand': 1, 'parse': 1, 'split': 1, 'assertEquals': 1}",CodeBlock38,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,0.5581395348837209,0.6666666666666666,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
119,CodeBlock11,42,57,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/MethodSetterTest.java,"['  public void setterThatThrows() {', '    class Arg {', '      @Parameter(names = ""--host"")', '      public void setHost(String host) {', '        throw new ParameterException(""Illegal host"");', '      }', '    }', '    boolean passed = false;', '    try {', '      JCommander.newBuilder().addObject(new Arg()).build().parse(""--host"", ""host"");', '    } catch(ParameterException ex) {', '      Assert.assertEquals(ex.getCause(), null);', '      passed = true;', '    }', '    Assert.assertTrue(passed, ""Should have thrown an exception"");', '  }']","{'public': 2, 'void': 2, 'setterThatThrows': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'setHost': 1, 'String': 1, 'throw': 1, 'new': 2, 'ParameterException': 1, 'boolean': 1, 'try': 1, 'newBuilder': 1, 'addObject': 1, 'Arg': 1, 'build': 1, 'parse': 1, 'catch': 1, 'assertEquals': 1, 'getCause': 1, 'assertTrue': 1}",CodeBlock36,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5652173913043478,0.6666666666666666,0.75,4,<NA>,2,2022-10-15 20:33:33.565759
120,CodeBlock15,11,22,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void caseInsensitiveOption() {', '    class Arg {', '  ', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.parse(""--PARAM"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'caseInsensitiveOption': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock4,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,0.5952380952380952,0.6666666666666666,0.8333333333333334,4,<NA>,2,2022-10-15 20:33:33.565759
121,CodeBlock15,11,22,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void caseInsensitiveOption() {', '    class Arg {', '  ', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.parse(""--PARAM"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'caseInsensitiveOption': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock18,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.8709677419354839,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
122,CodeBlock15,11,22,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void caseInsensitiveOption() {', '    class Arg {', '  ', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.parse(""--PARAM"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'caseInsensitiveOption': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock19,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.875,0.8333333333333334,0.8333333333333334,4,<NA>,2,2022-10-15 20:33:33.565759
123,CodeBlock17,36,50,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void caseInsensitiveArguments() throws Exception {', '    @Parameters(separators = ""="")', '    class TestJobRunnerArgs {', '      @Parameter(names = ""someParameter2"")', '      private String someParameter2;', '    }', '', '    String[] testValues = {""someparameter2=2""};', '    TestJobRunnerArgs testJobRunnerArgs = new TestJobRunnerArgs();', '', '    JCommander jCommander = JCommander.newBuilder().addObject(testJobRunnerArgs).build();', '    jCommander.setCaseSensitiveOptions(false);', '    jCommander.parse(testValues);', '    Assert.assertEquals(""2"", testJobRunnerArgs.someParameter2);', '  }']","{'public': 1, 'void': 1, 'caseInsensitiveArguments': 1, 'throws': 1, 'TOKEN_VARIABLE': 14, '@Parameters': 1, 'STRING_LITERAL': 4, 'class': 1, '@Parameter': 1, 'private': 1, 'String': 2, 'new': 1, 'TestJobRunnerArgs': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setCaseSensitiveOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock32,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5510204081632653,0.75,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
124,CodeBlock18,52,62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptions() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--par"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock4,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,0.5952380952380952,0.6666666666666666,0.8333333333333334,4,<NA>,2,2022-10-15 20:33:33.565759
125,CodeBlock18,52,62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptions() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--par"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock15,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.8709677419354839,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
126,CodeBlock18,52,62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptions() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--par"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock19,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.875,0.8333333333333334,0.8333333333333334,4,<NA>,2,2022-10-15 20:33:33.565759
127,CodeBlock19,64,75,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptionsCaseInsensitive() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--PAR"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptionsCaseInsensitive': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock4,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,0.6046511627906976,0.6666666666666666,0.8333333333333334,4,<NA>,2,2022-10-15 20:33:33.565759
128,CodeBlock19,64,75,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptionsCaseInsensitive() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--PAR"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptionsCaseInsensitive': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock15,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.875,0.8333333333333334,0.8333333333333334,4,<NA>,2,2022-10-15 20:33:33.565759
129,CodeBlock19,64,75,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptionsCaseInsensitive() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--PAR"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptionsCaseInsensitive': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock18,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.875,0.8333333333333334,0.8333333333333334,4,<NA>,2,2022-10-15 20:33:33.565759
130,CodeBlock20,78,90,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void ambiguousAbbreviatedOptions() {', '    class Arg {', '      @Parameter(names = { ""--param"" })', '      private String param;', '      @Parameter(names = { ""--parb"" })', '      private String parb;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--par"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'ambiguousAbbreviatedOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 12, '@Parameter': 2, 'STRING_LITERAL': 5, 'private': 2, 'String': 2, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock21,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.8918918918918919,1.0,0.8333333333333334,4,<NA>,2,2022-10-15 20:33:33.565759
131,CodeBlock21,93,106,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void ambiguousAbbreviatedOptionsCaseInsensitive() {', '    class Arg {', '      @Parameter(names = { ""--param"" })', '      private String param;', '      @Parameter(names = { ""--parb"" })', '      private String parb;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--PAR"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'ambiguousAbbreviatedOptionsCaseInsensitive': 1, 'class': 1, 'TOKEN_VARIABLE': 13, '@Parameter': 2, 'STRING_LITERAL': 5, 'private': 2, 'String': 2, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock20,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.8918918918918919,1.0,0.8333333333333334,4,<NA>,2,2022-10-15 20:33:33.565759
132,CodeBlock22,32,96,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testOutputFormat() {', '        class ArgsTemplate {', '            @Parameter(names = {""--a"", ""-a""})', '            public int a;', '            @Parameter(names = {""--b"", ""-b""})', '            public int b = 2;', '            @Parameter(names = {""--c"", ""-c""}, description = ""sets c"")', '            public int c;', '            @Parameter(names = {""--d"", ""-d""}, description = ""sets d"")', '            public int d = 2;', '            @Parameter(names = {""--e""})', '            public TestEnum1 e;', '            @Parameter(names = {""--f""})', '            public TestEnum1 f = TestEnum1.A;', '            @Parameter(names = {""--g""}, description = ""sets g"")', '            public TestEnum1 g;', '            @Parameter(names = {""--h""}, description = ""sets h"")', '            public TestEnum1 h = TestEnum1.A;', '            @Parameter(names = {""-i""})', '            public TestEnum2 i;', '            @Parameter(names = {""-k""}, description = ""sets k"")', '            public TestEnum2 k;', '        }', '', '        ', '        StringBuilder sb = new StringBuilder();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsTemplate())', '                .build();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        String expected = ""Usage: <main class> [options]\\n""', '                + ""  Options:\\n""', '                + ""    --a, -a\\n""', '                + ""      Default: 0\\n""', '                + ""    --b, -b\\n""', '                + ""      Default: 2\\n""', '                + ""    --c, -c\\n""', '                + ""      sets c\\n""', '                + ""      Default: 0\\n""', '                + ""    --d, -d\\n""', '                + ""      sets d\\n""', '                + ""      Default: 2\\n""', '                + ""    --e\\n""', '                + ""      Options: [A, B, C, D]\\n""', '                + ""    --f\\n""', '                + ""      Options: [A, B, C, D]\\n""', '                + ""      Default: A\\n""', '                + ""    --g\\n""', '                + ""      sets g\\n""', '                + ""      Possible Values: [A, B, C, D]\\n""', '                + ""    --h\\n""', '                + ""      sets h\\n""', '                + ""      Default: A\\n""', '                + ""      Possible Values: [A, B, C, D]\\n""', '                + ""    -i\\n""', '                + ""      Options: []\\n""', '                + ""    -k\\n""', '                + ""      sets k\\n""', '                + ""      Possible Values: []\\n"";', '        Assert.assertEquals(sb.toString(), expected);', '    }']","{'public': 11, 'void': 1, 'testOutputFormat': 1, 'class': 1, 'TOKEN_VARIABLE': 41, '@Parameter': 10, 'STRING_LITERAL': 48, 'int': 4, 'INTEGER_LITERAL': 30, 'new': 2, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsTemplate': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'assertEquals': 1, 'toString': 1}",CodeBlock47,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.7668711656441718,0.9285714285714286,0.8888888888888888,4,<NA>,2,2022-10-15 20:33:33.565759
133,CodeBlock23,99,113,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 2, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock25,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8333333333333334,0.75,0.8888888888888888,4,<NA>,2,2022-10-15 20:33:33.565759
134,CodeBlock23,99,113,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 2, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock29,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5714285714285714,1.0,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
135,CodeBlock23,99,113,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 2, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8709677419354839,0.75,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
136,CodeBlock23,99,113,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 2, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock50,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.7352941176470589,0.75,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
137,CodeBlock24,116,130,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testLongCommandDescription() throws Exception {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addCommand(new ArgsLongCommandDescription())', '                .build();', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongCommandDescription': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addCommand': 1, 'new': 2, 'ArgsLongCommandDescription': 1, 'build': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock49,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8787878787878788,0.75,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
138,CodeBlock25,133,147,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 6, 'new': 2, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock23,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8333333333333334,0.75,0.8888888888888888,4,<NA>,2,2022-10-15 20:33:33.565759
139,CodeBlock25,133,147,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 6, 'new': 2, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock29,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5555555555555556,0.75,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
140,CodeBlock25,133,147,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 6, 'new': 2, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.7352941176470589,0.75,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
141,CodeBlock25,133,147,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 6, 'new': 2, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock50,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.875,0.75,0.9,4,<NA>,2,2022-10-15 20:33:33.565759
142,CodeBlock26,150,159,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void programName() {', '        JCommander jcommander = new JCommander();', '        String programName = ""main"";', '        jcommander.setProgramName(programName);', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '', '        Assert.assertTrue(sb.toString().contains(programName));', '        Assert.assertEquals(jcommander.getProgramName(), programName);', '    }']","{'public': 1, 'void': 1, 'programName': 1, 'TOKEN_VARIABLE': 9, 'new': 2, 'JCommander': 1, 'String': 1, 'STRING_LITERAL': 1, 'setProgramName': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1, 'assertEquals': 1, 'getProgramName': 1}",CodeBlock51,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8666666666666667,0.75,0.7777777777777778,4,<NA>,2,2022-10-15 20:33:33.565759
143,CodeBlock27,162,176,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void dontShowOptionUsageIfThereAreNoOptions() {', '        class CommandTemplate {', '            @Parameter', '            List<String> parameters = new ArrayList<>();', '        }', '', '        CommandTemplate template = new CommandTemplate();', '        JCommander jcommander = JCommander.newBuilder()', '                .addObject(template)', '                .build();', '        jcommander.setProgramName(""main"");', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '        Assert.assertEquals(sb.toString().indexOf(""options""), -1);', '    }']","{'public': 1, 'void': 1, 'dontShowOptionUsageIfThereAreNoOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 13, 'String': 1, 'new': 3, 'CommandTemplate': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setProgramName': 1, 'STRING_LITERAL': 2, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertEquals': 1, 'toString': 1, 'indexOf': 1, 'INTEGER_LITERAL': 2}",CodeBlock36,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.6190476190476191,0.7142857142857143,0.75,4,<NA>,2,2022-10-15 20:33:33.565759
144,CodeBlock27,162,176,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void dontShowOptionUsageIfThereAreNoOptions() {', '        class CommandTemplate {', '            @Parameter', '            List<String> parameters = new ArrayList<>();', '        }', '', '        CommandTemplate template = new CommandTemplate();', '        JCommander jcommander = JCommander.newBuilder()', '                .addObject(template)', '                .build();', '        jcommander.setProgramName(""main"");', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '        Assert.assertEquals(sb.toString().indexOf(""options""), -1);', '    }']","{'public': 1, 'void': 1, 'dontShowOptionUsageIfThereAreNoOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 13, 'String': 1, 'new': 3, 'CommandTemplate': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setProgramName': 1, 'STRING_LITERAL': 2, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertEquals': 1, 'toString': 1, 'indexOf': 1, 'INTEGER_LITERAL': 2}",CodeBlock52,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9,0.8571428571428571,0.7,4,<NA>,2,2022-10-15 20:33:33.565759
145,CodeBlock28,179,192,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void annotationsAndDynamicParameters() {', '        class DSimple {', '            @DynamicParameter(names = ""-D"", description = ""Dynamic parameters go here"")', '            public Map<String, String> params = Maps.newHashMap();', '', '            @DynamicParameter(names = ""-A"", assignment = ""@"")', '            public Map<String, String> params2 = Maps.newHashMap();', '        }', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new DSimple())', '                .build();', '        jc.getUsageFormatter().usage(new StringBuilder());', '    }']","{'public': 3, 'void': 1, 'annotationsAndDynamicParameters': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@DynamicParameter': 2, 'STRING_LITERAL': 4, 'String': 4, 'newHashMap': 2, 'newBuilder': 1, 'addObject': 1, 'new': 2, 'DSimple': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'StringBuilder': 1}",CodeBlock53,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9047619047619048,0.8333333333333334,0.875,4,<NA>,2,2022-10-15 20:33:33.565759
146,CodeBlock29,206,216,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(getResourceBundle())', '                .build();', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock23,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5714285714285714,1.0,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
147,CodeBlock29,206,216,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(getResourceBundle())', '                .build();', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock25,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5555555555555556,0.75,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
148,CodeBlock29,206,216,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(getResourceBundle())', '                .build();', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.5526315789473685,0.75,0.9,4,<NA>,2,2022-10-15 20:33:33.565759
149,CodeBlock29,206,216,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(getResourceBundle())', '                .build();', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock54,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.875,0.75,0.75,4,<NA>,2,2022-10-15 20:33:33.565759
150,CodeBlock30,234,249,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithRequiredArgsAndResourceBundle() {', '        ArgsHelp argsHelp = new ArgsHelp();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new Object[] {argsHelp, new ArgsRequired()})', '                .resourceBundle(getResourceBundle())', '                .build();', '        ', '        jc.getUsageFormatter().usage(new StringBuilder());', '        try {', '            jc.parse(""-h"");', '            Assert.fail(""Should have thrown a required parameter exception"");', '        } catch (ParameterException e) {', '            Assert.assertTrue(e.getMessage().contains(""are required""));', '        }', '        Assert.assertTrue(argsHelp.help);', '    }']","{'public': 1, 'void': 1, 'usageWithRequiredArgsAndResourceBundle': 1, 'TOKEN_VARIABLE': 9, 'new': 4, 'ArgsHelp': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsRequired': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'StringBuilder': 1, 'try': 1, 'parse': 1, 'STRING_LITERAL': 3, 'fail': 1, 'catch': 1, 'assertTrue': 2, 'getMessage': 1, 'contains': 1}",CodeBlock56,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.902439024390244,0.8333333333333334,0.9166666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
151,CodeBlock31,252,263,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageShouldNotChange() {', '        JCommander jc = JCommander.newBuilder().addObject(new Args1()).build();', '        jc.parse(""-log"", ""1"");', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String expected = sb.toString();', '', '        sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String actual = sb.toString();', '        Assert.assertEquals(actual, expected);', '    }']","{'public': 1, 'void': 1, 'usageShouldNotChange': 1, 'TOKEN_VARIABLE': 11, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'Args1': 1, 'build': 1, 'parse': 1, 'STRING_LITERAL': 2, 'StringBuilder': 2, 'getUsageFormatter': 2, 'usage': 2, 'String': 2, 'toString': 2, 'assertEquals': 1}",CodeBlock57,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8974358974358975,0.75,0.8888888888888888,4,<NA>,2,2022-10-15 20:33:33.565759
152,CodeBlock32,274,289,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void doNotDisplayHelpDefaultValue() {', '        class Arg {', '            @Parameter(names = ""--help"", help = true)', '            public boolean help = false;', '        }', '        Arg args = new Arg();', '        String[] argv = {""--help""};', '        JCommander jc = JCommander.newBuilder().addObject(args).build();', '        jc.parse(argv);', '', '        StringBuilder sb = new StringBuilder();', '', '        jc.getUsageFormatter().usage(sb);', '', '        Assert.assertFalse(sb.toString().contains(""Default""));', '    }']","{'public': 2, 'void': 1, 'doNotDisplayHelpDefaultValue': 1, 'class': 1, 'TOKEN_VARIABLE': 16, '@Parameter': 1, 'STRING_LITERAL': 3, 'boolean': 1, 'new': 2, 'Arg': 1, 'String': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'parse': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertFalse': 1, 'toString': 1, 'contains': 1}",CodeBlock17,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.5510204081632653,0.75,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
153,CodeBlock32,274,289,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void doNotDisplayHelpDefaultValue() {', '        class Arg {', '            @Parameter(names = ""--help"", help = true)', '            public boolean help = false;', '        }', '        Arg args = new Arg();', '        String[] argv = {""--help""};', '        JCommander jc = JCommander.newBuilder().addObject(args).build();', '        jc.parse(argv);', '', '        StringBuilder sb = new StringBuilder();', '', '        jc.getUsageFormatter().usage(sb);', '', '        Assert.assertFalse(sb.toString().contains(""Default""));', '    }']","{'public': 2, 'void': 1, 'doNotDisplayHelpDefaultValue': 1, 'class': 1, 'TOKEN_VARIABLE': 16, '@Parameter': 1, 'STRING_LITERAL': 3, 'boolean': 1, 'new': 2, 'Arg': 1, 'String': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'parse': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertFalse': 1, 'toString': 1, 'contains': 1}",CodeBlock58,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9090909090909092,0.875,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
154,CodeBlock33,292,317,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock34,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9649122807017544,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
155,CodeBlock33,292,317,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock59,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9333333333333332,0.875,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
156,CodeBlock33,292,317,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock60,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9016393442622952,0.875,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
157,CodeBlock34,320,345,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock33,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9649122807017544,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
158,CodeBlock34,320,345,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock59,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9016393442622952,0.875,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
159,CodeBlock34,320,345,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock60,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9333333333333332,0.875,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
160,CodeBlock35,348,378,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.setColumnSize(100);', '        c.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = c.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 21, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock59,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.7887323943661971,0.7777777777777778,0.6923076923076923,4,<NA>,2,2022-10-15 20:33:33.565759
161,CodeBlock35,348,378,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.setColumnSize(100);', '        c.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = c.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 21, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock60,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.7887323943661971,0.7777777777777778,0.6923076923076923,4,<NA>,2,2022-10-15 20:33:33.565759
162,CodeBlock35,348,378,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.setColumnSize(100);', '        c.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = c.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 21, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock61,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.943661971830986,0.8888888888888888,0.8571428571428571,4,<NA>,2,2022-10-15 20:33:33.565759
163,CodeBlock36,381,393,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""Default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 2, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock11,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/MethodSetterTest.java,0.5652173913043478,0.6666666666666666,0.75,4,<NA>,2,2022-10-15 20:33:33.565759
164,CodeBlock36,381,393,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""Default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 2, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock27,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.6190476190476191,0.7142857142857143,0.75,4,<NA>,2,2022-10-15 20:33:33.565759
165,CodeBlock36,381,393,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""Default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 2, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8888888888888888,0.8333333333333334,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
166,CodeBlock37,10,19,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,"['  public void validateTest() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--port"" }, description = ""Shows help"", validateWith = PositiveInteger.class)', '      private int port = 0;', '    }', '    Arg arg = new Arg();', '    JCommander jc = new JCommander(arg);', '    jc.parse(""-p"", ""8080"");', '', '  }']","{'public': 1, 'void': 1, 'validateTest': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'int': 1, 'INTEGER_LITERAL': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'parse': 1}",CodeBlock4,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,0.5581395348837209,0.6666666666666666,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
167,CodeBlock37,10,19,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,"['  public void validateTest() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--port"" }, description = ""Shows help"", validateWith = PositiveInteger.class)', '      private int port = 0;', '    }', '    Arg arg = new Arg();', '    JCommander jc = new JCommander(arg);', '    jc.parse(""-p"", ""8080"");', '', '  }']","{'public': 1, 'void': 1, 'validateTest': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'int': 1, 'INTEGER_LITERAL': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'parse': 1}",CodeBlock38,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,0.9333333333333332,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
168,CodeBlock38,55,64,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,"['  public void validateTest5() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--port"" }, description = ""Port Number"", validateWith = PositiveInteger.class)', '      private int port = 0;', '    }', '', '    Arg arg = new Arg();', '    JCommander jc = new JCommander(arg);', '    jc.parse(""--port"", "" "");', '  }']","{'public': 1, 'void': 1, 'validateTest5': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'int': 1, 'INTEGER_LITERAL': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'parse': 1}",CodeBlock4,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,0.5581395348837209,0.6666666666666666,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
169,CodeBlock38,55,64,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,"['  public void validateTest5() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--port"" }, description = ""Port Number"", validateWith = PositiveInteger.class)', '      private int port = 0;', '    }', '', '    Arg arg = new Arg();', '    JCommander jc = new JCommander(arg);', '    jc.parse(""--port"", "" "");', '  }']","{'public': 1, 'void': 1, 'validateTest5': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'int': 1, 'INTEGER_LITERAL': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'parse': 1}",CodeBlock37,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,0.9333333333333332,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
170,CodeBlock47,23,71,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testOutputFormat() {', '        class ArgsTemplate {', '            @Parameter(names = {""--a"", ""-a""})', '            public int a;', '            @Parameter(names = {""--b"", ""-b""})', '            public int b = 2;', '            @Parameter(names = {""--c"", ""-c""}, description = ""sets c"")', '            public int c;', '            @Parameter(names = {""--d"", ""-d""}, description = ""sets d"")', '            public int d = 2;', '            @Parameter(names = {""--e""})', '            public TestEnum1 e;', '            @Parameter(names = {""--f""})', '            public TestEnum1 f = TestEnum1.A;', '            @Parameter(names = {""--g""}, description = ""sets g"")', '            public TestEnum1 g;', '            @Parameter(names = {""--h""}, description = ""sets h"")', '            public TestEnum1 h = TestEnum1.A;', '            @Parameter(names = {""-i""})', '            public TestEnum2 i;', '            @Parameter(names = {""-k""}, description = ""sets k"")', '            public TestEnum2 k;', '        }', '', '        ', '        StringBuilder sb = new StringBuilder();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsTemplate())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        String expected = ""Usage: <main class> [options]\\n""', '                + ""  Options:\\n""', '                + ""    --a, -a (default: 0)\\n""', '                + ""    --b, -b (default: 2)\\n""', '                + ""    --c, -c sets c (default: 0)\\n""', '                + ""    --d, -d sets d (default: 2)\\n""', '                + ""    --e     Options: [A, B, C, D]\\n""', '                + ""    --f     Options: [A, B, C, D] (default: A)\\n""', '                + ""    --g     sets g (values: [A, B, C, D])\\n""', '                + ""    --h     sets h (default: A) (values: [A, B, C, D])\\n""', '                + ""    -i      Options: []\\n""', '                + ""    -k      sets k (values: [])\\n"";', '        Assert.assertEquals(sb.toString(), expected);', '    }']","{'public': 11, 'void': 1, 'testOutputFormat': 1, 'class': 1, 'TOKEN_VARIABLE': 42, '@Parameter': 10, 'STRING_LITERAL': 31, 'int': 4, 'INTEGER_LITERAL': 13, 'new': 3, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsTemplate': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'assertEquals': 1, 'toString': 1}",CodeBlock22,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.7668711656441718,0.9285714285714286,0.8888888888888888,4,<NA>,2,2022-10-15 20:33:33.565759
171,CodeBlock48,74,89,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock23,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8709677419354839,0.75,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
172,CodeBlock48,74,89,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock25,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.7352941176470589,0.75,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
173,CodeBlock48,74,89,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock29,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5526315789473685,0.75,0.9,4,<NA>,2,2022-10-15 20:33:33.565759
174,CodeBlock48,74,89,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock50,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8529411764705882,0.75,0.9,4,<NA>,2,2022-10-15 20:33:33.565759
175,CodeBlock48,74,89,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock54,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6153846153846154,1.0,0.75,4,<NA>,2,2022-10-15 20:33:33.565759
176,CodeBlock49,92,107,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongCommandDescription() throws Exception {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addCommand(new ArgsLongCommandDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongCommandDescription': 1, 'throws': 1, 'TOKEN_VARIABLE': 8, 'newBuilder': 1, 'addCommand': 1, 'new': 3, 'ArgsLongCommandDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock24,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8787878787878788,0.75,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
177,CodeBlock50,110,125,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 7, 'new': 3, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock23,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.7352941176470589,0.75,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
178,CodeBlock50,110,125,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 7, 'new': 3, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock25,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.875,0.75,0.9,4,<NA>,2,2022-10-15 20:33:33.565759
179,CodeBlock50,110,125,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 7, 'new': 3, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8529411764705882,0.75,0.9,4,<NA>,2,2022-10-15 20:33:33.565759
180,CodeBlock50,110,125,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 7, 'new': 3, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock54,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6,0.75,0.75,4,<NA>,2,2022-10-15 20:33:33.565759
181,CodeBlock51,128,138,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void programName() {', '        JCommander jcommander = new JCommander();', '        jcommander.setUsageFormatter(new UnixStyleUsageFormatter(jcommander));', '        String programName = ""main"";', '        jcommander.setProgramName(programName);', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '', '        Assert.assertTrue(sb.toString().contains(programName));', '        Assert.assertEquals(jcommander.getProgramName(), programName);', '    }']","{'public': 1, 'void': 1, 'programName': 1, 'TOKEN_VARIABLE': 10, 'new': 3, 'JCommander': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'String': 1, 'STRING_LITERAL': 1, 'setProgramName': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1, 'assertEquals': 1, 'getProgramName': 1}",CodeBlock26,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8666666666666667,0.75,0.7777777777777778,4,<NA>,2,2022-10-15 20:33:33.565759
182,CodeBlock52,141,156,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void dontShowOptionUsageIfThereAreNoOptions() {', '        class CommandTemplate {', '            @Parameter', '            List<String> parameters = new ArrayList<>();', '        }', '', '        CommandTemplate template = new CommandTemplate();', '        JCommander jcommander = JCommander.newBuilder()', '                .addObject(template)', '                .build();', '        jcommander.setUsageFormatter(new UnixStyleUsageFormatter(jcommander));', '        jcommander.setProgramName(""main"");', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '        Assert.assertEquals(sb.toString().indexOf(""options""), -1);', '    }']","{'public': 1, 'void': 1, 'dontShowOptionUsageIfThereAreNoOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 14, 'String': 1, 'new': 4, 'CommandTemplate': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'setProgramName': 1, 'STRING_LITERAL': 2, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertEquals': 1, 'toString': 1, 'indexOf': 1, 'INTEGER_LITERAL': 2}",CodeBlock27,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9,0.8571428571428571,0.7,4,<NA>,2,2022-10-15 20:33:33.565759
183,CodeBlock52,141,156,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void dontShowOptionUsageIfThereAreNoOptions() {', '        class CommandTemplate {', '            @Parameter', '            List<String> parameters = new ArrayList<>();', '        }', '', '        CommandTemplate template = new CommandTemplate();', '        JCommander jcommander = JCommander.newBuilder()', '                .addObject(template)', '                .build();', '        jcommander.setUsageFormatter(new UnixStyleUsageFormatter(jcommander));', '        jcommander.setProgramName(""main"");', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '        Assert.assertEquals(sb.toString().indexOf(""options""), -1);', '    }']","{'public': 1, 'void': 1, 'dontShowOptionUsageIfThereAreNoOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 14, 'String': 1, 'new': 4, 'CommandTemplate': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'setProgramName': 1, 'STRING_LITERAL': 2, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertEquals': 1, 'toString': 1, 'indexOf': 1, 'INTEGER_LITERAL': 2}",CodeBlock62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6521739130434783,0.7142857142857143,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
184,CodeBlock53,159,173,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void annotationsAndDynamicParameters() {', '        class DSimple {', '            @DynamicParameter(names = ""-D"", description = ""Dynamic parameters go here"")', '            public Map<String, String> params = Maps.newHashMap();', '', '            @DynamicParameter(names = ""-A"", assignment = ""@"")', '            public Map<String, String> params2 = Maps.newHashMap();', '        }', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new DSimple())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.getUsageFormatter().usage(new StringBuilder());', '    }']","{'public': 3, 'void': 1, 'annotationsAndDynamicParameters': 1, 'class': 1, 'TOKEN_VARIABLE': 12, '@DynamicParameter': 2, 'STRING_LITERAL': 4, 'String': 4, 'newHashMap': 2, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'DSimple': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'StringBuilder': 1}",CodeBlock28,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9047619047619048,0.8333333333333334,0.875,4,<NA>,2,2022-10-15 20:33:33.565759
185,CodeBlock54,188,199,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(DefaultUsageFormatterTest.getResourceBundle())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 4, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock29,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.875,0.75,0.75,4,<NA>,2,2022-10-15 20:33:33.565759
186,CodeBlock54,188,199,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(DefaultUsageFormatterTest.getResourceBundle())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 4, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6153846153846154,1.0,0.75,4,<NA>,2,2022-10-15 20:33:33.565759
187,CodeBlock54,188,199,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(DefaultUsageFormatterTest.getResourceBundle())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 4, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock50,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6,0.75,0.75,4,<NA>,2,2022-10-15 20:33:33.565759
188,CodeBlock56,218,234,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithRequiredArgsAndResourceBundle() {', '        ArgsHelp argsHelp = new ArgsHelp();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new Object[] {argsHelp, new ArgsRequired()})', '                .resourceBundle(DefaultUsageFormatterTest.getResourceBundle())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        ', '        jc.getUsageFormatter().usage(new StringBuilder());', '        try {', '            jc.parse(""-h"");', '            Assert.fail(""Should have thrown a required parameter exception"");', '        } catch (ParameterException e) {', '            Assert.assertTrue(e.getMessage().contains(""are required""));', '        }', '        Assert.assertTrue(argsHelp.help);', '    }']","{'public': 1, 'void': 1, 'usageWithRequiredArgsAndResourceBundle': 1, 'TOKEN_VARIABLE': 10, 'new': 5, 'ArgsHelp': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsRequired': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'StringBuilder': 1, 'try': 1, 'parse': 1, 'STRING_LITERAL': 3, 'fail': 1, 'catch': 1, 'assertTrue': 2, 'getMessage': 1, 'contains': 1}",CodeBlock30,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.902439024390244,0.8333333333333334,0.9166666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
189,CodeBlock56,218,234,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithRequiredArgsAndResourceBundle() {', '        ArgsHelp argsHelp = new ArgsHelp();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new Object[] {argsHelp, new ArgsRequired()})', '                .resourceBundle(DefaultUsageFormatterTest.getResourceBundle())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        ', '        jc.getUsageFormatter().usage(new StringBuilder());', '        try {', '            jc.parse(""-h"");', '            Assert.fail(""Should have thrown a required parameter exception"");', '        } catch (ParameterException e) {', '            Assert.assertTrue(e.getMessage().contains(""are required""));', '        }', '        Assert.assertTrue(argsHelp.help);', '    }']","{'public': 1, 'void': 1, 'usageWithRequiredArgsAndResourceBundle': 1, 'TOKEN_VARIABLE': 10, 'new': 5, 'ArgsHelp': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsRequired': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'StringBuilder': 1, 'try': 1, 'parse': 1, 'STRING_LITERAL': 3, 'fail': 1, 'catch': 1, 'assertTrue': 2, 'getMessage': 1, 'contains': 1}",CodeBlock62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.5714285714285714,0.6666666666666666,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
190,CodeBlock57,237,249,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageShouldNotChange() {', '        JCommander jc = JCommander.newBuilder().addObject(new Args1()).build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.parse(""-log"", ""1"");', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String expected = sb.toString();', '', '        sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String actual = sb.toString();', '        Assert.assertEquals(actual, expected);', '    }']","{'public': 1, 'void': 1, 'usageShouldNotChange': 1, 'TOKEN_VARIABLE': 12, 'newBuilder': 1, 'addObject': 1, 'new': 4, 'Args1': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'parse': 1, 'STRING_LITERAL': 2, 'StringBuilder': 2, 'getUsageFormatter': 2, 'usage': 2, 'String': 2, 'toString': 2, 'assertEquals': 1}",CodeBlock31,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8974358974358975,0.75,0.8888888888888888,4,<NA>,2,2022-10-15 20:33:33.565759
191,CodeBlock58,261,277,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void doNotDisplayHelpDefaultValue() {', '        class Arg {', '            @Parameter(names = ""--help"", help = true)', '            public boolean help = false;', '        }', '        Arg args = new Arg();', '        String[] argv = {""--help""};', '        JCommander jc = JCommander.newBuilder().addObject(args).build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.parse(argv);', '', '        StringBuilder sb = new StringBuilder();', '', '        jc.getUsageFormatter().usage(sb);', '', '        Assert.assertFalse(sb.toString().contains(""Default""));', '    }']","{'public': 2, 'void': 1, 'doNotDisplayHelpDefaultValue': 1, 'class': 1, 'TOKEN_VARIABLE': 17, '@Parameter': 1, 'STRING_LITERAL': 3, 'boolean': 1, 'new': 3, 'Arg': 1, 'String': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'parse': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertFalse': 1, 'toString': 1, 'contains': 1}",CodeBlock32,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9090909090909092,0.875,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
192,CodeBlock59,280,306,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock33,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9333333333333332,0.875,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
193,CodeBlock59,280,306,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock34,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9016393442622952,0.875,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
194,CodeBlock59,280,306,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock35,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.7887323943661971,0.7777777777777778,0.6923076923076923,4,<NA>,2,2022-10-15 20:33:33.565759
195,CodeBlock59,280,306,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock60,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9672131147540984,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
196,CodeBlock59,280,306,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock61,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8194444444444444,0.7777777777777778,0.7142857142857143,4,<NA>,2,2022-10-15 20:33:33.565759
197,CodeBlock60,309,335,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock33,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9016393442622952,0.875,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
198,CodeBlock60,309,335,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock34,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9333333333333332,0.875,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
199,CodeBlock60,309,335,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock35,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.7887323943661971,0.7777777777777778,0.6923076923076923,4,<NA>,2,2022-10-15 20:33:33.565759
200,CodeBlock60,309,335,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock59,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9672131147540984,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
201,CodeBlock60,309,335,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock61,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8194444444444444,0.7777777777777778,0.7142857142857143,4,<NA>,2,2022-10-15 20:33:33.565759
202,CodeBlock61,338,369,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.setColumnSize(100);', '        jc.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = jc.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 22, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock35,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.943661971830986,0.8888888888888888,0.8571428571428571,4,<NA>,2,2022-10-15 20:33:33.565759
203,CodeBlock61,338,369,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.setColumnSize(100);', '        jc.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = jc.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 22, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock59,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8194444444444444,0.7777777777777778,0.7142857142857143,4,<NA>,2,2022-10-15 20:33:33.565759
204,CodeBlock61,338,369,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.setColumnSize(100);', '        jc.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = jc.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 22, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock60,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8194444444444444,0.7777777777777778,0.7142857142857143,4,<NA>,2,2022-10-15 20:33:33.565759
205,CodeBlock62,372,385,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 12, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 3, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock36,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8888888888888888,0.8333333333333334,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
206,CodeBlock62,372,385,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 12, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 3, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock52,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6521739130434783,0.7142857142857143,0.8,4,<NA>,2,2022-10-15 20:33:33.565759
207,CodeBlock62,372,385,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 12, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 3, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock56,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.5714285714285714,0.6666666666666666,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
208,CodeBlock68,32,44,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,"['  public void namedCommandTest1() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    NamedCommandAdd add = new NamedCommandAdd();', '    jc.addCommand(add);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit);', '    jc.parse(""add"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'namedCommandTest1': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'NamedCommandAdd': 1, 'addCommand': 2, 'CommandCommit': 1, 'STRING_LITERAL': 6, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock69,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,0.8809523809523809,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
209,CodeBlock68,32,44,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,"['  public void namedCommandTest1() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    NamedCommandAdd add = new NamedCommandAdd();', '    jc.addCommand(add);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit);', '    jc.parse(""add"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'namedCommandTest1': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'NamedCommandAdd': 1, 'addCommand': 2, 'CommandCommit': 1, 'STRING_LITERAL': 6, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock76,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,0.8222222222222222,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
210,CodeBlock69,55,67,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,"['  public void commandTest1() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandAdd add = new CommandAdd();', '    jc.addCommand(""add"", add);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit);', '    jc.parse(""add"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'commandTest1': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandAdd': 1, 'addCommand': 2, 'STRING_LITERAL': 7, 'CommandCommit': 1, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock68,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,0.8809523809523809,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
211,CodeBlock69,55,67,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,"['  public void commandTest1() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandAdd add = new CommandAdd();', '    jc.addCommand(""add"", add);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit);', '    jc.parse(""add"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'commandTest1': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandAdd': 1, 'addCommand': 2, 'STRING_LITERAL': 7, 'CommandCommit': 1, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock76,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,0.8863636363636364,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
212,CodeBlock72,109,120,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,"['  public void noParametersAnnotationOnCommandTest() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandNoParametersAnnotation noParametersAnnotation = new CommandNoParametersAnnotation();', '    jc.addCommand(""no-annotation"", noParametersAnnotation);', '', '    jc.setProgramName(""TestCommander"");', '    StringBuilder out = new StringBuilder();', '    jc.getUsageFormatter().usage(out);', '', '    Assert.assertTrue(out.toString().contains(""no-annotation""));', '  }']","{'public': 1, 'void': 1, 'noParametersAnnotationOnCommandTest': 1, 'TOKEN_VARIABLE': 11, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandNoParametersAnnotation': 1, 'addCommand': 1, 'STRING_LITERAL': 3, 'setProgramName': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock79,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,0.7297297297297297,0.8333333333333334,0.75,4,<NA>,2,2022-10-15 20:33:33.565759
213,CodeBlock74,37,48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,"['  public void oneCommandWithSingleAlias() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandAdd add = new CommandAdd();', '    jc.addCommand(""add"", add, ""a"");', '    jc.parse(""a"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(jc.getParsedAlias(), ""a"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'oneCommandWithSingleAlias': 1, 'TOKEN_VARIABLE': 10, 'new': 3, 'CommandMain': 1, 'JCommander': 1, 'CommandAdd': 1, 'addCommand': 1, 'STRING_LITERAL': 8, 'parse': 1, 'assertEquals': 4, 'getParsedCommand': 1, 'getParsedAlias': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock75,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,0.7083333333333334,0.7142857142857143,0.875,4,<NA>,2,2022-10-15 20:33:33.565759
214,CodeBlock75,60,72,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,"['  private void testCommitWithAlias(String alias) {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit, ""ci"", ""cmt"");', '    jc.parse(alias, ""--amend"", ""--author"", ""jack"", ""file1.txt"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""commit"");', '    Assert.assertEquals(jc.getParsedAlias(), alias);', '    Assert.assertEquals(commit.amend.booleanValue(), true);', '    Assert.assertEquals(commit.author, ""jack"");', '    Assert.assertEquals(commit.files, Arrays.asList(""file1.txt""));', '  }']","{'private': 1, 'void': 1, 'testCommitWithAlias': 1, 'String': 1, 'TOKEN_VARIABLE': 14, 'new': 3, 'CommandMain': 1, 'JCommander': 1, 'CommandCommit': 1, 'addCommand': 1, 'STRING_LITERAL': 10, 'parse': 1, 'assertEquals': 5, 'getParsedCommand': 1, 'getParsedAlias': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock74,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,0.7083333333333334,0.7142857142857143,0.875,4,<NA>,2,2022-10-15 20:33:33.565759
215,CodeBlock76,75,87,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,"['  public void twoCommandsWithAliases() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandAdd add = new CommandAdd();', '    jc.addCommand(""add"", add, ""a"");', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit, ""ci"", ""cmt"");', '    jc.parse(""a"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'twoCommandsWithAliases': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandAdd': 1, 'addCommand': 2, 'STRING_LITERAL': 10, 'CommandCommit': 1, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock68,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,0.8222222222222222,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
216,CodeBlock76,75,87,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,"['  public void twoCommandsWithAliases() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandAdd add = new CommandAdd();', '    jc.addCommand(""add"", add, ""a"");', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit, ""ci"", ""cmt"");', '    jc.parse(""a"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'twoCommandsWithAliases': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandAdd': 1, 'addCommand': 2, 'STRING_LITERAL': 10, 'CommandCommit': 1, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock69,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,0.8863636363636364,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
217,CodeBlock79,135,145,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,"['  public void usageDisplaysCommandWithAliasesOnlyOnce() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit, ""ci"", ""cmt"");', '    StringBuilder out = new StringBuilder();', '    jc.getUsageFormatter().usage(out);', '    ', '    ', '    patternMatchesTimes(""commit\\\\(ci,cmt\\\\)"", out.toString(), 2);', '  }']","{'public': 1, 'void': 1, 'usageDisplaysCommandWithAliasesOnlyOnce': 1, 'TOKEN_VARIABLE': 11, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandCommit': 1, 'addCommand': 1, 'STRING_LITERAL': 4, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'patternMatchesTimes': 1, 'toString': 1, 'INTEGER_LITERAL': 1}",CodeBlock72,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,0.7297297297297297,0.8333333333333334,0.75,4,<NA>,2,2022-10-15 20:33:33.565759
218,CodeBlock83,44,55,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/ParameterizedParserTest.java,"['  public void standardParameterizedParsingTest() {', '    StandardCommandClassExample_01 commandOptions = new StandardCommandClassExample_01();', '    ', '    JCommander jcommander = new JCommander(commandOptions);', '    ', '    testFields(jcommander, EXPECTED_MAP);', '', '    jcommander.parse(ARGS);', '    Assert.assertTrue(EXPECTED_VERSION.equals(commandOptions.version), ""Version is not "" + EXPECTED_VERSION);', '    Assert.assertTrue(EXPECTED_STACK_LEVEL == commandOptions.subCommands.stackLevel, ""Stack level field is not"" + EXPECTED_STACK_LEVEL);', '    Assert.assertTrue(EXPECTED_LOG_LEVEL.equals(commandOptions.subCommands.loggingLevel), ""Log level is not "" + EXPECTED_LOG_LEVEL);', '  }']","{'public': 1, 'void': 1, 'standardParameterizedParsingTest': 1, 'TOKEN_VARIABLE': 15, 'new': 2, 'StandardCommandClassExample_01': 1, 'JCommander': 1, 'testFields': 1, 'parse': 1, 'assertTrue': 3, 'equals': 2, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 3}",CodeBlock84,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/ParameterizedParserTest.java,0.8048780487804879,0.875,0.7142857142857143,4,<NA>,2,2022-10-15 20:33:33.565759
219,CodeBlock84,58,71,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/ParameterizedParserTest.java,"['  public void jsonParameterizedParsingTest() {', '    JsonCommandClassExample_01 commandOptions = new JsonCommandClassExample_01();', '    ', '    JCommander jcommander = new JCommander();', '    jcommander.setParameterizedParser(new JsonAnnotationParameterizedParser());', '    jcommander.addObject(commandOptions);', '    ', '    testFields(jcommander, EXPECTED_MAP);', '', '    jcommander.parse(ARGS);', '    Assert.assertTrue(EXPECTED_VERSION.equals(commandOptions.version), ""Version is not "" + EXPECTED_VERSION);', '    Assert.assertTrue(EXPECTED_STACK_LEVEL == commandOptions.subCommands.stackLevel, ""Stack level field is not"" + EXPECTED_STACK_LEVEL);', '    Assert.assertTrue(EXPECTED_LOG_LEVEL.equals(commandOptions.subCommands.loggingLevel), ""Log level is not "" + EXPECTED_LOG_LEVEL);', '  }']","{'public': 1, 'void': 1, 'jsonParameterizedParsingTest': 1, 'TOKEN_VARIABLE': 15, 'new': 3, 'JsonCommandClassExample_01': 1, 'JCommander': 1, 'setParameterizedParser': 1, 'JsonAnnotationParameterizedParser': 1, 'addObject': 1, 'testFields': 1, 'parse': 1, 'assertTrue': 3, 'equals': 2, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 3}",CodeBlock83,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/ParameterizedParserTest.java,0.8048780487804879,0.875,0.7142857142857143,4,<NA>,2,2022-10-15 20:33:33.565759
220,CodeBlock86,76,97,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/JsonAnnotationParameterizedParser.java,"['  private void describeClassTree(Class<?> inputClass, Set<Class<?>> setOfClasses) {', '    ', '    if (inputClass == null) {', '      return;', '    }', '', '    ', '    if (Object.class.equals(inputClass) || setOfClasses.contains(inputClass)) {', '      return;', '    }', '', '    ', '    setOfClasses.add(inputClass);', '', '    ', '    describeClassTree(inputClass.getSuperclass(), setOfClasses);', '', '    ', '    for (Class<?> hasInterface : inputClass.getInterfaces()) {', '      describeClassTree(hasInterface, setOfClasses);', '    }', '  }']","{'private': 1, 'void': 1, 'describeClassTree': 3, 'TOKEN_VARIABLE': 15, 'if': 2, 'return': 2, 'equals': 1, 'contains': 1, 'add': 1, 'getSuperclass': 1, 'for': 1, 'getInterfaces': 1}",CodeBlock90,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/Parameterized.java,0.967741935483871,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
221,CodeBlock87,105,117,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/JsonAnnotationParameterizedParser.java,"['  private Set<Class<?>> describeClassTree(Class<?> inputClass) {', '    if (inputClass == null) {', '      return Collections.emptySet();', '    }', '', '    ', '    Set<Class<?>> classes = Sets.newLinkedHashSet();', '', '    ', '    describeClassTree(inputClass, classes);', '', '    return classes;', '  }']","{'private': 1, 'TOKEN_VARIABLE': 12, 'describeClassTree': 2, 'if': 1, 'return': 2, 'emptySet': 1, 'newLinkedHashSet': 1}",CodeBlock91,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/Parameterized.java,0.9523809523809524,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
222,CodeBlock90,48,69,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/Parameterized.java,"['  private static void describeClassTree(Class<?> inputClass, Set<Class<?>> setOfClasses) {', '    ', '    if(inputClass == null) {', '      return;', '    }', '', '    ', '    if(Object.class.equals(inputClass) || setOfClasses.contains(inputClass)) {', '      return;', '    }', '', '    ', '    setOfClasses.add(inputClass);', '', '    ', '    describeClassTree(inputClass.getSuperclass(), setOfClasses);', '', '    ', '    for(Class<?> hasInterface : inputClass.getInterfaces()) {', '      describeClassTree(hasInterface, setOfClasses);', '    }', '  }']","{'private': 1, 'static': 1, 'void': 1, 'describeClassTree': 3, 'TOKEN_VARIABLE': 15, 'if': 2, 'return': 2, 'equals': 1, 'contains': 1, 'add': 1, 'getSuperclass': 1, 'for': 1, 'getInterfaces': 1}",CodeBlock86,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/JsonAnnotationParameterizedParser.java,0.967741935483871,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
223,CodeBlock91,78,90,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/Parameterized.java,"['  private static Set<Class<?>> describeClassTree(Class<?> inputClass) {', '    if(inputClass == null) {', '      return Collections.emptySet();', '    }', '', '    ', '    Set<Class<?>> classes = Sets.newLinkedHashSet();', '', '    ', '    describeClassTree(inputClass, classes);', '', '    return classes;', '  }']","{'private': 1, 'static': 1, 'TOKEN_VARIABLE': 12, 'describeClassTree': 2, 'if': 1, 'return': 2, 'emptySet': 1, 'newLinkedHashSet': 1}",CodeBlock87,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/JsonAnnotationParameterizedParser.java,0.9523809523809524,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
224,CodeBlock125,32,46,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/StringKey.java,"['  public boolean equals(Object obj) {', '    if (this == obj) { ', '      return true; } ', '    if (obj == null) { ', '      return false; } ', '    if (getClass() != obj.getClass()) { ', '      return false; } ', '    StringKey other = (StringKey) obj;', '    if (name == null) {', '      if (other.name != null) { ', '        return false; } ', '    } else if (!name.equals(other.name)) {  { ', '      return false; } ', '    return true; } ', '  }']","{'public': 1, 'boolean': 1, 'equals': 2, 'TOKEN_VARIABLE': 21, 'if': 6, 'this': 1, 'return': 6, 'getClass': 2}",CodeBlock157,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,1.0,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
225,CodeBlock148,1324,1340,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,"['    public void addConverterFactory(final IStringConverterFactory converterFactory) {', '        addConverterInstanceFactory(new IStringConverterInstanceFactory() {', '            @SuppressWarnings(""unchecked"")', '            @Override', '            public IStringConverter<?> getConverterInstance(Parameter parameter, Class<?> forType, String optionName) {', '                final Class<? extends IStringConverter<?>> converterClass = converterFactory.getConverter(forType);', '                try {', '                    if(optionName == null) {', '                        optionName = parameter.names().length > 0 ? parameter.names()[0] : ""[Main class]"";', '                    }', '                    return converterClass != null ? instantiateConverter(optionName, converterClass) : null;', '                } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {', '                    throw new ParameterException(e);', '                }', '            }', '        });', '    }']","{'public': 2, 'void': 1, 'addConverterFactory': 1, 'final': 2, 'TOKEN_VARIABLE': 27, 'addConverterInstanceFactory': 1, 'new': 2, 'IStringConverterInstanceFactory': 1, '@SuppressWarnings': 1, 'STRING_LITERAL': 2, 'getConverterInstance': 1, 'String': 1, 'extends': 1, 'getConverter': 1, 'try': 1, 'if': 1, 'names': 2, 'INTEGER_LITERAL': 2, 'return': 1, 'instantiateConverter': 1, 'catch': 1, 'throw': 1, 'ParameterException': 1}",CodeBlock149,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,0.7818181818181819,0.7272727272727273,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
226,CodeBlock149,1328,1338,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,"['            public IStringConverter<?> getConverterInstance(Parameter parameter, Class<?> forType, String optionName) {', '                final Class<? extends IStringConverter<?>> converterClass = converterFactory.getConverter(forType);', '                try {', '                    if(optionName == null) {', '                        optionName = parameter.names().length > 0 ? parameter.names()[0] : ""[Main class]"";', '                    }', '                    return converterClass != null ? instantiateConverter(optionName, converterClass) : null;', '                } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {', '                    throw new ParameterException(e);', '                }', '            }']","{'public': 1, 'TOKEN_VARIABLE': 24, 'getConverterInstance': 1, 'String': 1, 'final': 1, 'extends': 1, 'getConverter': 1, 'try': 1, 'if': 1, 'names': 2, 'INTEGER_LITERAL': 2, 'STRING_LITERAL': 1, 'return': 1, 'instantiateConverter': 1, 'catch': 1, 'throw': 1, 'new': 1, 'ParameterException': 1}",CodeBlock148,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,0.7818181818181819,0.7272727272727273,0.6666666666666666,4,<NA>,2,2022-10-15 20:33:33.565759
227,CodeBlock157,1621,1635,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,"['        public boolean equals(Object obj) {', '            if (this == obj) { ', '                return true; } ', '            if (obj == null) { ', '                return false; } ', '            if (getClass() != obj.getClass()) { ', '                return false; } ', '            ProgramName other = (ProgramName) obj;', '            if (name == null) {', '                if (other.name != null) { ', '                    return false; } ', '            } else if (!name.equals(other.name)) {  { ', '                return false; } ', '            return true; } ', '        }']","{'public': 1, 'boolean': 1, 'equals': 2, 'TOKEN_VARIABLE': 21, 'if': 6, 'this': 1, 'return': 6, 'getClass': 2}",CodeBlock125,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/StringKey.java,1.0,1.0,1.0,4,<NA>,2,2022-10-15 20:33:33.565759
228,CodeBlock4,123,140,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,"['  public void commandTest() {', '    class Delegate {', '      @Parameter(names = ""-a"")', '      public String a = ""b"";', '    }', '    class Command {', '      @ParametersDelegate', '      public Delegate delegate = new Delegate();', '    }', '', '    Command c = new Command();', '', '    JCommander cmd = new JCommander();', '    cmd.addCommand(""command"", c);', '', '    cmd.parse(""command -a a"".split("" ""));', '    Assert.assertEquals(c.delegate.a, ""a"");', '  }']","{'public': 3, 'void': 1, 'commandTest': 1, 'class': 2, 'TOKEN_VARIABLE': 13, '@Parameter': 1, 'STRING_LITERAL': 6, 'String': 1, 'new': 3, 'Delegate': 1, 'Command': 1, 'JCommander': 1, 'addCommand': 1, 'parse': 1, 'split': 1, 'assertEquals': 1}",CodeBlock15,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.5952380952380952,0.6666666666666666,0.8333333333333334,4,<NA>,1,2022-10-15 20:33:33.565759
229,CodeBlock4,123,140,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,"['  public void commandTest() {', '    class Delegate {', '      @Parameter(names = ""-a"")', '      public String a = ""b"";', '    }', '    class Command {', '      @ParametersDelegate', '      public Delegate delegate = new Delegate();', '    }', '', '    Command c = new Command();', '', '    JCommander cmd = new JCommander();', '    cmd.addCommand(""command"", c);', '', '    cmd.parse(""command -a a"".split("" ""));', '    Assert.assertEquals(c.delegate.a, ""a"");', '  }']","{'public': 3, 'void': 1, 'commandTest': 1, 'class': 2, 'TOKEN_VARIABLE': 13, '@Parameter': 1, 'STRING_LITERAL': 6, 'String': 1, 'new': 3, 'Delegate': 1, 'Command': 1, 'JCommander': 1, 'addCommand': 1, 'parse': 1, 'split': 1, 'assertEquals': 1}",CodeBlock18,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.5952380952380952,0.6666666666666666,0.8333333333333334,4,<NA>,1,2022-10-15 20:33:33.565759
230,CodeBlock4,123,140,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,"['  public void commandTest() {', '    class Delegate {', '      @Parameter(names = ""-a"")', '      public String a = ""b"";', '    }', '    class Command {', '      @ParametersDelegate', '      public Delegate delegate = new Delegate();', '    }', '', '    Command c = new Command();', '', '    JCommander cmd = new JCommander();', '    cmd.addCommand(""command"", c);', '', '    cmd.parse(""command -a a"".split("" ""));', '    Assert.assertEquals(c.delegate.a, ""a"");', '  }']","{'public': 3, 'void': 1, 'commandTest': 1, 'class': 2, 'TOKEN_VARIABLE': 13, '@Parameter': 1, 'STRING_LITERAL': 6, 'String': 1, 'new': 3, 'Delegate': 1, 'Command': 1, 'JCommander': 1, 'addCommand': 1, 'parse': 1, 'split': 1, 'assertEquals': 1}",CodeBlock19,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.6046511627906976,0.6666666666666666,0.8333333333333334,4,<NA>,1,2022-10-15 20:33:33.565759
231,CodeBlock4,123,140,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,"['  public void commandTest() {', '    class Delegate {', '      @Parameter(names = ""-a"")', '      public String a = ""b"";', '    }', '    class Command {', '      @ParametersDelegate', '      public Delegate delegate = new Delegate();', '    }', '', '    Command c = new Command();', '', '    JCommander cmd = new JCommander();', '    cmd.addCommand(""command"", c);', '', '    cmd.parse(""command -a a"".split("" ""));', '    Assert.assertEquals(c.delegate.a, ""a"");', '  }']","{'public': 3, 'void': 1, 'commandTest': 1, 'class': 2, 'TOKEN_VARIABLE': 13, '@Parameter': 1, 'STRING_LITERAL': 6, 'String': 1, 'new': 3, 'Delegate': 1, 'Command': 1, 'JCommander': 1, 'addCommand': 1, 'parse': 1, 'split': 1, 'assertEquals': 1}",CodeBlock37,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,0.5581395348837209,0.6666666666666666,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
232,CodeBlock4,123,140,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,"['  public void commandTest() {', '    class Delegate {', '      @Parameter(names = ""-a"")', '      public String a = ""b"";', '    }', '    class Command {', '      @ParametersDelegate', '      public Delegate delegate = new Delegate();', '    }', '', '    Command c = new Command();', '', '    JCommander cmd = new JCommander();', '    cmd.addCommand(""command"", c);', '', '    cmd.parse(""command -a a"".split("" ""));', '    Assert.assertEquals(c.delegate.a, ""a"");', '  }']","{'public': 3, 'void': 1, 'commandTest': 1, 'class': 2, 'TOKEN_VARIABLE': 13, '@Parameter': 1, 'STRING_LITERAL': 6, 'String': 1, 'new': 3, 'Delegate': 1, 'Command': 1, 'JCommander': 1, 'addCommand': 1, 'parse': 1, 'split': 1, 'assertEquals': 1}",CodeBlock38,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,0.5581395348837209,0.6666666666666666,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
233,CodeBlock11,42,57,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/MethodSetterTest.java,"['  public void setterThatThrows() {', '    class Arg {', '      @Parameter(names = ""--host"")', '      public void setHost(String host) {', '        throw new ParameterException(""Illegal host"");', '      }', '    }', '    boolean passed = false;', '    try {', '      JCommander.newBuilder().addObject(new Arg()).build().parse(""--host"", ""host"");', '    } catch(ParameterException ex) {', '      Assert.assertEquals(ex.getCause(), null);', '      passed = true;', '    }', '    Assert.assertTrue(passed, ""Should have thrown an exception"");', '  }']","{'public': 2, 'void': 2, 'setterThatThrows': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'setHost': 1, 'String': 1, 'throw': 1, 'new': 2, 'ParameterException': 1, 'boolean': 1, 'try': 1, 'newBuilder': 1, 'addObject': 1, 'Arg': 1, 'build': 1, 'parse': 1, 'catch': 1, 'assertEquals': 1, 'getCause': 1, 'assertTrue': 1}",CodeBlock36,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5652173913043478,0.6666666666666666,0.75,4,<NA>,1,2022-10-15 20:33:33.565759
234,CodeBlock15,11,22,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void caseInsensitiveOption() {', '    class Arg {', '  ', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.parse(""--PARAM"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'caseInsensitiveOption': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock4,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,0.5952380952380952,0.6666666666666666,0.8333333333333334,4,<NA>,1,2022-10-15 20:33:33.565759
235,CodeBlock15,11,22,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void caseInsensitiveOption() {', '    class Arg {', '  ', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.parse(""--PARAM"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'caseInsensitiveOption': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock18,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.8709677419354839,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
236,CodeBlock15,11,22,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void caseInsensitiveOption() {', '    class Arg {', '  ', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.parse(""--PARAM"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'caseInsensitiveOption': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock19,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.875,0.8333333333333334,0.8333333333333334,4,<NA>,1,2022-10-15 20:33:33.565759
237,CodeBlock17,36,50,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void caseInsensitiveArguments() throws Exception {', '    @Parameters(separators = ""="")', '    class TestJobRunnerArgs {', '      @Parameter(names = ""someParameter2"")', '      private String someParameter2;', '    }', '', '    String[] testValues = {""someparameter2=2""};', '    TestJobRunnerArgs testJobRunnerArgs = new TestJobRunnerArgs();', '', '    JCommander jCommander = JCommander.newBuilder().addObject(testJobRunnerArgs).build();', '    jCommander.setCaseSensitiveOptions(false);', '    jCommander.parse(testValues);', '    Assert.assertEquals(""2"", testJobRunnerArgs.someParameter2);', '  }']","{'public': 1, 'void': 1, 'caseInsensitiveArguments': 1, 'throws': 1, 'TOKEN_VARIABLE': 14, '@Parameters': 1, 'STRING_LITERAL': 4, 'class': 1, '@Parameter': 1, 'private': 1, 'String': 2, 'new': 1, 'TestJobRunnerArgs': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setCaseSensitiveOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock32,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5510204081632653,0.75,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
238,CodeBlock18,52,62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptions() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--par"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock4,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,0.5952380952380952,0.6666666666666666,0.8333333333333334,4,<NA>,1,2022-10-15 20:33:33.565759
239,CodeBlock18,52,62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptions() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--par"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock15,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.8709677419354839,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
240,CodeBlock18,52,62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptions() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--par"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 10, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock19,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.875,0.8333333333333334,0.8333333333333334,4,<NA>,1,2022-10-15 20:33:33.565759
241,CodeBlock19,64,75,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptionsCaseInsensitive() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--PAR"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptionsCaseInsensitive': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock4,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,0.6046511627906976,0.6666666666666666,0.8333333333333334,4,<NA>,1,2022-10-15 20:33:33.565759
242,CodeBlock19,64,75,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptionsCaseInsensitive() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--PAR"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptionsCaseInsensitive': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock15,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.875,0.8333333333333334,0.8333333333333334,4,<NA>,1,2022-10-15 20:33:33.565759
243,CodeBlock19,64,75,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void abbreviatedOptionsCaseInsensitive() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--param"" })', '      private String param;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--PAR"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'abbreviatedOptionsCaseInsensitive': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'String': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock18,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.875,0.8333333333333334,0.8333333333333334,4,<NA>,1,2022-10-15 20:33:33.565759
244,CodeBlock20,78,90,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void ambiguousAbbreviatedOptions() {', '    class Arg {', '      @Parameter(names = { ""--param"" })', '      private String param;', '      @Parameter(names = { ""--parb"" })', '      private String parb;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--par"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'ambiguousAbbreviatedOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 12, '@Parameter': 2, 'STRING_LITERAL': 5, 'private': 2, 'String': 2, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock21,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.8918918918918919,1.0,0.8333333333333334,4,<NA>,1,2022-10-15 20:33:33.565759
245,CodeBlock21,93,106,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,"['  public void ambiguousAbbreviatedOptionsCaseInsensitive() {', '    class Arg {', '      @Parameter(names = { ""--param"" })', '      private String param;', '      @Parameter(names = { ""--parb"" })', '      private String parb;', '    }', '    Arg a = new Arg();', '    JCommander jc = new JCommander(a);', '    jc.setCaseSensitiveOptions(false);', '    jc.setAllowAbbreviatedOptions(true);', '    jc.parse(""--PAR"", ""foo"");', '    Assert.assertEquals(a.param, ""foo"");', '  }']","{'public': 1, 'void': 1, 'ambiguousAbbreviatedOptionsCaseInsensitive': 1, 'class': 1, 'TOKEN_VARIABLE': 13, '@Parameter': 2, 'STRING_LITERAL': 5, 'private': 2, 'String': 2, 'new': 2, 'Arg': 1, 'JCommander': 1, 'setCaseSensitiveOptions': 1, 'setAllowAbbreviatedOptions': 1, 'parse': 1, 'assertEquals': 1}",CodeBlock20,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.8918918918918919,1.0,0.8333333333333334,4,<NA>,1,2022-10-15 20:33:33.565759
246,CodeBlock22,32,96,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testOutputFormat() {', '        class ArgsTemplate {', '            @Parameter(names = {""--a"", ""-a""})', '            public int a;', '            @Parameter(names = {""--b"", ""-b""})', '            public int b = 2;', '            @Parameter(names = {""--c"", ""-c""}, description = ""sets c"")', '            public int c;', '            @Parameter(names = {""--d"", ""-d""}, description = ""sets d"")', '            public int d = 2;', '            @Parameter(names = {""--e""})', '            public TestEnum1 e;', '            @Parameter(names = {""--f""})', '            public TestEnum1 f = TestEnum1.A;', '            @Parameter(names = {""--g""}, description = ""sets g"")', '            public TestEnum1 g;', '            @Parameter(names = {""--h""}, description = ""sets h"")', '            public TestEnum1 h = TestEnum1.A;', '            @Parameter(names = {""-i""})', '            public TestEnum2 i;', '            @Parameter(names = {""-k""}, description = ""sets k"")', '            public TestEnum2 k;', '        }', '', '        ', '        StringBuilder sb = new StringBuilder();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsTemplate())', '                .build();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        String expected = ""Usage: <main class> [options]\\n""', '                + ""  Options:\\n""', '                + ""    --a, -a\\n""', '                + ""      Default: 0\\n""', '                + ""    --b, -b\\n""', '                + ""      Default: 2\\n""', '                + ""    --c, -c\\n""', '                + ""      sets c\\n""', '                + ""      Default: 0\\n""', '                + ""    --d, -d\\n""', '                + ""      sets d\\n""', '                + ""      Default: 2\\n""', '                + ""    --e\\n""', '                + ""      Options: [A, B, C, D]\\n""', '                + ""    --f\\n""', '                + ""      Options: [A, B, C, D]\\n""', '                + ""      Default: A\\n""', '                + ""    --g\\n""', '                + ""      sets g\\n""', '                + ""      Possible Values: [A, B, C, D]\\n""', '                + ""    --h\\n""', '                + ""      sets h\\n""', '                + ""      Default: A\\n""', '                + ""      Possible Values: [A, B, C, D]\\n""', '                + ""    -i\\n""', '                + ""      Options: []\\n""', '                + ""    -k\\n""', '                + ""      sets k\\n""', '                + ""      Possible Values: []\\n"";', '        Assert.assertEquals(sb.toString(), expected);', '    }']","{'public': 11, 'void': 1, 'testOutputFormat': 1, 'class': 1, 'TOKEN_VARIABLE': 41, '@Parameter': 10, 'STRING_LITERAL': 48, 'int': 4, 'INTEGER_LITERAL': 30, 'new': 2, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsTemplate': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'assertEquals': 1, 'toString': 1}",CodeBlock47,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.7668711656441718,0.9285714285714286,0.8888888888888888,4,<NA>,1,2022-10-15 20:33:33.565759
247,CodeBlock23,99,113,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 2, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock25,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8333333333333334,0.75,0.8888888888888888,4,<NA>,1,2022-10-15 20:33:33.565759
248,CodeBlock23,99,113,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 2, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock29,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5714285714285714,1.0,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
249,CodeBlock23,99,113,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 2, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8709677419354839,0.75,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
250,CodeBlock23,99,113,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 2, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock50,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.7352941176470589,0.75,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
251,CodeBlock24,116,130,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testLongCommandDescription() throws Exception {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addCommand(new ArgsLongCommandDescription())', '                .build();', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongCommandDescription': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addCommand': 1, 'new': 2, 'ArgsLongCommandDescription': 1, 'build': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock49,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8787878787878788,0.75,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
252,CodeBlock25,133,147,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 6, 'new': 2, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock23,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8333333333333334,0.75,0.8888888888888888,4,<NA>,1,2022-10-15 20:33:33.565759
253,CodeBlock25,133,147,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 6, 'new': 2, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock29,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5555555555555556,0.75,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
254,CodeBlock25,133,147,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 6, 'new': 2, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.7352941176470589,0.75,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
255,CodeBlock25,133,147,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 6, 'new': 2, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock50,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.875,0.75,0.9,4,<NA>,1,2022-10-15 20:33:33.565759
256,CodeBlock26,150,159,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void programName() {', '        JCommander jcommander = new JCommander();', '        String programName = ""main"";', '        jcommander.setProgramName(programName);', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '', '        Assert.assertTrue(sb.toString().contains(programName));', '        Assert.assertEquals(jcommander.getProgramName(), programName);', '    }']","{'public': 1, 'void': 1, 'programName': 1, 'TOKEN_VARIABLE': 9, 'new': 2, 'JCommander': 1, 'String': 1, 'STRING_LITERAL': 1, 'setProgramName': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1, 'assertEquals': 1, 'getProgramName': 1}",CodeBlock51,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8666666666666667,0.75,0.7777777777777778,4,<NA>,1,2022-10-15 20:33:33.565759
257,CodeBlock27,162,176,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void dontShowOptionUsageIfThereAreNoOptions() {', '        class CommandTemplate {', '            @Parameter', '            List<String> parameters = new ArrayList<>();', '        }', '', '        CommandTemplate template = new CommandTemplate();', '        JCommander jcommander = JCommander.newBuilder()', '                .addObject(template)', '                .build();', '        jcommander.setProgramName(""main"");', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '        Assert.assertEquals(sb.toString().indexOf(""options""), -1);', '    }']","{'public': 1, 'void': 1, 'dontShowOptionUsageIfThereAreNoOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 13, 'String': 1, 'new': 3, 'CommandTemplate': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setProgramName': 1, 'STRING_LITERAL': 2, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertEquals': 1, 'toString': 1, 'indexOf': 1, 'INTEGER_LITERAL': 2}",CodeBlock36,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.6190476190476191,0.7142857142857143,0.75,4,<NA>,1,2022-10-15 20:33:33.565759
258,CodeBlock27,162,176,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void dontShowOptionUsageIfThereAreNoOptions() {', '        class CommandTemplate {', '            @Parameter', '            List<String> parameters = new ArrayList<>();', '        }', '', '        CommandTemplate template = new CommandTemplate();', '        JCommander jcommander = JCommander.newBuilder()', '                .addObject(template)', '                .build();', '        jcommander.setProgramName(""main"");', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '        Assert.assertEquals(sb.toString().indexOf(""options""), -1);', '    }']","{'public': 1, 'void': 1, 'dontShowOptionUsageIfThereAreNoOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 13, 'String': 1, 'new': 3, 'CommandTemplate': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setProgramName': 1, 'STRING_LITERAL': 2, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertEquals': 1, 'toString': 1, 'indexOf': 1, 'INTEGER_LITERAL': 2}",CodeBlock52,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9,0.8571428571428571,0.7,4,<NA>,1,2022-10-15 20:33:33.565759
259,CodeBlock28,179,192,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void annotationsAndDynamicParameters() {', '        class DSimple {', '            @DynamicParameter(names = ""-D"", description = ""Dynamic parameters go here"")', '            public Map<String, String> params = Maps.newHashMap();', '', '            @DynamicParameter(names = ""-A"", assignment = ""@"")', '            public Map<String, String> params2 = Maps.newHashMap();', '        }', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new DSimple())', '                .build();', '        jc.getUsageFormatter().usage(new StringBuilder());', '    }']","{'public': 3, 'void': 1, 'annotationsAndDynamicParameters': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@DynamicParameter': 2, 'STRING_LITERAL': 4, 'String': 4, 'newHashMap': 2, 'newBuilder': 1, 'addObject': 1, 'new': 2, 'DSimple': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'StringBuilder': 1}",CodeBlock53,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9047619047619048,0.8333333333333334,0.875,4,<NA>,1,2022-10-15 20:33:33.565759
260,CodeBlock29,206,216,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(getResourceBundle())', '                .build();', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock23,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5714285714285714,1.0,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
261,CodeBlock29,206,216,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(getResourceBundle())', '                .build();', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock25,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5555555555555556,0.75,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
262,CodeBlock29,206,216,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(getResourceBundle())', '                .build();', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.5526315789473685,0.75,0.9,4,<NA>,1,2022-10-15 20:33:33.565759
263,CodeBlock29,206,216,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(getResourceBundle())', '                .build();', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 6, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock54,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.875,0.75,0.75,4,<NA>,1,2022-10-15 20:33:33.565759
264,CodeBlock30,234,249,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithRequiredArgsAndResourceBundle() {', '        ArgsHelp argsHelp = new ArgsHelp();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new Object[] {argsHelp, new ArgsRequired()})', '                .resourceBundle(getResourceBundle())', '                .build();', '        ', '        jc.getUsageFormatter().usage(new StringBuilder());', '        try {', '            jc.parse(""-h"");', '            Assert.fail(""Should have thrown a required parameter exception"");', '        } catch (ParameterException e) {', '            Assert.assertTrue(e.getMessage().contains(""are required""));', '        }', '        Assert.assertTrue(argsHelp.help);', '    }']","{'public': 1, 'void': 1, 'usageWithRequiredArgsAndResourceBundle': 1, 'TOKEN_VARIABLE': 9, 'new': 4, 'ArgsHelp': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsRequired': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'StringBuilder': 1, 'try': 1, 'parse': 1, 'STRING_LITERAL': 3, 'fail': 1, 'catch': 1, 'assertTrue': 2, 'getMessage': 1, 'contains': 1}",CodeBlock56,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.902439024390244,0.8333333333333334,0.9166666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
265,CodeBlock31,252,263,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageShouldNotChange() {', '        JCommander jc = JCommander.newBuilder().addObject(new Args1()).build();', '        jc.parse(""-log"", ""1"");', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String expected = sb.toString();', '', '        sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String actual = sb.toString();', '        Assert.assertEquals(actual, expected);', '    }']","{'public': 1, 'void': 1, 'usageShouldNotChange': 1, 'TOKEN_VARIABLE': 11, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'Args1': 1, 'build': 1, 'parse': 1, 'STRING_LITERAL': 2, 'StringBuilder': 2, 'getUsageFormatter': 2, 'usage': 2, 'String': 2, 'toString': 2, 'assertEquals': 1}",CodeBlock57,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8974358974358975,0.75,0.8888888888888888,4,<NA>,1,2022-10-15 20:33:33.565759
266,CodeBlock32,274,289,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void doNotDisplayHelpDefaultValue() {', '        class Arg {', '            @Parameter(names = ""--help"", help = true)', '            public boolean help = false;', '        }', '        Arg args = new Arg();', '        String[] argv = {""--help""};', '        JCommander jc = JCommander.newBuilder().addObject(args).build();', '        jc.parse(argv);', '', '        StringBuilder sb = new StringBuilder();', '', '        jc.getUsageFormatter().usage(sb);', '', '        Assert.assertFalse(sb.toString().contains(""Default""));', '    }']","{'public': 2, 'void': 1, 'doNotDisplayHelpDefaultValue': 1, 'class': 1, 'TOKEN_VARIABLE': 16, '@Parameter': 1, 'STRING_LITERAL': 3, 'boolean': 1, 'new': 2, 'Arg': 1, 'String': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'parse': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertFalse': 1, 'toString': 1, 'contains': 1}",CodeBlock17,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/FinderTest.java,0.5510204081632653,0.75,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
267,CodeBlock32,274,289,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void doNotDisplayHelpDefaultValue() {', '        class Arg {', '            @Parameter(names = ""--help"", help = true)', '            public boolean help = false;', '        }', '        Arg args = new Arg();', '        String[] argv = {""--help""};', '        JCommander jc = JCommander.newBuilder().addObject(args).build();', '        jc.parse(argv);', '', '        StringBuilder sb = new StringBuilder();', '', '        jc.getUsageFormatter().usage(sb);', '', '        Assert.assertFalse(sb.toString().contains(""Default""));', '    }']","{'public': 2, 'void': 1, 'doNotDisplayHelpDefaultValue': 1, 'class': 1, 'TOKEN_VARIABLE': 16, '@Parameter': 1, 'STRING_LITERAL': 3, 'boolean': 1, 'new': 2, 'Arg': 1, 'String': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'parse': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertFalse': 1, 'toString': 1, 'contains': 1}",CodeBlock58,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9090909090909092,0.875,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
268,CodeBlock33,292,317,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock34,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9649122807017544,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
269,CodeBlock33,292,317,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock59,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9333333333333332,0.875,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
270,CodeBlock33,292,317,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock60,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9016393442622952,0.875,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
271,CodeBlock34,320,345,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock33,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9649122807017544,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
272,CodeBlock34,320,345,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock59,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9016393442622952,0.875,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
273,CodeBlock34,320,345,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.addCommand(""a"", new ArgCommandA());', '        c.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 19, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock60,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9333333333333332,0.875,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
274,CodeBlock35,348,378,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.setColumnSize(100);', '        c.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = c.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 21, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock59,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.7887323943661971,0.7777777777777778,0.6923076923076923,4,<NA>,1,2022-10-15 20:33:33.565759
275,CodeBlock35,348,378,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.setColumnSize(100);', '        c.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = c.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 21, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock60,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.7887323943661971,0.7777777777777778,0.6923076923076923,4,<NA>,1,2022-10-15 20:33:33.565759
276,CodeBlock35,348,378,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.setColumnSize(100);', '        c.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = c.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 21, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 4, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock61,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.943661971830986,0.8888888888888888,0.8571428571428571,4,<NA>,1,2022-10-15 20:33:33.565759
277,CodeBlock36,381,393,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""Default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 2, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock11,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/MethodSetterTest.java,0.5652173913043478,0.6666666666666666,0.75,4,<NA>,1,2022-10-15 20:33:33.565759
278,CodeBlock36,381,393,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""Default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 2, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock27,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.6190476190476191,0.7142857142857143,0.75,4,<NA>,1,2022-10-15 20:33:33.565759
279,CodeBlock36,381,393,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander c = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        c.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""Default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 2, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8888888888888888,0.8333333333333334,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
280,CodeBlock37,10,19,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,"['  public void validateTest() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--port"" }, description = ""Shows help"", validateWith = PositiveInteger.class)', '      private int port = 0;', '    }', '    Arg arg = new Arg();', '    JCommander jc = new JCommander(arg);', '    jc.parse(""-p"", ""8080"");', '', '  }']","{'public': 1, 'void': 1, 'validateTest': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'int': 1, 'INTEGER_LITERAL': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'parse': 1}",CodeBlock4,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,0.5581395348837209,0.6666666666666666,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
281,CodeBlock37,10,19,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,"['  public void validateTest() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--port"" }, description = ""Shows help"", validateWith = PositiveInteger.class)', '      private int port = 0;', '    }', '    Arg arg = new Arg();', '    JCommander jc = new JCommander(arg);', '    jc.parse(""-p"", ""8080"");', '', '  }']","{'public': 1, 'void': 1, 'validateTest': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'int': 1, 'INTEGER_LITERAL': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'parse': 1}",CodeBlock38,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,0.9333333333333332,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
282,CodeBlock38,55,64,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,"['  public void validateTest5() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--port"" }, description = ""Port Number"", validateWith = PositiveInteger.class)', '      private int port = 0;', '    }', '', '    Arg arg = new Arg();', '    JCommander jc = new JCommander(arg);', '    jc.parse(""--port"", "" "");', '  }']","{'public': 1, 'void': 1, 'validateTest5': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'int': 1, 'INTEGER_LITERAL': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'parse': 1}",CodeBlock4,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/ParametersDelegateTest.java,0.5581395348837209,0.6666666666666666,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
283,CodeBlock38,55,64,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,"['  public void validateTest5() {', '    class Arg {', '      @Parameter(names = { ""-p"", ""--port"" }, description = ""Port Number"", validateWith = PositiveInteger.class)', '      private int port = 0;', '    }', '', '    Arg arg = new Arg();', '    JCommander jc = new JCommander(arg);', '    jc.parse(""--port"", "" "");', '  }']","{'public': 1, 'void': 1, 'validateTest5': 1, 'class': 1, 'TOKEN_VARIABLE': 11, '@Parameter': 1, 'STRING_LITERAL': 5, 'private': 1, 'int': 1, 'INTEGER_LITERAL': 1, 'new': 2, 'Arg': 1, 'JCommander': 1, 'parse': 1}",CodeBlock37,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/PositiveIntegerTest.java,0.9333333333333332,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
284,CodeBlock47,23,71,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testOutputFormat() {', '        class ArgsTemplate {', '            @Parameter(names = {""--a"", ""-a""})', '            public int a;', '            @Parameter(names = {""--b"", ""-b""})', '            public int b = 2;', '            @Parameter(names = {""--c"", ""-c""}, description = ""sets c"")', '            public int c;', '            @Parameter(names = {""--d"", ""-d""}, description = ""sets d"")', '            public int d = 2;', '            @Parameter(names = {""--e""})', '            public TestEnum1 e;', '            @Parameter(names = {""--f""})', '            public TestEnum1 f = TestEnum1.A;', '            @Parameter(names = {""--g""}, description = ""sets g"")', '            public TestEnum1 g;', '            @Parameter(names = {""--h""}, description = ""sets h"")', '            public TestEnum1 h = TestEnum1.A;', '            @Parameter(names = {""-i""})', '            public TestEnum2 i;', '            @Parameter(names = {""-k""}, description = ""sets k"")', '            public TestEnum2 k;', '        }', '', '        ', '        StringBuilder sb = new StringBuilder();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsTemplate())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        String expected = ""Usage: <main class> [options]\\n""', '                + ""  Options:\\n""', '                + ""    --a, -a (default: 0)\\n""', '                + ""    --b, -b (default: 2)\\n""', '                + ""    --c, -c sets c (default: 0)\\n""', '                + ""    --d, -d sets d (default: 2)\\n""', '                + ""    --e     Options: [A, B, C, D]\\n""', '                + ""    --f     Options: [A, B, C, D] (default: A)\\n""', '                + ""    --g     sets g (values: [A, B, C, D])\\n""', '                + ""    --h     sets h (default: A) (values: [A, B, C, D])\\n""', '                + ""    -i      Options: []\\n""', '                + ""    -k      sets k (values: [])\\n"";', '        Assert.assertEquals(sb.toString(), expected);', '    }']","{'public': 11, 'void': 1, 'testOutputFormat': 1, 'class': 1, 'TOKEN_VARIABLE': 42, '@Parameter': 10, 'STRING_LITERAL': 31, 'int': 4, 'INTEGER_LITERAL': 13, 'new': 3, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsTemplate': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'assertEquals': 1, 'toString': 1}",CodeBlock22,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.7668711656441718,0.9285714285714286,0.8888888888888888,4,<NA>,1,2022-10-15 20:33:33.565759
285,CodeBlock48,74,89,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock23,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8709677419354839,0.75,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
286,CodeBlock48,74,89,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock25,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.7352941176470589,0.75,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
287,CodeBlock48,74,89,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock29,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.5526315789473685,0.75,0.9,4,<NA>,1,2022-10-15 20:33:33.565759
288,CodeBlock48,74,89,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock50,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8529411764705882,0.75,0.9,4,<NA>,1,2022-10-15 20:33:33.565759
289,CodeBlock48,74,89,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongMainParameterDescription() {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongMainParameterDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongMainParameterDescription': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'ArgsLongMainParameterDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock54,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6153846153846154,1.0,0.75,4,<NA>,1,2022-10-15 20:33:33.565759
290,CodeBlock49,92,107,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testLongCommandDescription() throws Exception {', '        ', '        JCommander jc = JCommander.newBuilder()', '                .addCommand(new ArgsLongCommandDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        StringBuilder sb = new StringBuilder();', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testLongCommandDescription': 1, 'throws': 1, 'TOKEN_VARIABLE': 8, 'newBuilder': 1, 'addCommand': 1, 'new': 3, 'ArgsLongCommandDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock24,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8787878787878788,0.75,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
291,CodeBlock50,110,125,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 7, 'new': 3, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock23,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.7352941176470589,0.75,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
292,CodeBlock50,110,125,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 7, 'new': 3, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock25,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.875,0.75,0.9,4,<NA>,1,2022-10-15 20:33:33.565759
293,CodeBlock50,110,125,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 7, 'new': 3, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8529411764705882,0.75,0.9,4,<NA>,1,2022-10-15 20:33:33.565759
294,CodeBlock50,110,125,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void testDescriptionWrappingLongWord() {', '        ', '        StringBuilder sb = new StringBuilder();', '        final JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsLongDescription())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '', '        ', '        jc.getUsageFormatter().usage(sb);', '', '        ', '        for (String line : sb.toString().split(""\\n"")) {', '            Assert.assertTrue(line.length() <= jc.getColumnSize(), ""line length < column size"");', '        }', '    }']","{'public': 1, 'void': 1, 'testDescriptionWrappingLongWord': 1, 'TOKEN_VARIABLE': 7, 'new': 3, 'StringBuilder': 1, 'final': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsLongDescription': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'for': 1, 'String': 1, 'toString': 1, 'split': 1, 'STRING_LITERAL': 2, 'assertTrue': 1, 'length': 1, 'getColumnSize': 1}",CodeBlock54,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6,0.75,0.75,4,<NA>,1,2022-10-15 20:33:33.565759
295,CodeBlock51,128,138,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void programName() {', '        JCommander jcommander = new JCommander();', '        jcommander.setUsageFormatter(new UnixStyleUsageFormatter(jcommander));', '        String programName = ""main"";', '        jcommander.setProgramName(programName);', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '', '        Assert.assertTrue(sb.toString().contains(programName));', '        Assert.assertEquals(jcommander.getProgramName(), programName);', '    }']","{'public': 1, 'void': 1, 'programName': 1, 'TOKEN_VARIABLE': 10, 'new': 3, 'JCommander': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'String': 1, 'STRING_LITERAL': 1, 'setProgramName': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1, 'assertEquals': 1, 'getProgramName': 1}",CodeBlock26,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8666666666666667,0.75,0.7777777777777778,4,<NA>,1,2022-10-15 20:33:33.565759
296,CodeBlock52,141,156,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void dontShowOptionUsageIfThereAreNoOptions() {', '        class CommandTemplate {', '            @Parameter', '            List<String> parameters = new ArrayList<>();', '        }', '', '        CommandTemplate template = new CommandTemplate();', '        JCommander jcommander = JCommander.newBuilder()', '                .addObject(template)', '                .build();', '        jcommander.setUsageFormatter(new UnixStyleUsageFormatter(jcommander));', '        jcommander.setProgramName(""main"");', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '        Assert.assertEquals(sb.toString().indexOf(""options""), -1);', '    }']","{'public': 1, 'void': 1, 'dontShowOptionUsageIfThereAreNoOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 14, 'String': 1, 'new': 4, 'CommandTemplate': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'setProgramName': 1, 'STRING_LITERAL': 2, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertEquals': 1, 'toString': 1, 'indexOf': 1, 'INTEGER_LITERAL': 2}",CodeBlock27,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9,0.8571428571428571,0.7,4,<NA>,1,2022-10-15 20:33:33.565759
297,CodeBlock52,141,156,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void dontShowOptionUsageIfThereAreNoOptions() {', '        class CommandTemplate {', '            @Parameter', '            List<String> parameters = new ArrayList<>();', '        }', '', '        CommandTemplate template = new CommandTemplate();', '        JCommander jcommander = JCommander.newBuilder()', '                .addObject(template)', '                .build();', '        jcommander.setUsageFormatter(new UnixStyleUsageFormatter(jcommander));', '        jcommander.setProgramName(""main"");', '        StringBuilder sb = new StringBuilder();', '        jcommander.getUsageFormatter().usage(sb);', '        Assert.assertEquals(sb.toString().indexOf(""options""), -1);', '    }']","{'public': 1, 'void': 1, 'dontShowOptionUsageIfThereAreNoOptions': 1, 'class': 1, 'TOKEN_VARIABLE': 14, 'String': 1, 'new': 4, 'CommandTemplate': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'setProgramName': 1, 'STRING_LITERAL': 2, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertEquals': 1, 'toString': 1, 'indexOf': 1, 'INTEGER_LITERAL': 2}",CodeBlock62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6521739130434783,0.7142857142857143,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
298,CodeBlock53,159,173,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void annotationsAndDynamicParameters() {', '        class DSimple {', '            @DynamicParameter(names = ""-D"", description = ""Dynamic parameters go here"")', '            public Map<String, String> params = Maps.newHashMap();', '', '            @DynamicParameter(names = ""-A"", assignment = ""@"")', '            public Map<String, String> params2 = Maps.newHashMap();', '        }', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new DSimple())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.getUsageFormatter().usage(new StringBuilder());', '    }']","{'public': 3, 'void': 1, 'annotationsAndDynamicParameters': 1, 'class': 1, 'TOKEN_VARIABLE': 12, '@DynamicParameter': 2, 'STRING_LITERAL': 4, 'String': 4, 'newHashMap': 2, 'newBuilder': 1, 'addObject': 1, 'new': 3, 'DSimple': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'StringBuilder': 1}",CodeBlock28,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9047619047619048,0.8333333333333334,0.875,4,<NA>,1,2022-10-15 20:33:33.565759
299,CodeBlock54,188,199,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(DefaultUsageFormatterTest.getResourceBundle())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 4, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock29,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.875,0.75,0.75,4,<NA>,1,2022-10-15 20:33:33.565759
300,CodeBlock54,188,199,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(DefaultUsageFormatterTest.getResourceBundle())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 4, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6153846153846154,1.0,0.75,4,<NA>,1,2022-10-15 20:33:33.565759
301,CodeBlock54,188,199,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void i18MissingKeyForCommand() {', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new ArgsHelp())', '                .resourceBundle(DefaultUsageFormatterTest.getResourceBundle())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(new ArgsLongCommandDescription());', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String usage = sb.toString();', '        Assert.assertTrue(usage.contains(""text""));', '    }']","{'public': 1, 'void': 1, 'i18MissingKeyForCommand': 1, 'TOKEN_VARIABLE': 7, 'newBuilder': 1, 'addObject': 1, 'new': 4, 'ArgsHelp': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 1, 'ArgsLongCommandDescription': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'String': 1, 'toString': 1, 'assertTrue': 1, 'contains': 1, 'STRING_LITERAL': 1}",CodeBlock50,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6,0.75,0.75,4,<NA>,1,2022-10-15 20:33:33.565759
302,CodeBlock56,218,234,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithRequiredArgsAndResourceBundle() {', '        ArgsHelp argsHelp = new ArgsHelp();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new Object[] {argsHelp, new ArgsRequired()})', '                .resourceBundle(DefaultUsageFormatterTest.getResourceBundle())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        ', '        jc.getUsageFormatter().usage(new StringBuilder());', '        try {', '            jc.parse(""-h"");', '            Assert.fail(""Should have thrown a required parameter exception"");', '        } catch (ParameterException e) {', '            Assert.assertTrue(e.getMessage().contains(""are required""));', '        }', '        Assert.assertTrue(argsHelp.help);', '    }']","{'public': 1, 'void': 1, 'usageWithRequiredArgsAndResourceBundle': 1, 'TOKEN_VARIABLE': 10, 'new': 5, 'ArgsHelp': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsRequired': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'StringBuilder': 1, 'try': 1, 'parse': 1, 'STRING_LITERAL': 3, 'fail': 1, 'catch': 1, 'assertTrue': 2, 'getMessage': 1, 'contains': 1}",CodeBlock30,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.902439024390244,0.8333333333333334,0.9166666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
303,CodeBlock56,218,234,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithRequiredArgsAndResourceBundle() {', '        ArgsHelp argsHelp = new ArgsHelp();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(new Object[] {argsHelp, new ArgsRequired()})', '                .resourceBundle(DefaultUsageFormatterTest.getResourceBundle())', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        ', '        jc.getUsageFormatter().usage(new StringBuilder());', '        try {', '            jc.parse(""-h"");', '            Assert.fail(""Should have thrown a required parameter exception"");', '        } catch (ParameterException e) {', '            Assert.assertTrue(e.getMessage().contains(""are required""));', '        }', '        Assert.assertTrue(argsHelp.help);', '    }']","{'public': 1, 'void': 1, 'usageWithRequiredArgsAndResourceBundle': 1, 'TOKEN_VARIABLE': 10, 'new': 5, 'ArgsHelp': 1, 'newBuilder': 1, 'addObject': 1, 'ArgsRequired': 1, 'resourceBundle': 1, 'getResourceBundle': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'StringBuilder': 1, 'try': 1, 'parse': 1, 'STRING_LITERAL': 3, 'fail': 1, 'catch': 1, 'assertTrue': 2, 'getMessage': 1, 'contains': 1}",CodeBlock62,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.5714285714285714,0.6666666666666666,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
304,CodeBlock57,237,249,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageShouldNotChange() {', '        JCommander jc = JCommander.newBuilder().addObject(new Args1()).build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.parse(""-log"", ""1"");', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String expected = sb.toString();', '', '        sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        String actual = sb.toString();', '        Assert.assertEquals(actual, expected);', '    }']","{'public': 1, 'void': 1, 'usageShouldNotChange': 1, 'TOKEN_VARIABLE': 12, 'newBuilder': 1, 'addObject': 1, 'new': 4, 'Args1': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'parse': 1, 'STRING_LITERAL': 2, 'StringBuilder': 2, 'getUsageFormatter': 2, 'usage': 2, 'String': 2, 'toString': 2, 'assertEquals': 1}",CodeBlock31,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8974358974358975,0.75,0.8888888888888888,4,<NA>,1,2022-10-15 20:33:33.565759
305,CodeBlock58,261,277,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void doNotDisplayHelpDefaultValue() {', '        class Arg {', '            @Parameter(names = ""--help"", help = true)', '            public boolean help = false;', '        }', '        Arg args = new Arg();', '        String[] argv = {""--help""};', '        JCommander jc = JCommander.newBuilder().addObject(args).build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.parse(argv);', '', '        StringBuilder sb = new StringBuilder();', '', '        jc.getUsageFormatter().usage(sb);', '', '        Assert.assertFalse(sb.toString().contains(""Default""));', '    }']","{'public': 2, 'void': 1, 'doNotDisplayHelpDefaultValue': 1, 'class': 1, 'TOKEN_VARIABLE': 17, '@Parameter': 1, 'STRING_LITERAL': 3, 'boolean': 1, 'new': 3, 'Arg': 1, 'String': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'parse': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertFalse': 1, 'toString': 1, 'contains': 1}",CodeBlock32,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9090909090909092,0.875,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
306,CodeBlock59,280,306,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock33,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9333333333333332,0.875,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
307,CodeBlock59,280,306,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock34,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9016393442622952,0.875,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
308,CodeBlock59,280,306,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock35,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.7887323943661971,0.7777777777777778,0.6923076923076923,4,<NA>,1,2022-10-15 20:33:33.565759
309,CodeBlock59,280,306,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock60,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9672131147540984,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
310,CodeBlock59,280,306,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageCommandsUnderUsage() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""[command options]\\n  Commands:""));', '    }']","{'public': 1, 'void': 1, 'usageCommandsUnderUsage': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock61,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8194444444444444,0.7777777777777778,0.7142857142857143,4,<NA>,1,2022-10-15 20:33:33.565759
311,CodeBlock60,309,335,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock33,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9016393442622952,0.875,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
312,CodeBlock60,309,335,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock34,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.9333333333333332,0.875,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
313,CodeBlock60,309,335,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock35,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.7887323943661971,0.7777777777777778,0.6923076923076923,4,<NA>,1,2022-10-15 20:33:33.565759
314,CodeBlock60,309,335,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock59,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.9672131147540984,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
315,CodeBlock60,309,335,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithEmptyLine() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.addCommand(""a"", new ArgCommandA());', '        jc.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n\\n    b""));', '    }']","{'public': 1, 'void': 1, 'usageWithEmptyLine': 1, 'class': 3, 'TOKEN_VARIABLE': 20, '@Parameters': 2, 'STRING_LITERAL': 7, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'addCommand': 2, 'ArgCommandA': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock61,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8194444444444444,0.7777777777777778,0.7142857142857143,4,<NA>,1,2022-10-15 20:33:33.565759
316,CodeBlock61,338,369,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.setColumnSize(100);', '        jc.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = jc.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 22, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock35,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.943661971830986,0.8888888888888888,0.8571428571428571,4,<NA>,1,2022-10-15 20:33:33.565759
317,CodeBlock61,338,369,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.setColumnSize(100);', '        jc.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = jc.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 22, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock59,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8194444444444444,0.7777777777777778,0.7142857142857143,4,<NA>,1,2022-10-15 20:33:33.565759
318,CodeBlock61,338,369,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void usageWithSubCommands() {', '        class Arg {', '        }', '        @Parameters(commandDescription = ""command a"")', '        class ArgCommandA {', '            @Parameter(description = ""command a parameters"")', '            List<String> parameters;', '        }', '        @Parameters(commandDescription = ""command b"")', '        class ArgCommandB {', '            @Parameter(description = ""command b parameters"")', '            List<String> parameters;', '        }', '', '        Arg a = new Arg();', '', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.setColumnSize(100);', '        jc.addCommand(""a"", new ArgCommandA());', '', '        ', '        JCommander aCommand = jc.getCommands().get(""a"");', '        aCommand.addCommand(""b"", new ArgCommandB());', '', '        StringBuilder sb = new StringBuilder();', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""command a parameters\\n        Commands:""));', '        Assert.assertTrue(sb.toString().contains(""command b\\n            Usage:""));', '    }']","{'public': 1, 'void': 1, 'usageWithSubCommands': 1, 'class': 3, 'TOKEN_VARIABLE': 22, '@Parameters': 2, 'STRING_LITERAL': 9, '@Parameter': 2, 'String': 2, 'new': 5, 'Arg': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'setColumnSize': 1, 'INTEGER_LITERAL': 1, 'addCommand': 2, 'ArgCommandA': 1, 'getCommands': 1, 'get': 1, 'ArgCommandB': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 2, 'toString': 2, 'contains': 2}",CodeBlock60,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.8194444444444444,0.7777777777777778,0.7142857142857143,4,<NA>,1,2022-10-15 20:33:33.565759
319,CodeBlock62,372,385,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 12, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 3, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock36,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/DefaultUsageFormatterTest.java,0.8888888888888888,0.8333333333333334,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
320,CodeBlock62,372,385,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 12, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 3, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock52,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.6521739130434783,0.7142857142857143,0.8,4,<NA>,1,2022-10-15 20:33:33.565759
321,CodeBlock62,372,385,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,"['    public void emptyStringAsDefault() {', '        class Arg {', '            @Parameter(names = ""-x"")', '            String s = """";', '        }', '        Arg a = new Arg();', '        StringBuilder sb = new StringBuilder();', '        JCommander jc = JCommander.newBuilder()', '                .addObject(a)', '                .build();', '        jc.setUsageFormatter(new UnixStyleUsageFormatter(jc));', '        jc.getUsageFormatter().usage(sb);', '        Assert.assertTrue(sb.toString().contains(""default: <empty string>""));', '    }']","{'public': 1, 'void': 1, 'emptyStringAsDefault': 1, 'class': 1, 'TOKEN_VARIABLE': 12, '@Parameter': 1, 'STRING_LITERAL': 3, 'String': 1, 'new': 3, 'Arg': 1, 'StringBuilder': 1, 'newBuilder': 1, 'addObject': 1, 'build': 1, 'setUsageFormatter': 1, 'UnixStyleUsageFormatter': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock56,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/UnixStyleUsageFormatterTest.java,0.5714285714285714,0.6666666666666666,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
322,CodeBlock68,32,44,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,"['  public void namedCommandTest1() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    NamedCommandAdd add = new NamedCommandAdd();', '    jc.addCommand(add);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit);', '    jc.parse(""add"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'namedCommandTest1': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'NamedCommandAdd': 1, 'addCommand': 2, 'CommandCommit': 1, 'STRING_LITERAL': 6, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock69,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,0.8809523809523809,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
323,CodeBlock68,32,44,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,"['  public void namedCommandTest1() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    NamedCommandAdd add = new NamedCommandAdd();', '    jc.addCommand(add);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit);', '    jc.parse(""add"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'namedCommandTest1': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'NamedCommandAdd': 1, 'addCommand': 2, 'CommandCommit': 1, 'STRING_LITERAL': 6, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock76,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,0.8222222222222222,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
324,CodeBlock69,55,67,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,"['  public void commandTest1() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandAdd add = new CommandAdd();', '    jc.addCommand(""add"", add);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit);', '    jc.parse(""add"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'commandTest1': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandAdd': 1, 'addCommand': 2, 'STRING_LITERAL': 7, 'CommandCommit': 1, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock68,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,0.8809523809523809,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
325,CodeBlock69,55,67,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,"['  public void commandTest1() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandAdd add = new CommandAdd();', '    jc.addCommand(""add"", add);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit);', '    jc.parse(""add"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'commandTest1': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandAdd': 1, 'addCommand': 2, 'STRING_LITERAL': 7, 'CommandCommit': 1, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock76,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,0.8863636363636364,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
326,CodeBlock72,109,120,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,"['  public void noParametersAnnotationOnCommandTest() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandNoParametersAnnotation noParametersAnnotation = new CommandNoParametersAnnotation();', '    jc.addCommand(""no-annotation"", noParametersAnnotation);', '', '    jc.setProgramName(""TestCommander"");', '    StringBuilder out = new StringBuilder();', '    jc.getUsageFormatter().usage(out);', '', '    Assert.assertTrue(out.toString().contains(""no-annotation""));', '  }']","{'public': 1, 'void': 1, 'noParametersAnnotationOnCommandTest': 1, 'TOKEN_VARIABLE': 11, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandNoParametersAnnotation': 1, 'addCommand': 1, 'STRING_LITERAL': 3, 'setProgramName': 1, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'assertTrue': 1, 'toString': 1, 'contains': 1}",CodeBlock79,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,0.7297297297297297,0.8333333333333334,0.75,4,<NA>,1,2022-10-15 20:33:33.565759
327,CodeBlock74,37,48,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,"['  public void oneCommandWithSingleAlias() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandAdd add = new CommandAdd();', '    jc.addCommand(""add"", add, ""a"");', '    jc.parse(""a"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(jc.getParsedAlias(), ""a"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'oneCommandWithSingleAlias': 1, 'TOKEN_VARIABLE': 10, 'new': 3, 'CommandMain': 1, 'JCommander': 1, 'CommandAdd': 1, 'addCommand': 1, 'STRING_LITERAL': 8, 'parse': 1, 'assertEquals': 4, 'getParsedCommand': 1, 'getParsedAlias': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock75,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,0.7083333333333334,0.7142857142857143,0.875,4,<NA>,1,2022-10-15 20:33:33.565759
328,CodeBlock75,60,72,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,"['  private void testCommitWithAlias(String alias) {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit, ""ci"", ""cmt"");', '    jc.parse(alias, ""--amend"", ""--author"", ""jack"", ""file1.txt"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""commit"");', '    Assert.assertEquals(jc.getParsedAlias(), alias);', '    Assert.assertEquals(commit.amend.booleanValue(), true);', '    Assert.assertEquals(commit.author, ""jack"");', '    Assert.assertEquals(commit.files, Arrays.asList(""file1.txt""));', '  }']","{'private': 1, 'void': 1, 'testCommitWithAlias': 1, 'String': 1, 'TOKEN_VARIABLE': 14, 'new': 3, 'CommandMain': 1, 'JCommander': 1, 'CommandCommit': 1, 'addCommand': 1, 'STRING_LITERAL': 10, 'parse': 1, 'assertEquals': 5, 'getParsedCommand': 1, 'getParsedAlias': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock74,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,0.7083333333333334,0.7142857142857143,0.875,4,<NA>,1,2022-10-15 20:33:33.565759
329,CodeBlock76,75,87,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,"['  public void twoCommandsWithAliases() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandAdd add = new CommandAdd();', '    jc.addCommand(""add"", add, ""a"");', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit, ""ci"", ""cmt"");', '    jc.parse(""a"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'twoCommandsWithAliases': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandAdd': 1, 'addCommand': 2, 'STRING_LITERAL': 10, 'CommandCommit': 1, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock68,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,0.8222222222222222,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
330,CodeBlock76,75,87,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,"['  public void twoCommandsWithAliases() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandAdd add = new CommandAdd();', '    jc.addCommand(""add"", add, ""a"");', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit, ""ci"", ""cmt"");', '    jc.parse(""a"", ""-i"", ""A.java"");', '', '    Assert.assertEquals(jc.getParsedCommand(), ""add"");', '    Assert.assertEquals(add.interactive.booleanValue(), true);', '    Assert.assertEquals(add.patterns, Arrays.asList(""A.java""));', '  }']","{'public': 1, 'void': 1, 'twoCommandsWithAliases': 1, 'TOKEN_VARIABLE': 13, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandAdd': 1, 'addCommand': 2, 'STRING_LITERAL': 10, 'CommandCommit': 1, 'parse': 1, 'assertEquals': 3, 'getParsedCommand': 1, 'booleanValue': 1, 'asList': 1}",CodeBlock69,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,0.8863636363636364,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
331,CodeBlock79,135,145,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandAliasTest.java,"['  public void usageDisplaysCommandWithAliasesOnlyOnce() {', '    CommandMain cm = new CommandMain();', '    JCommander jc = new JCommander(cm);', '    CommandCommit commit = new CommandCommit();', '    jc.addCommand(""commit"", commit, ""ci"", ""cmt"");', '    StringBuilder out = new StringBuilder();', '    jc.getUsageFormatter().usage(out);', '    ', '    ', '    patternMatchesTimes(""commit\\\\(ci,cmt\\\\)"", out.toString(), 2);', '  }']","{'public': 1, 'void': 1, 'usageDisplaysCommandWithAliasesOnlyOnce': 1, 'TOKEN_VARIABLE': 11, 'new': 4, 'CommandMain': 1, 'JCommander': 1, 'CommandCommit': 1, 'addCommand': 1, 'STRING_LITERAL': 4, 'StringBuilder': 1, 'getUsageFormatter': 1, 'usage': 1, 'patternMatchesTimes': 1, 'toString': 1, 'INTEGER_LITERAL': 1}",CodeBlock72,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/command/CommandTest.java,0.7297297297297297,0.8333333333333334,0.75,4,<NA>,1,2022-10-15 20:33:33.565759
332,CodeBlock83,44,55,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/ParameterizedParserTest.java,"['  public void standardParameterizedParsingTest() {', '    StandardCommandClassExample_01 commandOptions = new StandardCommandClassExample_01();', '    ', '    JCommander jcommander = new JCommander(commandOptions);', '    ', '    testFields(jcommander, EXPECTED_MAP);', '', '    jcommander.parse(ARGS);', '    Assert.assertTrue(EXPECTED_VERSION.equals(commandOptions.version), ""Version is not "" + EXPECTED_VERSION);', '    Assert.assertTrue(EXPECTED_STACK_LEVEL == commandOptions.subCommands.stackLevel, ""Stack level field is not"" + EXPECTED_STACK_LEVEL);', '    Assert.assertTrue(EXPECTED_LOG_LEVEL.equals(commandOptions.subCommands.loggingLevel), ""Log level is not "" + EXPECTED_LOG_LEVEL);', '  }']","{'public': 1, 'void': 1, 'standardParameterizedParsingTest': 1, 'TOKEN_VARIABLE': 15, 'new': 2, 'StandardCommandClassExample_01': 1, 'JCommander': 1, 'testFields': 1, 'parse': 1, 'assertTrue': 3, 'equals': 2, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 3}",CodeBlock84,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/ParameterizedParserTest.java,0.8048780487804879,0.875,0.7142857142857143,4,<NA>,1,2022-10-15 20:33:33.565759
333,CodeBlock84,58,71,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/ParameterizedParserTest.java,"['  public void jsonParameterizedParsingTest() {', '    JsonCommandClassExample_01 commandOptions = new JsonCommandClassExample_01();', '    ', '    JCommander jcommander = new JCommander();', '    jcommander.setParameterizedParser(new JsonAnnotationParameterizedParser());', '    jcommander.addObject(commandOptions);', '    ', '    testFields(jcommander, EXPECTED_MAP);', '', '    jcommander.parse(ARGS);', '    Assert.assertTrue(EXPECTED_VERSION.equals(commandOptions.version), ""Version is not "" + EXPECTED_VERSION);', '    Assert.assertTrue(EXPECTED_STACK_LEVEL == commandOptions.subCommands.stackLevel, ""Stack level field is not"" + EXPECTED_STACK_LEVEL);', '    Assert.assertTrue(EXPECTED_LOG_LEVEL.equals(commandOptions.subCommands.loggingLevel), ""Log level is not "" + EXPECTED_LOG_LEVEL);', '  }']","{'public': 1, 'void': 1, 'jsonParameterizedParsingTest': 1, 'TOKEN_VARIABLE': 15, 'new': 3, 'JsonCommandClassExample_01': 1, 'JCommander': 1, 'setParameterizedParser': 1, 'JsonAnnotationParameterizedParser': 1, 'addObject': 1, 'testFields': 1, 'parse': 1, 'assertTrue': 3, 'equals': 2, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 3}",CodeBlock83,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/ParameterizedParserTest.java,0.8048780487804879,0.875,0.7142857142857143,4,<NA>,1,2022-10-15 20:33:33.565759
334,CodeBlock86,76,97,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/JsonAnnotationParameterizedParser.java,"['  private void describeClassTree(Class<?> inputClass, Set<Class<?>> setOfClasses) {', '    ', '    if (inputClass == null) {', '      return;', '    }', '', '    ', '    if (Object.class.equals(inputClass) || setOfClasses.contains(inputClass)) {', '      return;', '    }', '', '    ', '    setOfClasses.add(inputClass);', '', '    ', '    describeClassTree(inputClass.getSuperclass(), setOfClasses);', '', '    ', '    for (Class<?> hasInterface : inputClass.getInterfaces()) {', '      describeClassTree(hasInterface, setOfClasses);', '    }', '  }']","{'private': 1, 'void': 1, 'describeClassTree': 3, 'TOKEN_VARIABLE': 15, 'if': 2, 'return': 2, 'equals': 1, 'contains': 1, 'add': 1, 'getSuperclass': 1, 'for': 1, 'getInterfaces': 1}",CodeBlock90,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/Parameterized.java,0.967741935483871,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
335,CodeBlock87,105,117,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/JsonAnnotationParameterizedParser.java,"['  private Set<Class<?>> describeClassTree(Class<?> inputClass) {', '    if (inputClass == null) {', '      return Collections.emptySet();', '    }', '', '    ', '    Set<Class<?>> classes = Sets.newLinkedHashSet();', '', '    ', '    describeClassTree(inputClass, classes);', '', '    return classes;', '  }']","{'private': 1, 'TOKEN_VARIABLE': 12, 'describeClassTree': 2, 'if': 1, 'return': 2, 'emptySet': 1, 'newLinkedHashSet': 1}",CodeBlock91,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/Parameterized.java,0.9523809523809524,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
336,CodeBlock90,48,69,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/Parameterized.java,"['  private static void describeClassTree(Class<?> inputClass, Set<Class<?>> setOfClasses) {', '    ', '    if(inputClass == null) {', '      return;', '    }', '', '    ', '    if(Object.class.equals(inputClass) || setOfClasses.contains(inputClass)) {', '      return;', '    }', '', '    ', '    setOfClasses.add(inputClass);', '', '    ', '    describeClassTree(inputClass.getSuperclass(), setOfClasses);', '', '    ', '    for(Class<?> hasInterface : inputClass.getInterfaces()) {', '      describeClassTree(hasInterface, setOfClasses);', '    }', '  }']","{'private': 1, 'static': 1, 'void': 1, 'describeClassTree': 3, 'TOKEN_VARIABLE': 15, 'if': 2, 'return': 2, 'equals': 1, 'contains': 1, 'add': 1, 'getSuperclass': 1, 'for': 1, 'getInterfaces': 1}",CodeBlock86,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/JsonAnnotationParameterizedParser.java,0.967741935483871,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
337,CodeBlock91,78,90,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/Parameterized.java,"['  private static Set<Class<?>> describeClassTree(Class<?> inputClass) {', '    if(inputClass == null) {', '      return Collections.emptySet();', '    }', '', '    ', '    Set<Class<?>> classes = Sets.newLinkedHashSet();', '', '    ', '    describeClassTree(inputClass, classes);', '', '    return classes;', '  }']","{'private': 1, 'static': 1, 'TOKEN_VARIABLE': 12, 'describeClassTree': 2, 'if': 1, 'return': 2, 'emptySet': 1, 'newLinkedHashSet': 1}",CodeBlock87,/content/drive/MyDrive/data/jcommander-master/src/test/java/com/beust/jcommander/parameterized/parser/JsonAnnotationParameterizedParser.java,0.9523809523809524,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
338,CodeBlock125,32,46,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/StringKey.java,"['  public boolean equals(Object obj) {', '    if (this == obj) { ', '      return true; } ', '    if (obj == null) { ', '      return false; } ', '    if (getClass() != obj.getClass()) { ', '      return false; } ', '    StringKey other = (StringKey) obj;', '    if (name == null) {', '      if (other.name != null) { ', '        return false; } ', '    } else if (!name.equals(other.name)) {  { ', '      return false; } ', '    return true; } ', '  }']","{'public': 1, 'boolean': 1, 'equals': 2, 'TOKEN_VARIABLE': 21, 'if': 6, 'this': 1, 'return': 6, 'getClass': 2}",CodeBlock157,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,1.0,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
339,CodeBlock148,1324,1340,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,"['    public void addConverterFactory(final IStringConverterFactory converterFactory) {', '        addConverterInstanceFactory(new IStringConverterInstanceFactory() {', '            @SuppressWarnings(""unchecked"")', '            @Override', '            public IStringConverter<?> getConverterInstance(Parameter parameter, Class<?> forType, String optionName) {', '                final Class<? extends IStringConverter<?>> converterClass = converterFactory.getConverter(forType);', '                try {', '                    if(optionName == null) {', '                        optionName = parameter.names().length > 0 ? parameter.names()[0] : ""[Main class]"";', '                    }', '                    return converterClass != null ? instantiateConverter(optionName, converterClass) : null;', '                } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {', '                    throw new ParameterException(e);', '                }', '            }', '        });', '    }']","{'public': 2, 'void': 1, 'addConverterFactory': 1, 'final': 2, 'TOKEN_VARIABLE': 27, 'addConverterInstanceFactory': 1, 'new': 2, 'IStringConverterInstanceFactory': 1, '@SuppressWarnings': 1, 'STRING_LITERAL': 2, 'getConverterInstance': 1, 'String': 1, 'extends': 1, 'getConverter': 1, 'try': 1, 'if': 1, 'names': 2, 'INTEGER_LITERAL': 2, 'return': 1, 'instantiateConverter': 1, 'catch': 1, 'throw': 1, 'ParameterException': 1}",CodeBlock149,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,0.7818181818181819,0.7272727272727273,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
340,CodeBlock149,1328,1338,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,"['            public IStringConverter<?> getConverterInstance(Parameter parameter, Class<?> forType, String optionName) {', '                final Class<? extends IStringConverter<?>> converterClass = converterFactory.getConverter(forType);', '                try {', '                    if(optionName == null) {', '                        optionName = parameter.names().length > 0 ? parameter.names()[0] : ""[Main class]"";', '                    }', '                    return converterClass != null ? instantiateConverter(optionName, converterClass) : null;', '                } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {', '                    throw new ParameterException(e);', '                }', '            }']","{'public': 1, 'TOKEN_VARIABLE': 24, 'getConverterInstance': 1, 'String': 1, 'final': 1, 'extends': 1, 'getConverter': 1, 'try': 1, 'if': 1, 'names': 2, 'INTEGER_LITERAL': 2, 'STRING_LITERAL': 1, 'return': 1, 'instantiateConverter': 1, 'catch': 1, 'throw': 1, 'new': 1, 'ParameterException': 1}",CodeBlock148,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,0.7818181818181819,0.7272727272727273,0.6666666666666666,4,<NA>,1,2022-10-15 20:33:33.565759
341,CodeBlock157,1621,1635,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/JCommander.java,"['        public boolean equals(Object obj) {', '            if (this == obj) { ', '                return true; } ', '            if (obj == null) { ', '                return false; } ', '            if (getClass() != obj.getClass()) { ', '                return false; } ', '            ProgramName other = (ProgramName) obj;', '            if (name == null) {', '                if (other.name != null) { ', '                    return false; } ', '            } else if (!name.equals(other.name)) {  { ', '                return false; } ', '            return true; } ', '        }']","{'public': 1, 'boolean': 1, 'equals': 2, 'TOKEN_VARIABLE': 21, 'if': 6, 'this': 1, 'return': 6, 'getClass': 2}",CodeBlock125,/content/drive/MyDrive/data/jcommander-master/src/main/java/com/beust/jcommander/StringKey.java,1.0,1.0,1.0,4,<NA>,1,2022-10-15 20:33:33.565759
