,codeBlockId,codeBlock_start,codeBlock_end,codeBlock_fileinfo,codeblock_Code,tokens,codeCloneBlockId,codeCloneBlock_Fileinfo,Similarity_Tokens,Similarity_Variable_Flow,Similarity_MethodCall_Flow,nloc,change_type,commit,Revision,datetime
0,CodeBlock9,87,102,ArUtils.java,"['    public static int getLongBytes(long value, byte[] buf, int offset, int length) {', '        int i;', '        String tmp = Long.toString(value);', '        int c = tmp.length();', '', '        for (i=0 ; i<length && i<c ; i++) {', '            buf[offset+i] = (byte) tmp.charAt(i);', '        }', '', '        while (i<length) {', ""            buf[offset+i] = (byte) ' ';"", '            i++;', '        }', '', '        return offset + length;', '    }']","{'public': 1, 'static': 1, 'int': 5, 'getLongBytes': 1, 'long': 1, 'TOKEN_VARIABLE': 26, 'byte': 3, 'String': 1, 'toString': 1, 'length': 1, 'for': 1, 'INTEGER_LITERAL': 8, 'charAt': 1, 'while': 1, 'STRING_LITERAL': 1, 'return': 1}",CodeBlock10,ArUtils.java,0.9285714285714286,1.0,1.0,76,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
1,CodeBlock9,87,102,ArUtils.java,"['    public static int getLongBytes(long value, byte[] buf, int offset, int length) {', '        int i;', '        String tmp = Long.toString(value);', '        int c = tmp.length();', '', '        for (i=0 ; i<length && i<c ; i++) {', '            buf[offset+i] = (byte) tmp.charAt(i);', '        }', '', '        while (i<length) {', ""            buf[offset+i] = (byte) ' ';"", '            i++;', '        }', '', '        return offset + length;', '    }']","{'public': 1, 'static': 1, 'int': 5, 'getLongBytes': 1, 'long': 1, 'TOKEN_VARIABLE': 26, 'byte': 3, 'String': 1, 'toString': 1, 'length': 1, 'for': 1, 'INTEGER_LITERAL': 8, 'charAt': 1, 'while': 1, 'STRING_LITERAL': 1, 'return': 1}",CodeBlock11,ArUtils.java,0.9285714285714286,1.0,1.0,76,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
2,CodeBlock10,113,128,ArUtils.java,"['    public static int getIntegerBytes(int value, byte[] buf, int offset, int length) {', '        int i;', '        String tmp = Integer.toString(value);', '        int c = tmp.length();', '', '        for (i=0 ; i<length && i<c ; i++) {', '            buf[offset+i] = (byte) tmp.charAt(i);', '        }', '', '        while (i<length) {', ""            buf[offset+i] = (byte) ' ';"", '            i++;', '        }', '', '        return offset + length;', '    }']","{'public': 1, 'static': 1, 'int': 6, 'getIntegerBytes': 1, 'TOKEN_VARIABLE': 26, 'byte': 3, 'String': 1, 'toString': 1, 'length': 1, 'for': 1, 'INTEGER_LITERAL': 8, 'charAt': 1, 'while': 1, 'STRING_LITERAL': 1, 'return': 1}",CodeBlock9,ArUtils.java,0.9285714285714286,1.0,1.0,76,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
3,CodeBlock10,113,128,ArUtils.java,"['    public static int getIntegerBytes(int value, byte[] buf, int offset, int length) {', '        int i;', '        String tmp = Integer.toString(value);', '        int c = tmp.length();', '', '        for (i=0 ; i<length && i<c ; i++) {', '            buf[offset+i] = (byte) tmp.charAt(i);', '        }', '', '        while (i<length) {', ""            buf[offset+i] = (byte) ' ';"", '            i++;', '        }', '', '        return offset + length;', '    }']","{'public': 1, 'static': 1, 'int': 6, 'getIntegerBytes': 1, 'TOKEN_VARIABLE': 26, 'byte': 3, 'String': 1, 'toString': 1, 'length': 1, 'for': 1, 'INTEGER_LITERAL': 8, 'charAt': 1, 'while': 1, 'STRING_LITERAL': 1, 'return': 1}",CodeBlock11,ArUtils.java,0.8947368421052632,1.0,1.0,76,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
4,CodeBlock11,139,154,ArUtils.java,"['    public static int getOctalBytes(long value, byte[] buf, int offset, int length) {', '        int i;', '        String tmp = Long.toOctalString(value);', '        int c = tmp.length();', '', '        for (i=0 ; i<length && i<c ; i++) {', '            buf[offset+i] = (byte) tmp.charAt(i);', '        }', '', '        while (i<length) {', ""            buf[offset+i] = (byte) ' ';"", '            i++;', '        }', '', '        return offset + length;', '    }']","{'public': 1, 'static': 1, 'int': 5, 'getOctalBytes': 1, 'long': 1, 'TOKEN_VARIABLE': 26, 'byte': 3, 'String': 1, 'toOctalString': 1, 'length': 1, 'for': 1, 'INTEGER_LITERAL': 8, 'charAt': 1, 'while': 1, 'STRING_LITERAL': 1, 'return': 1}",CodeBlock9,ArUtils.java,0.9285714285714286,1.0,1.0,76,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
5,CodeBlock11,139,154,ArUtils.java,"['    public static int getOctalBytes(long value, byte[] buf, int offset, int length) {', '        int i;', '        String tmp = Long.toOctalString(value);', '        int c = tmp.length();', '', '        for (i=0 ; i<length && i<c ; i++) {', '            buf[offset+i] = (byte) tmp.charAt(i);', '        }', '', '        while (i<length) {', ""            buf[offset+i] = (byte) ' ';"", '            i++;', '        }', '', '        return offset + length;', '    }']","{'public': 1, 'static': 1, 'int': 5, 'getOctalBytes': 1, 'long': 1, 'TOKEN_VARIABLE': 26, 'byte': 3, 'String': 1, 'toOctalString': 1, 'length': 1, 'for': 1, 'INTEGER_LITERAL': 8, 'charAt': 1, 'while': 1, 'STRING_LITERAL': 1, 'return': 1}",CodeBlock10,ArUtils.java,0.8947368421052632,1.0,1.0,76,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
6,CodeBlock16,22,31,Progress.java,"['public void setMaximum(int max);', '', 'public void advance(int value);', '', 'public void done();', '', 'public void message(String message);', 'public void error(String message);', '}', '']","{'public': 5, 'void': 5, 'setMaximum': 1, 'int': 2, 'TOKEN_VARIABLE': 4, 'advance': 1, 'done': 1, 'message': 1, 'String': 2, 'error': 1}",CodeBlock17,Progress.java,0.782608695652174,1.0,0.6666666666666666,9,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
7,CodeBlock17,24,31,Progress.java,"['public void advance(int value);', '', 'public void done();', '', 'public void message(String message);', 'public void error(String message);', '}', '']","{'public': 4, 'void': 4, 'advance': 1, 'int': 1, 'TOKEN_VARIABLE': 3, 'done': 1, 'message': 1, 'String': 2, 'error': 1}",CodeBlock16,Progress.java,0.782608695652174,1.0,0.6666666666666666,9,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
8,CodeBlock19,48,54,JavaProperty.java,"['public String getName() {', '', 'if (this.name == null) { ', 'return null; } ', '', 'return this.name.trim();', '}']","{'public': 1, 'String': 1, 'getName': 1, 'if': 1, 'TOKEN_VARIABLE': 3, 'return': 2, 'trim': 1}",CodeBlock20,JavaProperty.java,0.8181818181818182,1.0,1.0,23,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
9,CodeBlock20,72,78,JavaProperty.java,"['public String getValue() {', '', 'if (this.value == null) { ', 'return null; } ', '', 'return this.value.trim();', '}']","{'public': 1, 'String': 1, 'getValue': 1, 'if': 1, 'TOKEN_VARIABLE': 3, 'return': 2, 'trim': 1}",CodeBlock19,JavaProperty.java,0.8181818181818182,1.0,1.0,23,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
10,CodeBlock21,44,63,OptionPane.java,"['String getName();', '', '', '', '', 'Component getComponent();', '', '', '', '', 'void init();', '', '', '', '', '', '', 'void save();', '}', '']","{'String': 1, 'getName': 1, 'TOKEN_VARIABLE': 1, 'getComponent': 1, 'void': 2, 'init': 1, 'save': 1}",CodeBlock22,OptionPane.java,0.75,1.0,0.6666666666666666,9,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
11,CodeBlock22,49,63,OptionPane.java,"['Component getComponent();', '', '', '', '', 'void init();', '', '', '', '', '', '', 'void save();', '}', '']","{'TOKEN_VARIABLE': 1, 'getComponent': 1, 'void': 2, 'init': 1, 'save': 1}",CodeBlock21,OptionPane.java,0.75,1.0,0.6666666666666666,9,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
12,CodeBlock26,41,57,BSHIfStatement.java,"['    public Object eval(CallStack callstack, Interpreter interpreter)  ', 'throws EvalError', '    {', '        Object ret = null;', '', '        if( evaluateCondition( ', '(SimpleNode)jjtGetChild(0), callstack, interpreter ) )', '            ret = ((SimpleNode)jjtGetChild(1)).eval(callstack, interpreter);', '        else { ', '            if(jjtGetNumChildren() > 2)', '                ret = ((SimpleNode)jjtGetChild(2)).eval(callstack, interpreter); } ', '', '        if(ret instanceof ReturnControl)', '            return ret;', '        else     { ', '            return Primitive.VOID; } ', '    }']","{'public': 1, 'TOKEN_VARIABLE': 26, 'eval': 3, 'throws': 1, 'if': 3, 'evaluateCondition': 1, 'jjtGetChild': 3, 'INTEGER_LITERAL': 4, 'jjtGetNumChildren': 1, 'instanceof': 1, 'return': 2}",CodeBlock33,BSHTernaryExpression.java,0.782608695652174,0.625,0.6666666666666666,38,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
13,CodeBlock29,43,53,BSHReturnStatement.java,"['public Object eval(CallStack callstack, Interpreter interpreter)  ', 'throws EvalError', '{', 'Object value;', 'if(jjtGetNumChildren() > 0)', 'value = ((SimpleNode)jjtGetChild(0)).eval(callstack, interpreter);', 'else { ', 'value = Primitive.VOID; } ', '', 'return new ReturnControl( kind, value, this );', '}']","{'public': 1, 'TOKEN_VARIABLE': 17, 'eval': 2, 'throws': 1, 'if': 1, 'jjtGetNumChildren': 1, 'INTEGER_LITERAL': 2, 'jjtGetChild': 1, 'return': 1, 'new': 1, 'ReturnControl': 1, 'this': 1}",CodeBlock32,BSHStatementExpressionList.java,0.7428571428571429,0.8571428571428571,0.6666666666666666,16,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
14,CodeBlock32,41,51,BSHStatementExpressionList.java,"['public Object eval(CallStack callstack, Interpreter interpreter)  ', 'throws EvalError', '{', 'int n = jjtGetNumChildren();', 'for(int i=0; i<n; i++)', '{', 'SimpleNode node = ((SimpleNode)jjtGetChild(i));', 'node.eval(callstack, interpreter);', '}', 'return Primitive.VOID;', '}']","{'public': 1, 'TOKEN_VARIABLE': 18, 'eval': 2, 'throws': 1, 'int': 2, 'jjtGetNumChildren': 1, 'for': 1, 'INTEGER_LITERAL': 3, 'jjtGetChild': 1, 'return': 1}",CodeBlock29,BSHReturnStatement.java,0.7428571428571429,0.8571428571428571,0.6666666666666666,16,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
15,CodeBlock33,46,58,BSHTernaryExpression.java,"['    public Object eval( CallStack callstack, Interpreter interpreter) ', 'throws EvalError', '    {', '        SimpleNode', 'cond = (SimpleNode)jjtGetChild(0),', 'evalTrue = (SimpleNode)jjtGetChild(1),', 'evalFalse = (SimpleNode)jjtGetChild(2);', '', 'if ( BSHIfStatement.evaluateCondition( cond, callstack, interpreter ) ) { ', 'return evalTrue.eval( callstack, interpreter ); } ', 'else { ', 'return evalFalse.eval( callstack, interpreter ); } ', '    }']","{'public': 1, 'TOKEN_VARIABLE': 21, 'eval': 3, 'throws': 1, 'jjtGetChild': 3, 'INTEGER_LITERAL': 3, 'if': 1, 'evaluateCondition': 1, 'return': 2}",CodeBlock26,BSHIfStatement.java,0.782608695652174,0.625,0.6666666666666666,16,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
16,CodeBlock41,10,24,ClassGenerator.java,"['public static ClassGenerator getClassGenerator() ', 'throws UtilEvalError', '{', 'if ( cg == null ) ', '{', 'try {', 'Class clas = Class.forName( ""org.gjt.sp.jedit.bsh.ClassGeneratorImpl"" );', 'cg = (ClassGenerator)clas.newInstance();', '} catch ( Exception e ) {', 'throw new Unavailable(""ClassGenerator unavailable: ""+e);', '}', '}', '', 'return cg;', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 12, 'getClassGenerator': 1, 'throws': 1, 'if': 1, 'try': 1, 'forName': 1, 'STRING_LITERAL': 2, 'newInstance': 1, 'catch': 1, 'throw': 1, 'new': 1, 'Unavailable': 1, 'INTEGER_LITERAL': 1, 'return': 1}",CodeBlock107,ReflectManager.java,0.9,0.6,1.0,33,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
17,CodeBlock45,47,55,ConsoleInterface.java,"['    public Reader getIn();', '    public PrintStream getOut();', '    public PrintStream getErr();', '    public void println( Object o );', '    public void print( Object o );', '    public void error( Object o );', '}', '', '']","{'public': 6, 'TOKEN_VARIABLE': 9, 'getIn': 1, 'getOut': 1, 'getErr': 1, 'void': 3, 'println': 1, 'print': 1, 'error': 1}",CodeBlock46,ConsoleInterface.java,0.875,0.6666666666666666,0.75,10,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
18,CodeBlock45,47,55,ConsoleInterface.java,"['    public Reader getIn();', '    public PrintStream getOut();', '    public PrintStream getErr();', '    public void println( Object o );', '    public void print( Object o );', '    public void error( Object o );', '}', '', '']","{'public': 6, 'TOKEN_VARIABLE': 9, 'getIn': 1, 'getOut': 1, 'getErr': 1, 'void': 3, 'println': 1, 'print': 1, 'error': 1}",CodeBlock47,ConsoleInterface.java,0.75,0.6666666666666666,0.75,10,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
19,CodeBlock46,48,55,ConsoleInterface.java,"['    public PrintStream getOut();', '    public PrintStream getErr();', '    public void println( Object o );', '    public void print( Object o );', '    public void error( Object o );', '}', '', '']","{'public': 5, 'TOKEN_VARIABLE': 8, 'getOut': 1, 'getErr': 1, 'void': 3, 'println': 1, 'print': 1, 'error': 1}",CodeBlock45,ConsoleInterface.java,0.875,0.6666666666666666,0.75,10,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
20,CodeBlock46,48,55,ConsoleInterface.java,"['    public PrintStream getOut();', '    public PrintStream getErr();', '    public void println( Object o );', '    public void print( Object o );', '    public void error( Object o );', '}', '', '']","{'public': 5, 'TOKEN_VARIABLE': 8, 'getOut': 1, 'getErr': 1, 'void': 3, 'println': 1, 'print': 1, 'error': 1}",CodeBlock47,ConsoleInterface.java,0.8571428571428571,1.0,1.0,10,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
21,CodeBlock46,48,55,ConsoleInterface.java,"['    public PrintStream getOut();', '    public PrintStream getErr();', '    public void println( Object o );', '    public void print( Object o );', '    public void error( Object o );', '}', '', '']","{'public': 5, 'TOKEN_VARIABLE': 8, 'getOut': 1, 'getErr': 1, 'void': 3, 'println': 1, 'print': 1, 'error': 1}",CodeBlock48,ConsoleInterface.java,0.7142857142857143,1.0,0.6666666666666666,10,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
22,CodeBlock47,49,55,ConsoleInterface.java,"['    public PrintStream getErr();', '    public void println( Object o );', '    public void print( Object o );', '    public void error( Object o );', '}', '', '']","{'public': 4, 'TOKEN_VARIABLE': 7, 'getErr': 1, 'void': 3, 'println': 1, 'print': 1, 'error': 1}",CodeBlock45,ConsoleInterface.java,0.75,0.6666666666666666,0.75,10,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
23,CodeBlock47,49,55,ConsoleInterface.java,"['    public PrintStream getErr();', '    public void println( Object o );', '    public void print( Object o );', '    public void error( Object o );', '}', '', '']","{'public': 4, 'TOKEN_VARIABLE': 7, 'getErr': 1, 'void': 3, 'println': 1, 'print': 1, 'error': 1}",CodeBlock46,ConsoleInterface.java,0.8571428571428571,1.0,1.0,10,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
24,CodeBlock47,49,55,ConsoleInterface.java,"['    public PrintStream getErr();', '    public void println( Object o );', '    public void print( Object o );', '    public void error( Object o );', '}', '', '']","{'public': 4, 'TOKEN_VARIABLE': 7, 'getErr': 1, 'void': 3, 'println': 1, 'print': 1, 'error': 1}",CodeBlock48,ConsoleInterface.java,0.8333333333333334,1.0,0.6666666666666666,10,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
25,CodeBlock48,50,55,ConsoleInterface.java,"['    public void println( Object o );', '    public void print( Object o );', '    public void error( Object o );', '}', '', '']","{'public': 3, 'void': 3, 'println': 1, 'TOKEN_VARIABLE': 6, 'print': 1, 'error': 1}",CodeBlock46,ConsoleInterface.java,0.7142857142857143,1.0,0.6666666666666666,10,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
26,CodeBlock48,50,55,ConsoleInterface.java,"['    public void println( Object o );', '    public void print( Object o );', '    public void error( Object o );', '}', '', '']","{'public': 3, 'void': 3, 'println': 1, 'TOKEN_VARIABLE': 6, 'print': 1, 'error': 1}",CodeBlock47,ConsoleInterface.java,0.8333333333333334,1.0,0.6666666666666666,10,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
27,CodeBlock50,51,63,NameSource.java,"['    public String [] getAllNames();', '    public void addNameSourceListener( NameSource.Listener listener );', '', '    public static interface Listener {', '        public void nameSourceChanged( NameSource src );', '        ', '', '', '', '', '', '', '    }']","{'public': 4, 'String': 1, 'getAllNames': 1, 'void': 2, 'addNameSourceListener': 1, 'TOKEN_VARIABLE': 5, 'static': 1, 'interface': 1, 'nameSourceChanged': 1}",CodeBlock51,NameSource.java,0.8235294117647058,1.0,1.0,9,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
28,CodeBlock51,52,63,NameSource.java,"['    public void addNameSourceListener( NameSource.Listener listener );', '', '    public static interface Listener {', '        public void nameSourceChanged( NameSource src );', '        ', '', '', '', '', '', '', '    }']","{'public': 3, 'void': 2, 'addNameSourceListener': 1, 'TOKEN_VARIABLE': 5, 'static': 1, 'interface': 1, 'nameSourceChanged': 1}",CodeBlock50,NameSource.java,0.8235294117647058,1.0,1.0,9,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
29,CodeBlock53,50,83,Node.java,"['public void jjtOpen();', '', '', '', '', '', 'public void jjtClose();', '', '', '', '', '', 'public void jjtSetParent(Node n);', 'public Node jjtGetParent();', '', '', '', '', '', 'public void jjtAddChild(Node n, int i);', '', '', '', '', '', 'public Node jjtGetChild(int i);', '', '', '', '', 'public int jjtGetNumChildren();', '}', '', '']","{'public': 7, 'void': 4, 'jjtOpen': 1, 'jjtClose': 1, 'jjtSetParent': 1, 'TOKEN_VARIABLE': 8, 'jjtGetParent': 1, 'jjtAddChild': 1, 'int': 3, 'jjtGetChild': 1, 'jjtGetNumChildren': 1}",CodeBlock54,Node.java,0.896551724137931,1.0,1.0,11,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
30,CodeBlock53,50,83,Node.java,"['public void jjtOpen();', '', '', '', '', '', 'public void jjtClose();', '', '', '', '', '', 'public void jjtSetParent(Node n);', 'public Node jjtGetParent();', '', '', '', '', '', 'public void jjtAddChild(Node n, int i);', '', '', '', '', '', 'public Node jjtGetChild(int i);', '', '', '', '', 'public int jjtGetNumChildren();', '}', '', '']","{'public': 7, 'void': 4, 'jjtOpen': 1, 'jjtClose': 1, 'jjtSetParent': 1, 'TOKEN_VARIABLE': 8, 'jjtGetParent': 1, 'jjtAddChild': 1, 'int': 3, 'jjtGetChild': 1, 'jjtGetNumChildren': 1}",CodeBlock55,Node.java,0.7931034482758621,1.0,0.75,11,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
31,CodeBlock54,56,83,Node.java,"['public void jjtClose();', '', '', '', '', '', 'public void jjtSetParent(Node n);', 'public Node jjtGetParent();', '', '', '', '', '', 'public void jjtAddChild(Node n, int i);', '', '', '', '', '', 'public Node jjtGetChild(int i);', '', '', '', '', 'public int jjtGetNumChildren();', '}', '', '']","{'public': 6, 'void': 3, 'jjtClose': 1, 'jjtSetParent': 1, 'TOKEN_VARIABLE': 8, 'jjtGetParent': 1, 'jjtAddChild': 1, 'int': 3, 'jjtGetChild': 1, 'jjtGetNumChildren': 1}",CodeBlock53,Node.java,0.896551724137931,1.0,1.0,11,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
32,CodeBlock54,56,83,Node.java,"['public void jjtClose();', '', '', '', '', '', 'public void jjtSetParent(Node n);', 'public Node jjtGetParent();', '', '', '', '', '', 'public void jjtAddChild(Node n, int i);', '', '', '', '', '', 'public Node jjtGetChild(int i);', '', '', '', '', 'public int jjtGetNumChildren();', '}', '', '']","{'public': 6, 'void': 3, 'jjtClose': 1, 'jjtSetParent': 1, 'TOKEN_VARIABLE': 8, 'jjtGetParent': 1, 'jjtAddChild': 1, 'int': 3, 'jjtGetChild': 1, 'jjtGetNumChildren': 1}",CodeBlock55,Node.java,0.8846153846153846,1.0,0.75,11,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
33,CodeBlock55,62,83,Node.java,"['public void jjtSetParent(Node n);', 'public Node jjtGetParent();', '', '', '', '', '', 'public void jjtAddChild(Node n, int i);', '', '', '', '', '', 'public Node jjtGetChild(int i);', '', '', '', '', 'public int jjtGetNumChildren();', '}', '', '']","{'public': 5, 'void': 2, 'jjtSetParent': 1, 'TOKEN_VARIABLE': 8, 'jjtGetParent': 1, 'jjtAddChild': 1, 'int': 3, 'jjtGetChild': 1, 'jjtGetNumChildren': 1}",CodeBlock53,Node.java,0.7931034482758621,1.0,0.75,11,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
34,CodeBlock55,62,83,Node.java,"['public void jjtSetParent(Node n);', 'public Node jjtGetParent();', '', '', '', '', '', 'public void jjtAddChild(Node n, int i);', '', '', '', '', '', 'public Node jjtGetChild(int i);', '', '', '', '', 'public int jjtGetNumChildren();', '}', '', '']","{'public': 5, 'void': 2, 'jjtSetParent': 1, 'TOKEN_VARIABLE': 8, 'jjtGetParent': 1, 'jjtAddChild': 1, 'int': 3, 'jjtGetChild': 1, 'jjtGetNumChildren': 1}",CodeBlock54,Node.java,0.8846153846153846,1.0,0.75,11,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
35,CodeBlock71,749,790,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)', '{', '   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(5, old0, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(6, active0, active1, active2);', '      return 7;', '   }', '   switch(curChar)', '   {', '      case 99:', '         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L, active2, 0L);', '      case 101:', '         if ((active0 & 0x80000L) != 0L) { ', '            return jjStartNfaWithStates_0(7, 19, 35); } ', '         else if ((active0 & 0x400000000000000L) != 0L) {  { ', '            return jjStartNfaWithStates_0(7, 58, 35); } ', '         return jjMoveStringLiteralDfa8_0(active0, 0x100800000000L, active1, 0x280000000000L, active2, 0L); } ', '      case 104:', '         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000L, active2, 0x2L);', '      case 105:', '         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);', '      case 110:', '         return jjMoveStringLiteralDfa8_0(active0, 0x18000200000000L, active1, 0L, active2, 0L);', '      case 112:', '         if ((active0 & 0x2000000000000L) != 0L) { ', '            return jjStartNfaWithStates_0(7, 49, 35); } ', '         break;', '      case 115:', '         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x808000000000000L, active2, 0x8L);', '      case 116:', '         if ((active0 & 0x400L) != 0L) { ', '            return jjStartNfaWithStates_0(7, 10, 35); } ', '         break;', '      case 117:', '         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000000000L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(6, active0, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa7_0': 1, 'long': 6, 'TOKEN_VARIABLE': 81, 'if': 5, 'return': 14, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 25, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 9, 'jjMoveStringLiteralDfa8_0': 7, 'jjStartNfaWithStates_0': 4, 'break': 3, 'default': 1}",CodeBlock72,ParserTokenManager.java,0.861271676300578,0.7857142857142857,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
36,CodeBlock71,749,790,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)', '{', '   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(5, old0, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(6, active0, active1, active2);', '      return 7;', '   }', '   switch(curChar)', '   {', '      case 99:', '         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L, active2, 0L);', '      case 101:', '         if ((active0 & 0x80000L) != 0L) { ', '            return jjStartNfaWithStates_0(7, 19, 35); } ', '         else if ((active0 & 0x400000000000000L) != 0L) {  { ', '            return jjStartNfaWithStates_0(7, 58, 35); } ', '         return jjMoveStringLiteralDfa8_0(active0, 0x100800000000L, active1, 0x280000000000L, active2, 0L); } ', '      case 104:', '         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000L, active2, 0x2L);', '      case 105:', '         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);', '      case 110:', '         return jjMoveStringLiteralDfa8_0(active0, 0x18000200000000L, active1, 0L, active2, 0L);', '      case 112:', '         if ((active0 & 0x2000000000000L) != 0L) { ', '            return jjStartNfaWithStates_0(7, 49, 35); } ', '         break;', '      case 115:', '         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x808000000000000L, active2, 0x8L);', '      case 116:', '         if ((active0 & 0x400L) != 0L) { ', '            return jjStartNfaWithStates_0(7, 10, 35); } ', '         break;', '      case 117:', '         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000000000L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(6, active0, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa7_0': 1, 'long': 6, 'TOKEN_VARIABLE': 81, 'if': 5, 'return': 14, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 25, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 9, 'jjMoveStringLiteralDfa8_0': 7, 'jjStartNfaWithStates_0': 4, 'break': 3, 'default': 1}",CodeBlock73,ParserTokenManager.java,0.8171428571428572,0.7857142857142857,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
37,CodeBlock72,791,830,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)', '{', '   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(6, old0, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(7, active0, active1, active2);', '      return 8;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x280000000000L, active2, 0L);', '      case 100:', '         if ((active0 & 0x100000000000L) != 0L) { ', '            return jjStartNfaWithStates_0(8, 44, 35); } ', '         break;', '      case 101:', '         if ((active0 & 0x2000000000L) != 0L) { ', '            return jjStartNfaWithStates_0(8, 37, 35); } ', '         break;', '      case 103:', '         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);', '      case 104:', '         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000000000L, active2, 0x8L);', '      case 105:', '         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0x802000000000000L, active2, 0x2L);', '      case 110:', '         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000000000L, active2, 0x20L);', '      case 111:', '         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L, active1, 0L, active2, 0L);', '      case 116:', '         if ((active0 & 0x10000000000000L) != 0L) { ', '            return jjStartNfaWithStates_0(8, 52, 35); } ', '         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L, active1, 0L, active2, 0L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(7, active0, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa8_0': 1, 'long': 6, 'TOKEN_VARIABLE': 77, 'if': 4, 'return': 13, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 22, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 9, 'jjMoveStringLiteralDfa9_0': 7, 'jjStartNfaWithStates_0': 3, 'break': 3, 'default': 1}",CodeBlock71,ParserTokenManager.java,0.861271676300578,0.7857142857142857,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
38,CodeBlock72,791,830,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)', '{', '   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(6, old0, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(7, active0, active1, active2);', '      return 8;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x280000000000L, active2, 0L);', '      case 100:', '         if ((active0 & 0x100000000000L) != 0L) { ', '            return jjStartNfaWithStates_0(8, 44, 35); } ', '         break;', '      case 101:', '         if ((active0 & 0x2000000000L) != 0L) { ', '            return jjStartNfaWithStates_0(8, 37, 35); } ', '         break;', '      case 103:', '         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);', '      case 104:', '         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000000000L, active2, 0x8L);', '      case 105:', '         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0x802000000000000L, active2, 0x2L);', '      case 110:', '         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000000000L, active2, 0x20L);', '      case 111:', '         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L, active1, 0L, active2, 0L);', '      case 116:', '         if ((active0 & 0x10000000000000L) != 0L) { ', '            return jjStartNfaWithStates_0(8, 52, 35); } ', '         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L, active1, 0L, active2, 0L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(7, active0, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa8_0': 1, 'long': 6, 'TOKEN_VARIABLE': 77, 'if': 4, 'return': 13, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 22, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 9, 'jjMoveStringLiteralDfa9_0': 7, 'jjStartNfaWithStates_0': 3, 'break': 3, 'default': 1}",CodeBlock73,ParserTokenManager.java,0.8780487804878049,0.7692307692307693,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
39,CodeBlock73,831,868,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)', '{', '   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(7, old0, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(8, active0, active1, active2);', '      return 9;', '   }', '   switch(curChar)', '   {', '      case 97:', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000000L, active2, 0L);', '      case 102:', '         if ((active0 & 0x800000000L) != 0L) { ', '            return jjStartNfaWithStates_0(9, 35, 35); } ', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000000L, active2, 0x2L);', '      case 103:', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);', '      case 105:', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000000L, active2, 0x8L);', '      case 110:', '         if ((active1 & 0x2000000000000000L) != 0L) { ', '            return jjStopAtPos(9, 125); } ', '         break;', '      case 111:', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000000L, active2, 0L);', '      case 115:', '         if ((active0 & 0x200000000L) != 0L) { ', '            return jjStartNfaWithStates_0(9, 33, 35); } ', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000000000L, active2, 0x20L);', '      case 122:', '         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(8, active0, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa9_0': 1, 'long': 6, 'TOKEN_VARIABLE': 77, 'if': 4, 'return': 13, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 20, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 8, 'jjMoveStringLiteralDfa10_0': 7, 'jjStartNfaWithStates_0': 2, 'jjStopAtPos': 1, 'break': 2, 'default': 1}",CodeBlock71,ParserTokenManager.java,0.8171428571428572,0.7857142857142857,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
40,CodeBlock73,831,868,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)', '{', '   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(7, old0, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(8, active0, active1, active2);', '      return 9;', '   }', '   switch(curChar)', '   {', '      case 97:', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000000L, active2, 0L);', '      case 102:', '         if ((active0 & 0x800000000L) != 0L) { ', '            return jjStartNfaWithStates_0(9, 35, 35); } ', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000000L, active2, 0x2L);', '      case 103:', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);', '      case 105:', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000000L, active2, 0x8L);', '      case 110:', '         if ((active1 & 0x2000000000000000L) != 0L) { ', '            return jjStopAtPos(9, 125); } ', '         break;', '      case 111:', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000000L, active2, 0L);', '      case 115:', '         if ((active0 & 0x200000000L) != 0L) { ', '            return jjStartNfaWithStates_0(9, 33, 35); } ', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000000000L, active2, 0x20L);', '      case 122:', '         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(8, active0, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa9_0': 1, 'long': 6, 'TOKEN_VARIABLE': 77, 'if': 4, 'return': 13, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 20, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 8, 'jjMoveStringLiteralDfa10_0': 7, 'jjStartNfaWithStates_0': 2, 'jjStopAtPos': 1, 'break': 2, 'default': 1}",CodeBlock72,ParserTokenManager.java,0.8780487804878049,0.7692307692307693,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
41,CodeBlock73,831,868,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)', '{', '   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(7, old0, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(8, active0, active1, active2);', '      return 9;', '   }', '   switch(curChar)', '   {', '      case 97:', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000000L, active2, 0L);', '      case 102:', '         if ((active0 & 0x800000000L) != 0L) { ', '            return jjStartNfaWithStates_0(9, 35, 35); } ', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000000L, active2, 0x2L);', '      case 103:', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);', '      case 105:', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000000L, active2, 0x8L);', '      case 110:', '         if ((active1 & 0x2000000000000000L) != 0L) { ', '            return jjStopAtPos(9, 125); } ', '         break;', '      case 111:', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000000L, active2, 0L);', '      case 115:', '         if ((active0 & 0x200000000L) != 0L) { ', '            return jjStartNfaWithStates_0(9, 33, 35); } ', '         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000000000L, active2, 0x20L);', '      case 122:', '         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(8, active0, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa9_0': 1, 'long': 6, 'TOKEN_VARIABLE': 77, 'if': 4, 'return': 13, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 20, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 8, 'jjMoveStringLiteralDfa10_0': 7, 'jjStartNfaWithStates_0': 2, 'jjStopAtPos': 1, 'break': 2, 'default': 1}",CodeBlock74,ParserTokenManager.java,0.7848101265822784,0.6923076923076923,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
42,CodeBlock74,869,905,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)', '{', '   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(8, old0, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(9, active0, active1, active2);', '      return 10;', '   }', '   switch(curChar)', '   {', '      case 101:', '         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);', '      case 102:', '         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000000000000L, active2, 0x8L);', '      case 105:', '         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000000000000L, active2, 0x20L);', '      case 110:', '         if ((active1 & 0x800000000000000L) != 0L) { ', '            return jjStopAtPos(10, 123); } ', '         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80000000000L, active2, 0L);', '      case 114:', '         if ((active1 & 0x200000000000L) != 0L) { ', '            return jjStopAtPos(10, 109); } ', '         break;', '      case 116:', '         if ((active1 & 0x2000000000000L) != 0L)', '         {', '            jjmatchedKind = 113;', '            jjmatchedPos = 10;', '         }', '         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x2L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(9, active0, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa10_0': 1, 'long': 6, 'TOKEN_VARIABLE': 67, 'if': 4, 'return': 10, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 16, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 6, 'jjMoveStringLiteralDfa11_0': 5, 'jjStopAtPos': 2, 'break': 2, 'default': 1}",CodeBlock73,ParserTokenManager.java,0.7848101265822784,0.6923076923076923,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
43,CodeBlock76,939,960,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2)', '{', '   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(10, old0, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(11, 0L, active1, active2);', '      return 12;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x8L);', '      case 97:', '         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x2L);', '      case 110:', '         return jjMoveStringLiteralDfa13_0(active1, 0x20000000000000L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(11, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa12_0': 1, 'long': 6, 'TOKEN_VARIABLE': 38, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa13_0': 3, 'default': 1, 'break': 1}",CodeBlock77,ParserTokenManager.java,0.85,0.625,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
44,CodeBlock76,939,960,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2)', '{', '   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(10, old0, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(11, 0L, active1, active2);', '      return 12;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x8L);', '      case 97:', '         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x2L);', '      case 110:', '         return jjMoveStringLiteralDfa13_0(active1, 0x20000000000000L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(11, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa12_0': 1, 'long': 6, 'TOKEN_VARIABLE': 38, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa13_0': 3, 'default': 1, 'break': 1}",CodeBlock79,ParserTokenManager.java,0.8271604938271605,0.625,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
45,CodeBlock76,939,960,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2)', '{', '   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(10, old0, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(11, 0L, active1, active2);', '      return 12;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x8L);', '      case 97:', '         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x2L);', '      case 110:', '         return jjMoveStringLiteralDfa13_0(active1, 0x20000000000000L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(11, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa12_0': 1, 'long': 6, 'TOKEN_VARIABLE': 38, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa13_0': 3, 'default': 1, 'break': 1}",CodeBlock80,ParserTokenManager.java,0.8271604938271605,0.625,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
46,CodeBlock77,961,982,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(11, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(12, 0L, active1, active2);', '      return 13;', '   }', '   switch(curChar)', '   {', '      case 97:', '         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x8L);', '      case 101:', '         return jjMoveStringLiteralDfa14_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 115:', '         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x2L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(12, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa13_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa14_0': 3, 'default': 1, 'break': 1}",CodeBlock76,ParserTokenManager.java,0.85,0.625,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
47,CodeBlock77,961,982,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(11, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(12, 0L, active1, active2);', '      return 13;', '   }', '   switch(curChar)', '   {', '      case 97:', '         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x8L);', '      case 101:', '         return jjMoveStringLiteralDfa14_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 115:', '         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x2L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(12, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa13_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa14_0': 3, 'default': 1, 'break': 1}",CodeBlock78,ParserTokenManager.java,0.8356164383561644,0.7142857142857143,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
48,CodeBlock77,961,982,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(11, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(12, 0L, active1, active2);', '      return 13;', '   }', '   switch(curChar)', '   {', '      case 97:', '         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x8L);', '      case 101:', '         return jjMoveStringLiteralDfa14_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 115:', '         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x2L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(12, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa13_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa14_0': 3, 'default': 1, 'break': 1}",CodeBlock79,ParserTokenManager.java,0.8933333333333333,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
49,CodeBlock77,961,982,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(11, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(12, 0L, active1, active2);', '      return 13;', '   }', '   switch(curChar)', '   {', '      case 97:', '         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x8L);', '      case 101:', '         return jjMoveStringLiteralDfa14_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 115:', '         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x2L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(12, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa13_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa14_0': 3, 'default': 1, 'break': 1}",CodeBlock80,ParserTokenManager.java,0.8933333333333333,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
50,CodeBlock77,961,982,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(11, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(12, 0L, active1, active2);', '      return 13;', '   }', '   switch(curChar)', '   {', '      case 97:', '         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x8L);', '      case 101:', '         return jjMoveStringLiteralDfa14_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 115:', '         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x2L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(12, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa13_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa14_0': 3, 'default': 1, 'break': 1}",CodeBlock84,ParserTokenManager.java,0.8108108108108109,0.7142857142857143,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
51,CodeBlock77,961,982,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(11, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(12, 0L, active1, active2);', '      return 13;', '   }', '   switch(curChar)', '   {', '      case 97:', '         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x8L);', '      case 101:', '         return jjMoveStringLiteralDfa14_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 115:', '         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x2L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(12, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa13_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa14_0': 3, 'default': 1, 'break': 1}",CodeBlock85,ParserTokenManager.java,0.6986301369863014,0.5714285714285714,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
52,CodeBlock78,983,1002,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(12, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(13, 0L, active1, active2);', '      return 14;', '   }', '   switch(curChar)', '   {', '      case 100:', '         return jjMoveStringLiteralDfa15_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 115:', '         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0xaL);', '      default :', '         break;', '   }', '   return jjStartNfa_0(13, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa14_0': 1, 'long': 4, 'TOKEN_VARIABLE': 30, 'if': 1, 'return': 5, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 6, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 2, 'jjMoveStringLiteralDfa15_0': 2, 'default': 1, 'break': 1}",CodeBlock77,ParserTokenManager.java,0.8356164383561644,0.7142857142857143,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
53,CodeBlock78,983,1002,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(12, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(13, 0L, active1, active2);', '      return 14;', '   }', '   switch(curChar)', '   {', '      case 100:', '         return jjMoveStringLiteralDfa15_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 115:', '         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0xaL);', '      default :', '         break;', '   }', '   return jjStartNfa_0(13, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa14_0': 1, 'long': 4, 'TOKEN_VARIABLE': 30, 'if': 1, 'return': 5, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 6, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 2, 'jjMoveStringLiteralDfa15_0': 2, 'default': 1, 'break': 1}",CodeBlock79,ParserTokenManager.java,0.8356164383561644,0.7142857142857143,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
54,CodeBlock78,983,1002,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(12, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(13, 0L, active1, active2);', '      return 14;', '   }', '   switch(curChar)', '   {', '      case 100:', '         return jjMoveStringLiteralDfa15_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 115:', '         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0xaL);', '      default :', '         break;', '   }', '   return jjStartNfa_0(13, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa14_0': 1, 'long': 4, 'TOKEN_VARIABLE': 30, 'if': 1, 'return': 5, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 6, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 2, 'jjMoveStringLiteralDfa15_0': 2, 'default': 1, 'break': 1}",CodeBlock80,ParserTokenManager.java,0.8108108108108109,0.7142857142857143,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
55,CodeBlock78,983,1002,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(12, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(13, 0L, active1, active2);', '      return 14;', '   }', '   switch(curChar)', '   {', '      case 100:', '         return jjMoveStringLiteralDfa15_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 115:', '         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0xaL);', '      default :', '         break;', '   }', '   return jjStartNfa_0(13, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa14_0': 1, 'long': 4, 'TOKEN_VARIABLE': 30, 'if': 1, 'return': 5, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 6, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 2, 'jjMoveStringLiteralDfa15_0': 2, 'default': 1, 'break': 1}",CodeBlock81,ParserTokenManager.java,0.7792207792207793,0.8571428571428571,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
56,CodeBlock78,983,1002,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(12, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(13, 0L, active1, active2);', '      return 14;', '   }', '   switch(curChar)', '   {', '      case 100:', '         return jjMoveStringLiteralDfa15_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 115:', '         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0xaL);', '      default :', '         break;', '   }', '   return jjStartNfa_0(13, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa14_0': 1, 'long': 4, 'TOKEN_VARIABLE': 30, 'if': 1, 'return': 5, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 6, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 2, 'jjMoveStringLiteralDfa15_0': 2, 'default': 1, 'break': 1}",CodeBlock83,ParserTokenManager.java,0.8153846153846154,0.5714285714285714,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
57,CodeBlock78,983,1002,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(12, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(13, 0L, active1, active2);', '      return 14;', '   }', '   switch(curChar)', '   {', '      case 100:', '         return jjMoveStringLiteralDfa15_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 115:', '         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0xaL);', '      default :', '         break;', '   }', '   return jjStartNfa_0(13, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa14_0': 1, 'long': 4, 'TOKEN_VARIABLE': 30, 'if': 1, 'return': 5, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 6, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 2, 'jjMoveStringLiteralDfa15_0': 2, 'default': 1, 'break': 1}",CodeBlock84,ParserTokenManager.java,0.8529411764705882,1.0,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
58,CodeBlock78,983,1002,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(12, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(13, 0L, active1, active2);', '      return 14;', '   }', '   switch(curChar)', '   {', '      case 100:', '         return jjMoveStringLiteralDfa15_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 115:', '         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0xaL);', '      default :', '         break;', '   }', '   return jjStartNfa_0(13, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa14_0': 1, 'long': 4, 'TOKEN_VARIABLE': 30, 'if': 1, 'return': 5, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 6, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 2, 'jjMoveStringLiteralDfa15_0': 2, 'default': 1, 'break': 1}",CodeBlock85,ParserTokenManager.java,0.7846153846153846,0.7142857142857143,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
59,CodeBlock79,1003,1024,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(13, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(14, 0L, active1, active2);', '      return 15;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa16_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 105:', '         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x2L);', '      case 115:', '         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x8L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(14, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa15_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa16_0': 3, 'default': 1, 'break': 1}",CodeBlock76,ParserTokenManager.java,0.8271604938271605,0.625,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
60,CodeBlock79,1003,1024,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(13, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(14, 0L, active1, active2);', '      return 15;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa16_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 105:', '         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x2L);', '      case 115:', '         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x8L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(14, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa15_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa16_0': 3, 'default': 1, 'break': 1}",CodeBlock77,ParserTokenManager.java,0.8933333333333333,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
61,CodeBlock79,1003,1024,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(13, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(14, 0L, active1, active2);', '      return 15;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa16_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 105:', '         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x2L);', '      case 115:', '         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x8L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(14, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa15_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa16_0': 3, 'default': 1, 'break': 1}",CodeBlock78,ParserTokenManager.java,0.8356164383561644,0.7142857142857143,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
62,CodeBlock79,1003,1024,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(13, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(14, 0L, active1, active2);', '      return 15;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa16_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 105:', '         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x2L);', '      case 115:', '         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x8L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(14, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa15_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa16_0': 3, 'default': 1, 'break': 1}",CodeBlock80,ParserTokenManager.java,0.918918918918919,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
63,CodeBlock79,1003,1024,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(13, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(14, 0L, active1, active2);', '      return 15;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa16_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 105:', '         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x2L);', '      case 115:', '         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x8L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(14, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa15_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa16_0': 3, 'default': 1, 'break': 1}",CodeBlock84,ParserTokenManager.java,0.8108108108108109,0.7142857142857143,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
64,CodeBlock79,1003,1024,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(13, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(14, 0L, active1, active2);', '      return 15;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa16_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 105:', '         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x2L);', '      case 115:', '         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x8L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(14, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa15_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa16_0': 3, 'default': 1, 'break': 1}",CodeBlock85,ParserTokenManager.java,0.6986301369863014,0.5714285714285714,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
65,CodeBlock80,1025,1046,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(14, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(15, 0L, active1, active2);', '      return 16;', '   }', '   switch(curChar)', '   {', '      case 103:', '         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x2L);', '      case 105:', '         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x8L);', '      case 115:', '         return jjMoveStringLiteralDfa17_0(active1, 0x20000000000000L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(15, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa16_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa17_0': 3, 'default': 1, 'break': 1}",CodeBlock76,ParserTokenManager.java,0.8271604938271605,0.625,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
66,CodeBlock80,1025,1046,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(14, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(15, 0L, active1, active2);', '      return 16;', '   }', '   switch(curChar)', '   {', '      case 103:', '         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x2L);', '      case 105:', '         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x8L);', '      case 115:', '         return jjMoveStringLiteralDfa17_0(active1, 0x20000000000000L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(15, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa16_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa17_0': 3, 'default': 1, 'break': 1}",CodeBlock77,ParserTokenManager.java,0.8933333333333333,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
67,CodeBlock80,1025,1046,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(14, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(15, 0L, active1, active2);', '      return 16;', '   }', '   switch(curChar)', '   {', '      case 103:', '         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x2L);', '      case 105:', '         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x8L);', '      case 115:', '         return jjMoveStringLiteralDfa17_0(active1, 0x20000000000000L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(15, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa16_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa17_0': 3, 'default': 1, 'break': 1}",CodeBlock78,ParserTokenManager.java,0.8108108108108109,0.7142857142857143,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
68,CodeBlock80,1025,1046,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(14, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(15, 0L, active1, active2);', '      return 16;', '   }', '   switch(curChar)', '   {', '      case 103:', '         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x2L);', '      case 105:', '         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x8L);', '      case 115:', '         return jjMoveStringLiteralDfa17_0(active1, 0x20000000000000L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(15, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa16_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa17_0': 3, 'default': 1, 'break': 1}",CodeBlock79,ParserTokenManager.java,0.918918918918919,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
69,CodeBlock80,1025,1046,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(14, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(15, 0L, active1, active2);', '      return 16;', '   }', '   switch(curChar)', '   {', '      case 103:', '         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x2L);', '      case 105:', '         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x8L);', '      case 115:', '         return jjMoveStringLiteralDfa17_0(active1, 0x20000000000000L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(15, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa16_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa17_0': 3, 'default': 1, 'break': 1}",CodeBlock84,ParserTokenManager.java,0.8108108108108109,0.7142857142857143,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
70,CodeBlock80,1025,1046,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(14, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(15, 0L, active1, active2);', '      return 16;', '   }', '   switch(curChar)', '   {', '      case 103:', '         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x2L);', '      case 105:', '         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x8L);', '      case 115:', '         return jjMoveStringLiteralDfa17_0(active1, 0x20000000000000L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(15, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa16_0': 1, 'long': 4, 'TOKEN_VARIABLE': 34, 'if': 1, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa17_0': 3, 'default': 1, 'break': 1}",CodeBlock85,ParserTokenManager.java,0.6986301369863014,0.5714285714285714,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
71,CodeBlock81,1047,1070,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa17_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(15, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(16, 0L, active1, active2);', '      return 17;', '   }', '   switch(curChar)', '   {', '      case 103:', '         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0x8L);', '      case 104:', '         return jjMoveStringLiteralDfa18_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 110:', '         if ((active2 & 0x2L) != 0L) { ', '            return jjStopAtPos(17, 129); } ', '         break;', '      default :', '         break;', '   }', '   return jjStartNfa_0(16, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa17_0': 1, 'long': 4, 'TOKEN_VARIABLE': 33, 'if': 2, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 9, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa18_0': 2, 'jjStopAtPos': 1, 'break': 2, 'default': 1}",CodeBlock78,ParserTokenManager.java,0.7792207792207793,0.8571428571428571,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
72,CodeBlock81,1047,1070,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa17_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(15, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(16, 0L, active1, active2);', '      return 17;', '   }', '   switch(curChar)', '   {', '      case 103:', '         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0x8L);', '      case 104:', '         return jjMoveStringLiteralDfa18_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 110:', '         if ((active2 & 0x2L) != 0L) { ', '            return jjStopAtPos(17, 129); } ', '         break;', '      default :', '         break;', '   }', '   return jjStartNfa_0(16, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa17_0': 1, 'long': 4, 'TOKEN_VARIABLE': 33, 'if': 2, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 9, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa18_0': 2, 'jjStopAtPos': 1, 'break': 2, 'default': 1}",CodeBlock82,ParserTokenManager.java,0.8666666666666667,0.7142857142857143,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
73,CodeBlock81,1047,1070,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa17_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(15, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(16, 0L, active1, active2);', '      return 17;', '   }', '   switch(curChar)', '   {', '      case 103:', '         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0x8L);', '      case 104:', '         return jjMoveStringLiteralDfa18_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 110:', '         if ((active2 & 0x2L) != 0L) { ', '            return jjStopAtPos(17, 129); } ', '         break;', '      default :', '         break;', '   }', '   return jjStartNfa_0(16, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa17_0': 1, 'long': 4, 'TOKEN_VARIABLE': 33, 'if': 2, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 9, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa18_0': 2, 'jjStopAtPos': 1, 'break': 2, 'default': 1}",CodeBlock84,ParserTokenManager.java,0.8026315789473685,0.8571428571428571,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
74,CodeBlock81,1047,1070,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa17_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(15, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(16, 0L, active1, active2);', '      return 17;', '   }', '   switch(curChar)', '   {', '      case 103:', '         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0x8L);', '      case 104:', '         return jjMoveStringLiteralDfa18_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 110:', '         if ((active2 & 0x2L) != 0L) { ', '            return jjStopAtPos(17, 129); } ', '         break;', '      default :', '         break;', '   }', '   return jjStartNfa_0(16, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa17_0': 1, 'long': 4, 'TOKEN_VARIABLE': 33, 'if': 2, 'return': 6, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 9, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 3, 'jjMoveStringLiteralDfa18_0': 2, 'jjStopAtPos': 1, 'break': 2, 'default': 1}",CodeBlock85,ParserTokenManager.java,0.6710526315789473,0.5714285714285714,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
75,CodeBlock82,1071,1092,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa18_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(16, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(17, 0L, active1, active2);', '      return 18;', '   }', '   switch(curChar)', '   {', '      case 105:', '         return jjMoveStringLiteralDfa19_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 110:', '         if ((active2 & 0x8L) != 0L) { ', '            return jjStopAtPos(18, 131); } ', '         break;', '      default :', '         break;', '   }', '   return jjStartNfa_0(17, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa18_0': 1, 'long': 4, 'TOKEN_VARIABLE': 29, 'if': 2, 'return': 5, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 8, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 2, 'jjMoveStringLiteralDfa19_0': 1, 'jjStopAtPos': 1, 'break': 2, 'default': 1}",CodeBlock81,ParserTokenManager.java,0.8666666666666667,0.7142857142857143,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
76,CodeBlock82,1071,1092,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa18_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(16, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(17, 0L, active1, active2);', '      return 18;', '   }', '   switch(curChar)', '   {', '      case 105:', '         return jjMoveStringLiteralDfa19_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 110:', '         if ((active2 & 0x8L) != 0L) { ', '            return jjStopAtPos(18, 131); } ', '         break;', '      default :', '         break;', '   }', '   return jjStartNfa_0(17, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa18_0': 1, 'long': 4, 'TOKEN_VARIABLE': 29, 'if': 2, 'return': 5, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 8, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 2, 'jjMoveStringLiteralDfa19_0': 1, 'jjStopAtPos': 1, 'break': 2, 'default': 1}",CodeBlock83,ParserTokenManager.java,0.8059701492537313,0.7142857142857143,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
77,CodeBlock82,1071,1092,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa18_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(16, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(17, 0L, active1, active2);', '      return 18;', '   }', '   switch(curChar)', '   {', '      case 105:', '         return jjMoveStringLiteralDfa19_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 110:', '         if ((active2 & 0x8L) != 0L) { ', '            return jjStopAtPos(18, 131); } ', '         break;', '      default :', '         break;', '   }', '   return jjStartNfa_0(17, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa18_0': 1, 'long': 4, 'TOKEN_VARIABLE': 29, 'if': 2, 'return': 5, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 8, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 2, 'jjMoveStringLiteralDfa19_0': 1, 'jjStopAtPos': 1, 'break': 2, 'default': 1}",CodeBlock84,ParserTokenManager.java,0.8428571428571429,0.8571428571428571,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
78,CodeBlock82,1071,1092,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa18_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(16, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(17, 0L, active1, active2);', '      return 18;', '   }', '   switch(curChar)', '   {', '      case 105:', '         return jjMoveStringLiteralDfa19_0(active1, 0x20000000000000L, active2, 0x20L);', '      case 110:', '         if ((active2 & 0x8L) != 0L) { ', '            return jjStopAtPos(18, 131); } ', '         break;', '      default :', '         break;', '   }', '   return jjStartNfa_0(17, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa18_0': 1, 'long': 4, 'TOKEN_VARIABLE': 29, 'if': 2, 'return': 5, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 8, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 2, 'jjMoveStringLiteralDfa19_0': 1, 'jjStopAtPos': 1, 'break': 2, 'default': 1}",CodeBlock85,ParserTokenManager.java,0.75,0.7142857142857143,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
79,CodeBlock83,1093,1110,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa19_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(17, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(18, 0L, active1, active2);', '      return 19;', '   }', '   switch(curChar)', '   {', '      case 102:', '         return jjMoveStringLiteralDfa20_0(active1, 0x20000000000000L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(18, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa19_0': 1, 'long': 4, 'TOKEN_VARIABLE': 26, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa20_0': 1, 'default': 1, 'break': 1}",CodeBlock78,ParserTokenManager.java,0.8153846153846154,0.5714285714285714,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
80,CodeBlock83,1093,1110,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa19_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(17, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(18, 0L, active1, active2);', '      return 19;', '   }', '   switch(curChar)', '   {', '      case 102:', '         return jjMoveStringLiteralDfa20_0(active1, 0x20000000000000L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(18, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa19_0': 1, 'long': 4, 'TOKEN_VARIABLE': 26, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa20_0': 1, 'default': 1, 'break': 1}",CodeBlock82,ParserTokenManager.java,0.8059701492537313,0.7142857142857143,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
81,CodeBlock83,1093,1110,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa19_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(17, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(18, 0L, active1, active2);', '      return 19;', '   }', '   switch(curChar)', '   {', '      case 102:', '         return jjMoveStringLiteralDfa20_0(active1, 0x20000000000000L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(18, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa19_0': 1, 'long': 4, 'TOKEN_VARIABLE': 26, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa20_0': 1, 'default': 1, 'break': 1}",CodeBlock84,ParserTokenManager.java,0.84375,0.5714285714285714,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
82,CodeBlock83,1093,1110,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa19_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(17, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(18, 0L, active1, active2);', '      return 19;', '   }', '   switch(curChar)', '   {', '      case 102:', '         return jjMoveStringLiteralDfa20_0(active1, 0x20000000000000L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(18, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa19_0': 1, 'long': 4, 'TOKEN_VARIABLE': 26, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa20_0': 1, 'default': 1, 'break': 1}",CodeBlock85,ParserTokenManager.java,0.8947368421052632,0.6666666666666666,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
83,CodeBlock84,1111,1133,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa20_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(18, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(19, 0L, active1, active2);', '      return 20;', '   }', '   switch(curChar)', '   {', '      case 116:', '         if ((active1 & 0x20000000000000L) != 0L)', '         {', '            jjmatchedKind = 117;', '            jjmatchedPos = 20;', '         }', '         return jjMoveStringLiteralDfa21_0(active1, 0L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(19, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa20_0': 1, 'long': 4, 'TOKEN_VARIABLE': 31, 'if': 2, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa21_0': 1, 'default': 1, 'break': 1}",CodeBlock77,ParserTokenManager.java,0.8108108108108109,0.7142857142857143,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
84,CodeBlock84,1111,1133,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa20_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(18, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(19, 0L, active1, active2);', '      return 20;', '   }', '   switch(curChar)', '   {', '      case 116:', '         if ((active1 & 0x20000000000000L) != 0L)', '         {', '            jjmatchedKind = 117;', '            jjmatchedPos = 20;', '         }', '         return jjMoveStringLiteralDfa21_0(active1, 0L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(19, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa20_0': 1, 'long': 4, 'TOKEN_VARIABLE': 31, 'if': 2, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa21_0': 1, 'default': 1, 'break': 1}",CodeBlock78,ParserTokenManager.java,0.8529411764705882,1.0,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
85,CodeBlock84,1111,1133,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa20_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(18, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(19, 0L, active1, active2);', '      return 20;', '   }', '   switch(curChar)', '   {', '      case 116:', '         if ((active1 & 0x20000000000000L) != 0L)', '         {', '            jjmatchedKind = 117;', '            jjmatchedPos = 20;', '         }', '         return jjMoveStringLiteralDfa21_0(active1, 0L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(19, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa20_0': 1, 'long': 4, 'TOKEN_VARIABLE': 31, 'if': 2, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa21_0': 1, 'default': 1, 'break': 1}",CodeBlock79,ParserTokenManager.java,0.8108108108108109,0.7142857142857143,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
86,CodeBlock84,1111,1133,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa20_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(18, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(19, 0L, active1, active2);', '      return 20;', '   }', '   switch(curChar)', '   {', '      case 116:', '         if ((active1 & 0x20000000000000L) != 0L)', '         {', '            jjmatchedKind = 117;', '            jjmatchedPos = 20;', '         }', '         return jjMoveStringLiteralDfa21_0(active1, 0L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(19, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa20_0': 1, 'long': 4, 'TOKEN_VARIABLE': 31, 'if': 2, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa21_0': 1, 'default': 1, 'break': 1}",CodeBlock80,ParserTokenManager.java,0.8108108108108109,0.7142857142857143,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
87,CodeBlock84,1111,1133,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa20_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(18, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(19, 0L, active1, active2);', '      return 20;', '   }', '   switch(curChar)', '   {', '      case 116:', '         if ((active1 & 0x20000000000000L) != 0L)', '         {', '            jjmatchedKind = 117;', '            jjmatchedPos = 20;', '         }', '         return jjMoveStringLiteralDfa21_0(active1, 0L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(19, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa20_0': 1, 'long': 4, 'TOKEN_VARIABLE': 31, 'if': 2, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa21_0': 1, 'default': 1, 'break': 1}",CodeBlock81,ParserTokenManager.java,0.8026315789473685,0.8571428571428571,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
88,CodeBlock84,1111,1133,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa20_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(18, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(19, 0L, active1, active2);', '      return 20;', '   }', '   switch(curChar)', '   {', '      case 116:', '         if ((active1 & 0x20000000000000L) != 0L)', '         {', '            jjmatchedKind = 117;', '            jjmatchedPos = 20;', '         }', '         return jjMoveStringLiteralDfa21_0(active1, 0L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(19, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa20_0': 1, 'long': 4, 'TOKEN_VARIABLE': 31, 'if': 2, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa21_0': 1, 'default': 1, 'break': 1}",CodeBlock82,ParserTokenManager.java,0.8428571428571429,0.8571428571428571,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
89,CodeBlock84,1111,1133,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa20_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(18, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(19, 0L, active1, active2);', '      return 20;', '   }', '   switch(curChar)', '   {', '      case 116:', '         if ((active1 & 0x20000000000000L) != 0L)', '         {', '            jjmatchedKind = 117;', '            jjmatchedPos = 20;', '         }', '         return jjMoveStringLiteralDfa21_0(active1, 0L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(19, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa20_0': 1, 'long': 4, 'TOKEN_VARIABLE': 31, 'if': 2, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa21_0': 1, 'default': 1, 'break': 1}",CodeBlock83,ParserTokenManager.java,0.84375,0.5714285714285714,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
90,CodeBlock84,1111,1133,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa20_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(18, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(19, 0L, active1, active2);', '      return 20;', '   }', '   switch(curChar)', '   {', '      case 116:', '         if ((active1 & 0x20000000000000L) != 0L)', '         {', '            jjmatchedKind = 117;', '            jjmatchedPos = 20;', '         }', '         return jjMoveStringLiteralDfa21_0(active1, 0L, active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(19, 0L, active1, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa20_0': 1, 'long': 4, 'TOKEN_VARIABLE': 31, 'if': 2, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa21_0': 1, 'default': 1, 'break': 1}",CodeBlock85,ParserTokenManager.java,0.8125,0.7142857142857143,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
91,CodeBlock85,1134,1151,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(19, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(20, 0L, 0L, active2);', '      return 21;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa22_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(20, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa21_0': 1, 'long': 4, 'TOKEN_VARIABLE': 24, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa22_0': 1, 'default': 1, 'break': 1}",CodeBlock77,ParserTokenManager.java,0.6986301369863014,0.5714285714285714,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
92,CodeBlock85,1134,1151,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(19, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(20, 0L, 0L, active2);', '      return 21;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa22_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(20, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa21_0': 1, 'long': 4, 'TOKEN_VARIABLE': 24, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa22_0': 1, 'default': 1, 'break': 1}",CodeBlock78,ParserTokenManager.java,0.7846153846153846,0.7142857142857143,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
93,CodeBlock85,1134,1151,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(19, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(20, 0L, 0L, active2);', '      return 21;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa22_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(20, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa21_0': 1, 'long': 4, 'TOKEN_VARIABLE': 24, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa22_0': 1, 'default': 1, 'break': 1}",CodeBlock79,ParserTokenManager.java,0.6986301369863014,0.5714285714285714,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
94,CodeBlock85,1134,1151,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(19, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(20, 0L, 0L, active2);', '      return 21;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa22_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(20, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa21_0': 1, 'long': 4, 'TOKEN_VARIABLE': 24, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa22_0': 1, 'default': 1, 'break': 1}",CodeBlock80,ParserTokenManager.java,0.6986301369863014,0.5714285714285714,0.6666666666666666,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
95,CodeBlock85,1134,1151,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(19, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(20, 0L, 0L, active2);', '      return 21;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa22_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(20, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa21_0': 1, 'long': 4, 'TOKEN_VARIABLE': 24, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa22_0': 1, 'default': 1, 'break': 1}",CodeBlock81,ParserTokenManager.java,0.6710526315789473,0.5714285714285714,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
96,CodeBlock85,1134,1151,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(19, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(20, 0L, 0L, active2);', '      return 21;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa22_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(20, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa21_0': 1, 'long': 4, 'TOKEN_VARIABLE': 24, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa22_0': 1, 'default': 1, 'break': 1}",CodeBlock82,ParserTokenManager.java,0.75,0.7142857142857143,0.75,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
97,CodeBlock85,1134,1151,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(19, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(20, 0L, 0L, active2);', '      return 21;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa22_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(20, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa21_0': 1, 'long': 4, 'TOKEN_VARIABLE': 24, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa22_0': 1, 'default': 1, 'break': 1}",CodeBlock83,ParserTokenManager.java,0.8947368421052632,0.6666666666666666,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
98,CodeBlock85,1134,1151,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(19, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(20, 0L, 0L, active2);', '      return 21;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa22_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(20, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa21_0': 1, 'long': 4, 'TOKEN_VARIABLE': 24, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa22_0': 1, 'default': 1, 'break': 1}",CodeBlock84,ParserTokenManager.java,0.8125,0.7142857142857143,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
99,CodeBlock85,1134,1151,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(19, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(20, 0L, 0L, active2);', '      return 21;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa22_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(20, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa21_0': 1, 'long': 4, 'TOKEN_VARIABLE': 24, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa22_0': 1, 'default': 1, 'break': 1}",CodeBlock86,ParserTokenManager.java,0.8518518518518519,0.6,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
100,CodeBlock85,1134,1151,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(19, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(20, 0L, 0L, active2);', '      return 21;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa22_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(20, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa21_0': 1, 'long': 4, 'TOKEN_VARIABLE': 24, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa22_0': 1, 'default': 1, 'break': 1}",CodeBlock87,ParserTokenManager.java,0.8181818181818182,0.6,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
101,CodeBlock85,1134,1151,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(19, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(20, 0L, 0L, active2);', '      return 21;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa22_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(20, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa21_0': 1, 'long': 4, 'TOKEN_VARIABLE': 24, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa22_0': 1, 'default': 1, 'break': 1}",CodeBlock88,ParserTokenManager.java,0.8181818181818182,0.6,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
102,CodeBlock85,1134,1151,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(19, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(20, 0L, 0L, active2);', '      return 21;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa22_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(20, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa21_0': 1, 'long': 4, 'TOKEN_VARIABLE': 24, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa22_0': 1, 'default': 1, 'break': 1}",CodeBlock89,ParserTokenManager.java,0.8181818181818182,0.6,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
103,CodeBlock85,1134,1151,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(19, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(20, 0L, 0L, active2);', '      return 21;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa22_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(20, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa21_0': 1, 'long': 4, 'TOKEN_VARIABLE': 24, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa22_0': 1, 'default': 1, 'break': 1}",CodeBlock90,ParserTokenManager.java,0.8181818181818182,0.6,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
104,CodeBlock85,1134,1151,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2)', '{', '   if (((active1 &= old1) | (active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(19, 0L, old1, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(20, 0L, 0L, active2);', '      return 21;', '   }', '   switch(curChar)', '   {', '      case 95:', '         return jjMoveStringLiteralDfa22_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(20, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa21_0': 1, 'long': 4, 'TOKEN_VARIABLE': 24, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa22_0': 1, 'default': 1, 'break': 1}",CodeBlock91,ParserTokenManager.java,0.7796610169491526,0.6,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
105,CodeBlock86,1152,1169,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa22_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(20, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(21, 0L, 0L, active2);', '      return 22;', '   }', '   switch(curChar)', '   {', '      case 97:', '         return jjMoveStringLiteralDfa23_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(21, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa22_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa23_0': 1, 'default': 1, 'break': 1}",CodeBlock85,ParserTokenManager.java,0.8518518518518519,0.6,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
106,CodeBlock86,1152,1169,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa22_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(20, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(21, 0L, 0L, active2);', '      return 22;', '   }', '   switch(curChar)', '   {', '      case 97:', '         return jjMoveStringLiteralDfa23_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(21, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa22_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa23_0': 1, 'default': 1, 'break': 1}",CodeBlock87,ParserTokenManager.java,0.9583333333333334,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
107,CodeBlock86,1152,1169,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa22_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(20, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(21, 0L, 0L, active2);', '      return 22;', '   }', '   switch(curChar)', '   {', '      case 97:', '         return jjMoveStringLiteralDfa23_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(21, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa22_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa23_0': 1, 'default': 1, 'break': 1}",CodeBlock88,ParserTokenManager.java,0.9183673469387755,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
108,CodeBlock86,1152,1169,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa22_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(20, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(21, 0L, 0L, active2);', '      return 22;', '   }', '   switch(curChar)', '   {', '      case 97:', '         return jjMoveStringLiteralDfa23_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(21, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa22_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa23_0': 1, 'default': 1, 'break': 1}",CodeBlock89,ParserTokenManager.java,0.9183673469387755,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
109,CodeBlock86,1152,1169,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa22_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(20, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(21, 0L, 0L, active2);', '      return 22;', '   }', '   switch(curChar)', '   {', '      case 97:', '         return jjMoveStringLiteralDfa23_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(21, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa22_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa23_0': 1, 'default': 1, 'break': 1}",CodeBlock90,ParserTokenManager.java,0.9183673469387755,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
110,CodeBlock86,1152,1169,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa22_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(20, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(21, 0L, 0L, active2);', '      return 22;', '   }', '   switch(curChar)', '   {', '      case 97:', '         return jjMoveStringLiteralDfa23_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(21, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa22_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa23_0': 1, 'default': 1, 'break': 1}",CodeBlock91,ParserTokenManager.java,0.8333333333333334,0.75,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
111,CodeBlock87,1170,1187,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa23_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(21, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(22, 0L, 0L, active2);', '      return 23;', '   }', '   switch(curChar)', '   {', '      case 115:', '         return jjMoveStringLiteralDfa24_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(22, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa23_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa24_0': 1, 'default': 1, 'break': 1}",CodeBlock85,ParserTokenManager.java,0.8181818181818182,0.6,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
112,CodeBlock87,1170,1187,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa23_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(21, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(22, 0L, 0L, active2);', '      return 23;', '   }', '   switch(curChar)', '   {', '      case 115:', '         return jjMoveStringLiteralDfa24_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(22, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa23_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa24_0': 1, 'default': 1, 'break': 1}",CodeBlock86,ParserTokenManager.java,0.9583333333333334,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
113,CodeBlock87,1170,1187,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa23_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(21, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(22, 0L, 0L, active2);', '      return 23;', '   }', '   switch(curChar)', '   {', '      case 115:', '         return jjMoveStringLiteralDfa24_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(22, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa23_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa24_0': 1, 'default': 1, 'break': 1}",CodeBlock88,ParserTokenManager.java,0.9583333333333334,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
114,CodeBlock87,1170,1187,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa23_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(21, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(22, 0L, 0L, active2);', '      return 23;', '   }', '   switch(curChar)', '   {', '      case 115:', '         return jjMoveStringLiteralDfa24_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(22, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa23_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa24_0': 1, 'default': 1, 'break': 1}",CodeBlock89,ParserTokenManager.java,0.9183673469387755,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
115,CodeBlock87,1170,1187,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa23_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(21, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(22, 0L, 0L, active2);', '      return 23;', '   }', '   switch(curChar)', '   {', '      case 115:', '         return jjMoveStringLiteralDfa24_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(22, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa23_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa24_0': 1, 'default': 1, 'break': 1}",CodeBlock90,ParserTokenManager.java,0.9183673469387755,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
116,CodeBlock87,1170,1187,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa23_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(21, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(22, 0L, 0L, active2);', '      return 23;', '   }', '   switch(curChar)', '   {', '      case 115:', '         return jjMoveStringLiteralDfa24_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(22, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa23_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa24_0': 1, 'default': 1, 'break': 1}",CodeBlock91,ParserTokenManager.java,0.8333333333333334,0.75,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
117,CodeBlock88,1188,1205,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa24_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(22, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(23, 0L, 0L, active2);', '      return 24;', '   }', '   switch(curChar)', '   {', '      case 115:', '         return jjMoveStringLiteralDfa25_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(23, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa24_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa25_0': 1, 'default': 1, 'break': 1}",CodeBlock85,ParserTokenManager.java,0.8181818181818182,0.6,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
118,CodeBlock88,1188,1205,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa24_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(22, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(23, 0L, 0L, active2);', '      return 24;', '   }', '   switch(curChar)', '   {', '      case 115:', '         return jjMoveStringLiteralDfa25_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(23, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa24_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa25_0': 1, 'default': 1, 'break': 1}",CodeBlock86,ParserTokenManager.java,0.9183673469387755,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
119,CodeBlock88,1188,1205,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa24_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(22, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(23, 0L, 0L, active2);', '      return 24;', '   }', '   switch(curChar)', '   {', '      case 115:', '         return jjMoveStringLiteralDfa25_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(23, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa24_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa25_0': 1, 'default': 1, 'break': 1}",CodeBlock87,ParserTokenManager.java,0.9583333333333334,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
120,CodeBlock88,1188,1205,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa24_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(22, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(23, 0L, 0L, active2);', '      return 24;', '   }', '   switch(curChar)', '   {', '      case 115:', '         return jjMoveStringLiteralDfa25_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(23, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa24_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa25_0': 1, 'default': 1, 'break': 1}",CodeBlock89,ParserTokenManager.java,0.9583333333333334,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
121,CodeBlock88,1188,1205,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa24_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(22, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(23, 0L, 0L, active2);', '      return 24;', '   }', '   switch(curChar)', '   {', '      case 115:', '         return jjMoveStringLiteralDfa25_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(23, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa24_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa25_0': 1, 'default': 1, 'break': 1}",CodeBlock90,ParserTokenManager.java,0.9183673469387755,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
122,CodeBlock88,1188,1205,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa24_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(22, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(23, 0L, 0L, active2);', '      return 24;', '   }', '   switch(curChar)', '   {', '      case 115:', '         return jjMoveStringLiteralDfa25_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(23, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa24_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa25_0': 1, 'default': 1, 'break': 1}",CodeBlock91,ParserTokenManager.java,0.8333333333333334,0.75,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
123,CodeBlock89,1206,1223,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa25_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(23, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(24, 0L, 0L, active2);', '      return 25;', '   }', '   switch(curChar)', '   {', '      case 105:', '         return jjMoveStringLiteralDfa26_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(24, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa25_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa26_0': 1, 'default': 1, 'break': 1}",CodeBlock85,ParserTokenManager.java,0.8181818181818182,0.6,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
124,CodeBlock89,1206,1223,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa25_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(23, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(24, 0L, 0L, active2);', '      return 25;', '   }', '   switch(curChar)', '   {', '      case 105:', '         return jjMoveStringLiteralDfa26_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(24, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa25_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa26_0': 1, 'default': 1, 'break': 1}",CodeBlock86,ParserTokenManager.java,0.9183673469387755,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
125,CodeBlock89,1206,1223,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa25_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(23, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(24, 0L, 0L, active2);', '      return 25;', '   }', '   switch(curChar)', '   {', '      case 105:', '         return jjMoveStringLiteralDfa26_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(24, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa25_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa26_0': 1, 'default': 1, 'break': 1}",CodeBlock87,ParserTokenManager.java,0.9183673469387755,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
126,CodeBlock89,1206,1223,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa25_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(23, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(24, 0L, 0L, active2);', '      return 25;', '   }', '   switch(curChar)', '   {', '      case 105:', '         return jjMoveStringLiteralDfa26_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(24, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa25_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa26_0': 1, 'default': 1, 'break': 1}",CodeBlock88,ParserTokenManager.java,0.9583333333333334,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
127,CodeBlock89,1206,1223,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa25_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(23, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(24, 0L, 0L, active2);', '      return 25;', '   }', '   switch(curChar)', '   {', '      case 105:', '         return jjMoveStringLiteralDfa26_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(24, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa25_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa26_0': 1, 'default': 1, 'break': 1}",CodeBlock90,ParserTokenManager.java,0.9583333333333334,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
128,CodeBlock89,1206,1223,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa25_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(23, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(24, 0L, 0L, active2);', '      return 25;', '   }', '   switch(curChar)', '   {', '      case 105:', '         return jjMoveStringLiteralDfa26_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(24, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa25_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa26_0': 1, 'default': 1, 'break': 1}",CodeBlock91,ParserTokenManager.java,0.8333333333333334,0.75,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
129,CodeBlock90,1224,1241,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa26_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(24, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(25, 0L, 0L, active2);', '      return 26;', '   }', '   switch(curChar)', '   {', '      case 103:', '         return jjMoveStringLiteralDfa27_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(25, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa26_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa27_0': 1, 'default': 1, 'break': 1}",CodeBlock85,ParserTokenManager.java,0.8181818181818182,0.6,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
130,CodeBlock90,1224,1241,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa26_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(24, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(25, 0L, 0L, active2);', '      return 26;', '   }', '   switch(curChar)', '   {', '      case 103:', '         return jjMoveStringLiteralDfa27_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(25, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa26_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa27_0': 1, 'default': 1, 'break': 1}",CodeBlock86,ParserTokenManager.java,0.9183673469387755,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
131,CodeBlock90,1224,1241,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa26_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(24, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(25, 0L, 0L, active2);', '      return 26;', '   }', '   switch(curChar)', '   {', '      case 103:', '         return jjMoveStringLiteralDfa27_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(25, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa26_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa27_0': 1, 'default': 1, 'break': 1}",CodeBlock87,ParserTokenManager.java,0.9183673469387755,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
132,CodeBlock90,1224,1241,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa26_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(24, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(25, 0L, 0L, active2);', '      return 26;', '   }', '   switch(curChar)', '   {', '      case 103:', '         return jjMoveStringLiteralDfa27_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(25, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa26_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa27_0': 1, 'default': 1, 'break': 1}",CodeBlock88,ParserTokenManager.java,0.9183673469387755,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
133,CodeBlock90,1224,1241,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa26_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(24, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(25, 0L, 0L, active2);', '      return 26;', '   }', '   switch(curChar)', '   {', '      case 103:', '         return jjMoveStringLiteralDfa27_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(25, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa26_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa27_0': 1, 'default': 1, 'break': 1}",CodeBlock89,ParserTokenManager.java,0.9583333333333334,1.0,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
134,CodeBlock90,1224,1241,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa26_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(24, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(25, 0L, 0L, active2);', '      return 26;', '   }', '   switch(curChar)', '   {', '      case 103:', '         return jjMoveStringLiteralDfa27_0(active2, 0x20L);', '      default :', '         break;', '   }', '   return jjStartNfa_0(25, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa26_0': 1, 'long': 2, 'TOKEN_VARIABLE': 20, 'if': 1, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 5, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjMoveStringLiteralDfa27_0': 1, 'default': 1, 'break': 1}",CodeBlock91,ParserTokenManager.java,0.8679245283018868,0.75,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
135,CodeBlock91,1242,1261,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa27_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(25, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(26, 0L, 0L, active2);', '      return 27;', '   }', '   switch(curChar)', '   {', '      case 110:', '         if ((active2 & 0x20L) != 0L) { ', '            return jjStopAtPos(27, 133); } ', '         break;', '      default :', '         break;', '   }', '   return jjStartNfa_0(26, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa27_0': 1, 'long': 2, 'TOKEN_VARIABLE': 21, 'if': 2, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjStopAtPos': 1, 'break': 2, 'default': 1}",CodeBlock85,ParserTokenManager.java,0.7796610169491526,0.6,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
136,CodeBlock91,1242,1261,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa27_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(25, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(26, 0L, 0L, active2);', '      return 27;', '   }', '   switch(curChar)', '   {', '      case 110:', '         if ((active2 & 0x20L) != 0L) { ', '            return jjStopAtPos(27, 133); } ', '         break;', '      default :', '         break;', '   }', '   return jjStartNfa_0(26, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa27_0': 1, 'long': 2, 'TOKEN_VARIABLE': 21, 'if': 2, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjStopAtPos': 1, 'break': 2, 'default': 1}",CodeBlock86,ParserTokenManager.java,0.8333333333333334,0.75,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
137,CodeBlock91,1242,1261,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa27_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(25, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(26, 0L, 0L, active2);', '      return 27;', '   }', '   switch(curChar)', '   {', '      case 110:', '         if ((active2 & 0x20L) != 0L) { ', '            return jjStopAtPos(27, 133); } ', '         break;', '      default :', '         break;', '   }', '   return jjStartNfa_0(26, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa27_0': 1, 'long': 2, 'TOKEN_VARIABLE': 21, 'if': 2, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjStopAtPos': 1, 'break': 2, 'default': 1}",CodeBlock87,ParserTokenManager.java,0.8333333333333334,0.75,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
138,CodeBlock91,1242,1261,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa27_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(25, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(26, 0L, 0L, active2);', '      return 27;', '   }', '   switch(curChar)', '   {', '      case 110:', '         if ((active2 & 0x20L) != 0L) { ', '            return jjStopAtPos(27, 133); } ', '         break;', '      default :', '         break;', '   }', '   return jjStartNfa_0(26, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa27_0': 1, 'long': 2, 'TOKEN_VARIABLE': 21, 'if': 2, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjStopAtPos': 1, 'break': 2, 'default': 1}",CodeBlock88,ParserTokenManager.java,0.8333333333333334,0.75,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
139,CodeBlock91,1242,1261,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa27_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(25, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(26, 0L, 0L, active2);', '      return 27;', '   }', '   switch(curChar)', '   {', '      case 110:', '         if ((active2 & 0x20L) != 0L) { ', '            return jjStopAtPos(27, 133); } ', '         break;', '      default :', '         break;', '   }', '   return jjStartNfa_0(26, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa27_0': 1, 'long': 2, 'TOKEN_VARIABLE': 21, 'if': 2, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjStopAtPos': 1, 'break': 2, 'default': 1}",CodeBlock89,ParserTokenManager.java,0.8333333333333334,0.75,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
140,CodeBlock91,1242,1261,ParserTokenManager.java,"['private final int jjMoveStringLiteralDfa27_0(long old2, long active2)', '{', '   if (((active2 &= old2)) == 0L) { ', '      return jjStartNfa_0(25, 0L, 0L, old2);  } ', '   try { curChar = input_stream.readChar(); }', '   catch(java.io.IOException e) {', '      jjStopStringLiteralDfa_0(26, 0L, 0L, active2);', '      return 27;', '   }', '   switch(curChar)', '   {', '      case 110:', '         if ((active2 & 0x20L) != 0L) { ', '            return jjStopAtPos(27, 133); } ', '         break;', '      default :', '         break;', '   }', '   return jjStartNfa_0(26, 0L, 0L, active2);', '}']","{'private': 1, 'final': 1, 'int': 1, 'jjMoveStringLiteralDfa27_0': 1, 'long': 2, 'TOKEN_VARIABLE': 21, 'if': 2, 'return': 4, 'jjStartNfa_0': 2, 'INTEGER_LITERAL': 7, 'try': 1, 'readChar': 1, 'catch': 1, 'jjStopStringLiteralDfa_0': 1, 'switch': 1, 'case': 1, 'jjStopAtPos': 1, 'break': 2, 'default': 1}",CodeBlock90,ParserTokenManager.java,0.8679245283018868,0.75,1.0,2099,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
141,CodeBlock107,53,68,ReflectManager.java,"['public static ReflectManager getReflectManager() ', 'throws Unavailable', '{', 'if ( rfm == null ) ', '{', 'Class clas;', 'try {', 'clas = Class.forName( ""org.gjt.sp.jedit.bsh.reflect.ReflectManagerImpl"" );', 'rfm = (ReflectManager)clas.newInstance();', '} catch ( Exception e ) {', 'throw new Unavailable(""Reflect Manager unavailable: ""+e);', '}', '}', '', 'return rfm;', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 13, 'getReflectManager': 1, 'throws': 1, 'if': 1, 'try': 1, 'forName': 1, 'STRING_LITERAL': 2, 'newInstance': 1, 'catch': 1, 'throw': 1, 'new': 1, 'Unavailable': 1, 'INTEGER_LITERAL': 1, 'return': 1}",CodeBlock41,ClassGenerator.java,0.9,0.6,1.0,27,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
142,CodeBlock119,91,101,ByteVector.java,"['  public ByteVector put11 (final int b1, final int b2) {', '    int length = this.length;', '    if (length + 2 > data.length) {', '      enlarge(2);', '    }', '    byte[] data = this.data;', '    data[length++] = (byte)b1;', '    data[length++] = (byte)b2;', '    this.length = length;', '    return this;', '  }']","{'public': 1, 'TOKEN_VARIABLE': 17, 'put11': 1, 'final': 2, 'int': 3, 'if': 1, 'INTEGER_LITERAL': 7, 'enlarge': 1, 'byte': 3, 'return': 1, 'this': 1}",CodeBlock120,ByteVector.java,0.85,0.6666666666666666,1.0,144,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
143,CodeBlock120,111,121,ByteVector.java,"['  public ByteVector put2 (final int s) {', '    int length = this.length;', '    if (length + 2 > data.length) {', '      enlarge(2);', '    }', '    byte[] data = this.data;', '    data[length++] = (byte)(s >>> 8);', '    data[length++] = (byte)s;', '    this.length = length;', '    return this;', '  }']","{'public': 1, 'TOKEN_VARIABLE': 16, 'put2': 1, 'final': 1, 'int': 2, 'if': 1, 'INTEGER_LITERAL': 8, 'enlarge': 1, 'byte': 3, 'return': 1, 'this': 1}",CodeBlock119,ByteVector.java,0.85,0.6666666666666666,1.0,144,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
144,CodeBlock142,37,41,JEditRichText.java,"['public JEditRichText(String text, String mode)', '{', 'this.text = text;', 'this.mode = mode;', '}']","{'public': 1, 'JEditRichText': 1, 'String': 2, 'TOKEN_VARIABLE': 6}",CodeBlock145,RichTextTransferable.java,0.8181818181818182,1.0,1.0,26,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
145,CodeBlock145,40,44,RichTextTransferable.java,"['public RichTextTransferable(String text, String mode)', '{', 'this.text = text;', 'this.mode = mode;', '}']","{'public': 1, 'RichTextTransferable': 1, 'String': 2, 'TOKEN_VARIABLE': 6}",CodeBlock142,JEditRichText.java,0.8181818181818182,1.0,1.0,30,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
146,CodeBlock147,53,57,TransferHandler.java,"['public void registerTransferableService(JEditTransferableService transferableService)', '{', 'if (!services.contains(transferableService)) { ', 'services.add(transferableService); } ', '}']","{'public': 1, 'void': 1, 'registerTransferableService': 1, 'TOKEN_VARIABLE': 4, 'if': 1, 'contains': 1, 'add': 1}",CodeBlock240,TaskManager.java,0.8181818181818182,1.0,1.0,44,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
147,CodeBlock147,53,57,TransferHandler.java,"['public void registerTransferableService(JEditTransferableService transferableService)', '{', 'if (!services.contains(transferableService)) { ', 'services.add(transferableService); } ', '}']","{'public': 1, 'void': 1, 'registerTransferableService': 1, 'TOKEN_VARIABLE': 4, 'if': 1, 'contains': 1, 'add': 1}",CodeBlock241,TaskManager.java,0.6666666666666666,1.0,1.0,44,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
148,CodeBlock155,240,252,ExtendedGridLayoutConstraints.java,"['ExtendedGridLayoutConstraints getColspanPlaceholder(boolean forUsage)', '{', 'if (1 == colspan)', '{', 'return null;', '}', 'ExtendedGridLayoutConstraints result = new ExtendedGridLayoutConstraints(row,col+1,colspan==REMAINDER ? REMAINDER : colspan-1,rowspan,component,true,null == mainConstraints ? this : mainConstraints);', 'if (forUsage && (result.mainConstraints.row == row))', '{', 'result.mainConstraints.effectiveColspan++;', '}', 'return result;', '}']","{'TOKEN_VARIABLE': 23, 'getColspanPlaceholder': 1, 'boolean': 1, 'if': 2, 'INTEGER_LITERAL': 7, 'return': 2, 'new': 1, 'ExtendedGridLayoutConstraints': 1, 'this': 1}",CodeBlock156,ExtendedGridLayoutConstraints.java,0.95,1.0,1.0,154,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
149,CodeBlock156,264,276,ExtendedGridLayoutConstraints.java,"['ExtendedGridLayoutConstraints getRowspanPlaceholder(boolean forUsage)', '{', 'if (1 == rowspan)', '{', 'return null;', '}', 'ExtendedGridLayoutConstraints result = new ExtendedGridLayoutConstraints(row+1,col,colspan,rowspan==REMAINDER ? REMAINDER : rowspan-1,component,true,null == mainConstraints ? this : mainConstraints);', 'if (forUsage && (result.mainConstraints.col == col))', '{', 'result.mainConstraints.effectiveRowspan++;', '}', 'return result;', '}']","{'TOKEN_VARIABLE': 23, 'getRowspanPlaceholder': 1, 'boolean': 1, 'if': 2, 'INTEGER_LITERAL': 7, 'return': 2, 'new': 1, 'ExtendedGridLayoutConstraints': 1, 'this': 1}",CodeBlock155,ExtendedGridLayoutConstraints.java,0.95,1.0,1.0,154,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
150,CodeBlock166,22,41,HelpViewerInterface.java,"['public void gotoURL(String url, boolean addToHistory, int scrollPos);', '', 'public String getBaseURL();', '', 'public void addPropertyChangeListener(PropertyChangeListener l);', '', '', '', '', 'public void dispose();', '', '', '', 'public Component getComponent();', 'public String getShortURL();', '', 'public void queueTOCReload();', 'public void setTitle(String newTitle);', '}', '']","{'public': 8, 'void': 5, 'gotoURL': 1, 'String': 4, 'TOKEN_VARIABLE': 7, 'boolean': 1, 'int': 1, 'getBaseURL': 1, 'addPropertyChangeListener': 1, 'dispose': 1, 'getComponent': 1, 'getShortURL': 1, 'queueTOCReload': 1, 'setTitle': 1}",CodeBlock167,HelpViewerInterface.java,0.7352941176470589,0.75,0.8,14,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
151,CodeBlock167,24,41,HelpViewerInterface.java,"['public String getBaseURL();', '', 'public void addPropertyChangeListener(PropertyChangeListener l);', '', '', '', '', 'public void dispose();', '', '', '', 'public Component getComponent();', 'public String getShortURL();', '', 'public void queueTOCReload();', 'public void setTitle(String newTitle);', '}', '']","{'public': 7, 'String': 3, 'getBaseURL': 1, 'void': 4, 'addPropertyChangeListener': 1, 'TOKEN_VARIABLE': 4, 'dispose': 1, 'getComponent': 1, 'getShortURL': 1, 'queueTOCReload': 1, 'setTitle': 1}",CodeBlock166,HelpViewerInterface.java,0.7352941176470589,0.75,0.8,14,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
152,CodeBlock167,24,41,HelpViewerInterface.java,"['public String getBaseURL();', '', 'public void addPropertyChangeListener(PropertyChangeListener l);', '', '', '', '', 'public void dispose();', '', '', '', 'public Component getComponent();', 'public String getShortURL();', '', 'public void queueTOCReload();', 'public void setTitle(String newTitle);', '}', '']","{'public': 7, 'String': 3, 'getBaseURL': 1, 'void': 4, 'addPropertyChangeListener': 1, 'TOKEN_VARIABLE': 4, 'dispose': 1, 'getComponent': 1, 'getShortURL': 1, 'queueTOCReload': 1, 'setTitle': 1}",CodeBlock168,HelpViewerInterface.java,0.88,1.0,1.0,14,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
153,CodeBlock167,24,41,HelpViewerInterface.java,"['public String getBaseURL();', '', 'public void addPropertyChangeListener(PropertyChangeListener l);', '', '', '', '', 'public void dispose();', '', '', '', 'public Component getComponent();', 'public String getShortURL();', '', 'public void queueTOCReload();', 'public void setTitle(String newTitle);', '}', '']","{'public': 7, 'String': 3, 'getBaseURL': 1, 'void': 4, 'addPropertyChangeListener': 1, 'TOKEN_VARIABLE': 4, 'dispose': 1, 'getComponent': 1, 'getShortURL': 1, 'queueTOCReload': 1, 'setTitle': 1}",CodeBlock169,HelpViewerInterface.java,0.68,0.6666666666666666,0.75,14,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
154,CodeBlock168,26,41,HelpViewerInterface.java,"['public void addPropertyChangeListener(PropertyChangeListener l);', '', '', '', '', 'public void dispose();', '', '', '', 'public Component getComponent();', 'public String getShortURL();', '', 'public void queueTOCReload();', 'public void setTitle(String newTitle);', '}', '']","{'public': 6, 'void': 4, 'addPropertyChangeListener': 1, 'TOKEN_VARIABLE': 4, 'dispose': 1, 'getComponent': 1, 'String': 2, 'getShortURL': 1, 'queueTOCReload': 1, 'setTitle': 1}",CodeBlock167,HelpViewerInterface.java,0.88,1.0,1.0,14,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
155,CodeBlock168,26,41,HelpViewerInterface.java,"['public void addPropertyChangeListener(PropertyChangeListener l);', '', '', '', '', 'public void dispose();', '', '', '', 'public Component getComponent();', 'public String getShortURL();', '', 'public void queueTOCReload();', 'public void setTitle(String newTitle);', '}', '']","{'public': 6, 'void': 4, 'addPropertyChangeListener': 1, 'TOKEN_VARIABLE': 4, 'dispose': 1, 'getComponent': 1, 'String': 2, 'getShortURL': 1, 'queueTOCReload': 1, 'setTitle': 1}",CodeBlock169,HelpViewerInterface.java,0.7727272727272727,0.6666666666666666,0.75,14,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
156,CodeBlock169,31,41,HelpViewerInterface.java,"['public void dispose();', '', '', '', 'public Component getComponent();', 'public String getShortURL();', '', 'public void queueTOCReload();', 'public void setTitle(String newTitle);', '}', '']","{'public': 5, 'void': 3, 'dispose': 1, 'TOKEN_VARIABLE': 2, 'getComponent': 1, 'String': 2, 'getShortURL': 1, 'queueTOCReload': 1, 'setTitle': 1}",CodeBlock167,HelpViewerInterface.java,0.68,0.6666666666666666,0.75,14,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
157,CodeBlock169,31,41,HelpViewerInterface.java,"['public void dispose();', '', '', '', 'public Component getComponent();', 'public String getShortURL();', '', 'public void queueTOCReload();', 'public void setTitle(String newTitle);', '}', '']","{'public': 5, 'void': 3, 'dispose': 1, 'TOKEN_VARIABLE': 2, 'getComponent': 1, 'String': 2, 'getShortURL': 1, 'queueTOCReload': 1, 'setTitle': 1}",CodeBlock168,HelpViewerInterface.java,0.7727272727272727,0.6666666666666666,0.75,14,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
158,CodeBlock169,31,41,HelpViewerInterface.java,"['public void dispose();', '', '', '', 'public Component getComponent();', 'public String getShortURL();', '', 'public void queueTOCReload();', 'public void setTitle(String newTitle);', '}', '']","{'public': 5, 'void': 3, 'dispose': 1, 'TOKEN_VARIABLE': 2, 'getComponent': 1, 'String': 2, 'getShortURL': 1, 'queueTOCReload': 1, 'setTitle': 1}",CodeBlock170,HelpViewerInterface.java,0.8235294117647058,1.0,1.0,14,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
159,CodeBlock170,35,41,HelpViewerInterface.java,"['public Component getComponent();', 'public String getShortURL();', '', 'public void queueTOCReload();', 'public void setTitle(String newTitle);', '}', '']","{'public': 4, 'TOKEN_VARIABLE': 2, 'getComponent': 1, 'String': 2, 'getShortURL': 1, 'void': 2, 'queueTOCReload': 1, 'setTitle': 1}",CodeBlock169,HelpViewerInterface.java,0.8235294117647058,1.0,1.0,14,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
160,CodeBlock174,58,62,IndentAction.java,"['public int calculateIndent(JEditBuffer buffer, int line, int oldIndent,', 'int newIndent)', '{', 'return newIndent;', '}']","{'public': 1, 'int': 4, 'calculateIndent': 1, 'TOKEN_VARIABLE': 6, 'return': 1}",CodeBlock175,IndentAction.java,1.0,1.0,1.0,126,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
161,CodeBlock175,76,80,IndentAction.java,"['public int calculateIndent(JEditBuffer buffer, int line, int oldIndent,', 'int newIndent)', '{', 'return oldIndent;', '}']","{'public': 1, 'int': 4, 'calculateIndent': 1, 'TOKEN_VARIABLE': 6, 'return': 1}",CodeBlock174,IndentAction.java,1.0,1.0,1.0,126,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
162,CodeBlock176,102,106,IndentAction.java,"['public int calculateIndent(JEditBuffer buffer, int line, int oldIndent,', 'int newIndent)', '{', 'return newIndent + buffer.getIndentSize() * amount;', '}']","{'public': 1, 'int': 4, 'calculateIndent': 1, 'TOKEN_VARIABLE': 7, 'return': 1, 'INTEGER_LITERAL': 1, 'getIndentSize': 1}",CodeBlock178,IndentAction.java,0.9375,0.75,1.0,126,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
163,CodeBlock178,124,128,IndentAction.java,"['public int calculateIndent(JEditBuffer buffer, int line, int oldIndent,', 'int newIndent)', '{', 'return newIndent - buffer.getIndentSize();', '}']","{'public': 1, 'int': 4, 'calculateIndent': 1, 'TOKEN_VARIABLE': 6, 'return': 1, 'INTEGER_LITERAL': 1, 'getIndentSize': 1}",CodeBlock176,IndentAction.java,0.9375,0.75,1.0,126,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
164,CodeBlock179,148,152,IndentAction.java,"['public int calculateIndent(JEditBuffer buffer, int line, int oldIndent,', 'int newIndent)', '{', 'return offset;', '}']","{'public': 1, 'int': 4, 'calculateIndent': 1, 'TOKEN_VARIABLE': 6, 'return': 1}",CodeBlock180,IndentAction.java,0.8666666666666667,1.0,1.0,126,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
165,CodeBlock180,173,177,IndentAction.java,"['public int calculateIndent(JEditBuffer buffer, int line, int oldIndent,', '     int newIndent)', '{', 'return openParensColumn + 1;', '}']","{'public': 1, 'int': 4, 'calculateIndent': 1, 'TOKEN_VARIABLE': 6, 'return': 1, 'INTEGER_LITERAL': 2}",CodeBlock179,IndentAction.java,0.8666666666666667,1.0,1.0,126,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
166,CodeBlock183,29,36,IndentRuleFactory.java,"['public static IndentRule indentNextLines(String regexp)', 'throws PatternSyntaxException', '{', 'return new RegexpIndentRule(regexp,', 'null,', 'new IndentAction.Increase(),', 'null,false);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 7, 'indentNextLines': 1, 'String': 1, 'throws': 1, 'return': 1, 'new': 2, 'RegexpIndentRule': 1, 'Increase': 1}",CodeBlock184,IndentRuleFactory.java,0.75,0.6666666666666666,0.6666666666666666,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
167,CodeBlock183,29,36,IndentRuleFactory.java,"['public static IndentRule indentNextLines(String regexp)', 'throws PatternSyntaxException', '{', 'return new RegexpIndentRule(regexp,', 'null,', 'new IndentAction.Increase(),', 'null,false);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 7, 'indentNextLines': 1, 'String': 1, 'throws': 1, 'return': 1, 'new': 2, 'RegexpIndentRule': 1, 'Increase': 1}",CodeBlock185,IndentRuleFactory.java,0.75,0.6666666666666666,0.6666666666666666,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
168,CodeBlock183,29,36,IndentRuleFactory.java,"['public static IndentRule indentNextLines(String regexp)', 'throws PatternSyntaxException', '{', 'return new RegexpIndentRule(regexp,', 'null,', 'new IndentAction.Increase(),', 'null,false);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 7, 'indentNextLines': 1, 'String': 1, 'throws': 1, 'return': 1, 'new': 2, 'RegexpIndentRule': 1, 'Increase': 1}",CodeBlock186,IndentRuleFactory.java,0.7894736842105263,1.0,1.0,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
169,CodeBlock184,38,45,IndentRuleFactory.java,"['public static IndentRule indentNextLine(String regexp)', 'throws PatternSyntaxException', '{', 'return new RegexpIndentRule(regexp,', 'new IndentAction.Decrease(),', 'new IndentAction.Increase(),', 'null,true);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 6, 'indentNextLine': 1, 'String': 1, 'throws': 1, 'return': 1, 'new': 3, 'RegexpIndentRule': 1, 'Decrease': 1, 'Increase': 1}",CodeBlock183,IndentRuleFactory.java,0.75,0.6666666666666666,0.6666666666666666,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
170,CodeBlock184,38,45,IndentRuleFactory.java,"['public static IndentRule indentNextLine(String regexp)', 'throws PatternSyntaxException', '{', 'return new RegexpIndentRule(regexp,', 'new IndentAction.Decrease(),', 'new IndentAction.Increase(),', 'null,true);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 6, 'indentNextLine': 1, 'String': 1, 'throws': 1, 'return': 1, 'new': 3, 'RegexpIndentRule': 1, 'Decrease': 1, 'Increase': 1}",CodeBlock185,IndentRuleFactory.java,0.8947368421052632,1.0,1.0,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
171,CodeBlock184,38,45,IndentRuleFactory.java,"['public static IndentRule indentNextLine(String regexp)', 'throws PatternSyntaxException', '{', 'return new RegexpIndentRule(regexp,', 'new IndentAction.Decrease(),', 'new IndentAction.Increase(),', 'null,true);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 6, 'indentNextLine': 1, 'String': 1, 'throws': 1, 'return': 1, 'new': 3, 'RegexpIndentRule': 1, 'Decrease': 1, 'Increase': 1}",CodeBlock186,IndentRuleFactory.java,0.75,0.6666666666666666,0.6666666666666666,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
172,CodeBlock185,47,55,IndentRuleFactory.java,"['public static IndentRule unindentThisLine(String regexp)', 'throws PatternSyntaxException', '{', 'return new RegexpIndentRule(regexp,', 'null,', 'new IndentAction.Increase(),', 'new IndentAction.Decrease(),', 'false);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 6, 'unindentThisLine': 1, 'String': 1, 'throws': 1, 'return': 1, 'new': 3, 'RegexpIndentRule': 1, 'Increase': 1, 'Decrease': 1}",CodeBlock183,IndentRuleFactory.java,0.75,0.6666666666666666,0.6666666666666666,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
173,CodeBlock185,47,55,IndentRuleFactory.java,"['public static IndentRule unindentThisLine(String regexp)', 'throws PatternSyntaxException', '{', 'return new RegexpIndentRule(regexp,', 'null,', 'new IndentAction.Increase(),', 'new IndentAction.Decrease(),', 'false);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 6, 'unindentThisLine': 1, 'String': 1, 'throws': 1, 'return': 1, 'new': 3, 'RegexpIndentRule': 1, 'Increase': 1, 'Decrease': 1}",CodeBlock184,IndentRuleFactory.java,0.8947368421052632,1.0,1.0,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
174,CodeBlock185,47,55,IndentRuleFactory.java,"['public static IndentRule unindentThisLine(String regexp)', 'throws PatternSyntaxException', '{', 'return new RegexpIndentRule(regexp,', 'null,', 'new IndentAction.Increase(),', 'new IndentAction.Decrease(),', 'false);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 6, 'unindentThisLine': 1, 'String': 1, 'throws': 1, 'return': 1, 'new': 3, 'RegexpIndentRule': 1, 'Increase': 1, 'Decrease': 1}",CodeBlock186,IndentRuleFactory.java,0.75,0.6666666666666666,0.6666666666666666,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
175,CodeBlock186,57,65,IndentRuleFactory.java,"['public static IndentRule unindentNextLines(String regexp)', 'throws PatternSyntaxException', '{', 'return new RegexpIndentRule(regexp,', 'null,', 'new IndentAction.Decrease(),', 'null,', 'false);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 7, 'unindentNextLines': 1, 'String': 1, 'throws': 1, 'return': 1, 'new': 2, 'RegexpIndentRule': 1, 'Decrease': 1}",CodeBlock183,IndentRuleFactory.java,0.7894736842105263,1.0,1.0,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
176,CodeBlock186,57,65,IndentRuleFactory.java,"['public static IndentRule unindentNextLines(String regexp)', 'throws PatternSyntaxException', '{', 'return new RegexpIndentRule(regexp,', 'null,', 'new IndentAction.Decrease(),', 'null,', 'false);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 7, 'unindentNextLines': 1, 'String': 1, 'throws': 1, 'return': 1, 'new': 2, 'RegexpIndentRule': 1, 'Decrease': 1}",CodeBlock184,IndentRuleFactory.java,0.75,0.6666666666666666,0.6666666666666666,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
177,CodeBlock186,57,65,IndentRuleFactory.java,"['public static IndentRule unindentNextLines(String regexp)', 'throws PatternSyntaxException', '{', 'return new RegexpIndentRule(regexp,', 'null,', 'new IndentAction.Decrease(),', 'null,', 'false);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 7, 'unindentNextLines': 1, 'String': 1, 'throws': 1, 'return': 1, 'new': 2, 'RegexpIndentRule': 1, 'Decrease': 1}",CodeBlock185,IndentRuleFactory.java,0.75,0.6666666666666666,0.6666666666666666,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
178,CodeBlock187,67,71,IndentRuleFactory.java,"['public static IndentRule indentOpenBracket(char bracket)', 'throws PatternSyntaxException', '{', 'return new OpenBracketIndentRule(bracket,true);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 5, 'indentOpenBracket': 1, 'char': 1, 'throws': 1, 'return': 1, 'new': 1, 'OpenBracketIndentRule': 1}",CodeBlock188,IndentRuleFactory.java,0.7333333333333333,1.0,1.0,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
179,CodeBlock187,67,71,IndentRuleFactory.java,"['public static IndentRule indentOpenBracket(char bracket)', 'throws PatternSyntaxException', '{', 'return new OpenBracketIndentRule(bracket,true);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 5, 'indentOpenBracket': 1, 'char': 1, 'throws': 1, 'return': 1, 'new': 1, 'OpenBracketIndentRule': 1}",CodeBlock189,IndentRuleFactory.java,0.8571428571428571,1.0,1.0,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
180,CodeBlock187,67,71,IndentRuleFactory.java,"['public static IndentRule indentOpenBracket(char bracket)', 'throws PatternSyntaxException', '{', 'return new OpenBracketIndentRule(bracket,true);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 5, 'indentOpenBracket': 1, 'char': 1, 'throws': 1, 'return': 1, 'new': 1, 'OpenBracketIndentRule': 1}",CodeBlock190,IndentRuleFactory.java,0.7333333333333333,1.0,1.0,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
181,CodeBlock188,73,77,IndentRuleFactory.java,"['public static IndentRule indentCloseBracket(char bracket)', 'throws PatternSyntaxException', '{', 'return new CloseBracketIndentRule(bracket,true);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 5, 'indentCloseBracket': 1, 'char': 1, 'throws': 1, 'return': 1, 'new': 1, 'CloseBracketIndentRule': 1}",CodeBlock187,IndentRuleFactory.java,0.7333333333333333,1.0,1.0,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
182,CodeBlock188,73,77,IndentRuleFactory.java,"['public static IndentRule indentCloseBracket(char bracket)', 'throws PatternSyntaxException', '{', 'return new CloseBracketIndentRule(bracket,true);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 5, 'indentCloseBracket': 1, 'char': 1, 'throws': 1, 'return': 1, 'new': 1, 'CloseBracketIndentRule': 1}",CodeBlock189,IndentRuleFactory.java,0.7333333333333333,1.0,1.0,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
183,CodeBlock188,73,77,IndentRuleFactory.java,"['public static IndentRule indentCloseBracket(char bracket)', 'throws PatternSyntaxException', '{', 'return new CloseBracketIndentRule(bracket,true);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 5, 'indentCloseBracket': 1, 'char': 1, 'throws': 1, 'return': 1, 'new': 1, 'CloseBracketIndentRule': 1}",CodeBlock190,IndentRuleFactory.java,0.8571428571428571,1.0,1.0,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
184,CodeBlock189,79,83,IndentRuleFactory.java,"['public static IndentRule unalignedOpenBracket(char bracket)', 'throws PatternSyntaxException', '{', 'return new OpenBracketIndentRule(bracket,false);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 5, 'unalignedOpenBracket': 1, 'char': 1, 'throws': 1, 'return': 1, 'new': 1, 'OpenBracketIndentRule': 1}",CodeBlock187,IndentRuleFactory.java,0.8571428571428571,1.0,1.0,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
185,CodeBlock189,79,83,IndentRuleFactory.java,"['public static IndentRule unalignedOpenBracket(char bracket)', 'throws PatternSyntaxException', '{', 'return new OpenBracketIndentRule(bracket,false);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 5, 'unalignedOpenBracket': 1, 'char': 1, 'throws': 1, 'return': 1, 'new': 1, 'OpenBracketIndentRule': 1}",CodeBlock188,IndentRuleFactory.java,0.7333333333333333,1.0,1.0,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
186,CodeBlock189,79,83,IndentRuleFactory.java,"['public static IndentRule unalignedOpenBracket(char bracket)', 'throws PatternSyntaxException', '{', 'return new OpenBracketIndentRule(bracket,false);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 5, 'unalignedOpenBracket': 1, 'char': 1, 'throws': 1, 'return': 1, 'new': 1, 'OpenBracketIndentRule': 1}",CodeBlock190,IndentRuleFactory.java,0.7333333333333333,1.0,1.0,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
187,CodeBlock190,85,89,IndentRuleFactory.java,"['public static IndentRule unalignedCloseBracket(char bracket)', 'throws PatternSyntaxException', '{', 'return new CloseBracketIndentRule(bracket,false);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 5, 'unalignedCloseBracket': 1, 'char': 1, 'throws': 1, 'return': 1, 'new': 1, 'CloseBracketIndentRule': 1}",CodeBlock187,IndentRuleFactory.java,0.7333333333333333,1.0,1.0,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
188,CodeBlock190,85,89,IndentRuleFactory.java,"['public static IndentRule unalignedCloseBracket(char bracket)', 'throws PatternSyntaxException', '{', 'return new CloseBracketIndentRule(bracket,false);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 5, 'unalignedCloseBracket': 1, 'char': 1, 'throws': 1, 'return': 1, 'new': 1, 'CloseBracketIndentRule': 1}",CodeBlock188,IndentRuleFactory.java,0.8571428571428571,1.0,1.0,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
189,CodeBlock190,85,89,IndentRuleFactory.java,"['public static IndentRule unalignedCloseBracket(char bracket)', 'throws PatternSyntaxException', '{', 'return new CloseBracketIndentRule(bracket,false);', '}']","{'public': 1, 'static': 1, 'TOKEN_VARIABLE': 5, 'unalignedCloseBracket': 1, 'char': 1, 'throws': 1, 'return': 1, 'new': 1, 'CloseBracketIndentRule': 1}",CodeBlock189,IndentRuleFactory.java,0.7333333333333333,1.0,1.0,59,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
190,CodeBlock240,81,87,TaskManager.java,"['public void addTaskListener(TaskListener listener)', '{', 'if (!listeners.contains(listener))', '{', 'listeners.add(listener);', '}', '}']","{'public': 1, 'void': 1, 'addTaskListener': 1, 'TOKEN_VARIABLE': 4, 'if': 1, 'contains': 1, 'add': 1}",CodeBlock147,TransferHandler.java,0.8181818181818182,1.0,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
191,CodeBlock240,81,87,TaskManager.java,"['public void addTaskListener(TaskListener listener)', '{', 'if (!listeners.contains(listener))', '{', 'listeners.add(listener);', '}', '}']","{'public': 1, 'void': 1, 'addTaskListener': 1, 'TOKEN_VARIABLE': 4, 'if': 1, 'contains': 1, 'add': 1}",CodeBlock241,TaskManager.java,0.6666666666666666,1.0,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
192,CodeBlock241,89,95,TaskManager.java,"['public void removeTaskListener(TaskListener listener)', '{', 'if (listeners.contains(listener))', '{', 'listeners.remove(listener);', '}', '}']","{'public': 1, 'void': 1, 'removeTaskListener': 1, 'TOKEN_VARIABLE': 4, 'if': 1, 'contains': 1, 'remove': 1}",CodeBlock147,TransferHandler.java,0.6666666666666666,1.0,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
193,CodeBlock241,89,95,TaskManager.java,"['public void removeTaskListener(TaskListener listener)', '{', 'if (listeners.contains(listener))', '{', 'listeners.remove(listener);', '}', '}']","{'public': 1, 'void': 1, 'removeTaskListener': 1, 'TOKEN_VARIABLE': 4, 'if': 1, 'contains': 1, 'remove': 1}",CodeBlock240,TaskManager.java,0.6666666666666666,1.0,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
194,CodeBlock242,97,106,TaskManager.java,"['void fireWaiting(Task task)', '{', 'tasks.add(task);', '', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.waiting(task);', '}', '}']","{'void': 1, 'fireWaiting': 1, 'TOKEN_VARIABLE': 11, 'add': 1, 'for': 1, 'waiting': 1}",CodeBlock243,TaskManager.java,0.6666666666666666,0.75,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
195,CodeBlock242,97,106,TaskManager.java,"['void fireWaiting(Task task)', '{', 'tasks.add(task);', '', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.waiting(task);', '}', '}']","{'void': 1, 'fireWaiting': 1, 'TOKEN_VARIABLE': 11, 'add': 1, 'for': 1, 'waiting': 1}",CodeBlock245,TaskManager.java,0.6666666666666666,0.75,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
196,CodeBlock242,97,106,TaskManager.java,"['void fireWaiting(Task task)', '{', 'tasks.add(task);', '', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.waiting(task);', '}', '}']","{'void': 1, 'fireWaiting': 1, 'TOKEN_VARIABLE': 11, 'add': 1, 'for': 1, 'waiting': 1}",CodeBlock246,TaskManager.java,0.6666666666666666,0.75,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
197,CodeBlock242,97,106,TaskManager.java,"['void fireWaiting(Task task)', '{', 'tasks.add(task);', '', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.waiting(task);', '}', '}']","{'void': 1, 'fireWaiting': 1, 'TOKEN_VARIABLE': 11, 'add': 1, 'for': 1, 'waiting': 1}",CodeBlock247,TaskManager.java,0.6666666666666666,0.75,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
198,CodeBlock243,108,115,TaskManager.java,"['void fireRunning(Task task)', '{', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.running(task);', '}', '}']","{'void': 1, 'fireRunning': 1, 'TOKEN_VARIABLE': 10, 'for': 1, 'running': 1}",CodeBlock242,TaskManager.java,0.6666666666666666,0.75,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
199,CodeBlock243,108,115,TaskManager.java,"['void fireRunning(Task task)', '{', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.running(task);', '}', '}']","{'void': 1, 'fireRunning': 1, 'TOKEN_VARIABLE': 10, 'for': 1, 'running': 1}",CodeBlock245,TaskManager.java,0.75,1.0,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
200,CodeBlock243,108,115,TaskManager.java,"['void fireRunning(Task task)', '{', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.running(task);', '}', '}']","{'void': 1, 'fireRunning': 1, 'TOKEN_VARIABLE': 10, 'for': 1, 'running': 1}",CodeBlock246,TaskManager.java,0.75,1.0,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
201,CodeBlock243,108,115,TaskManager.java,"['void fireRunning(Task task)', '{', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.running(task);', '}', '}']","{'void': 1, 'fireRunning': 1, 'TOKEN_VARIABLE': 10, 'for': 1, 'running': 1}",CodeBlock247,TaskManager.java,0.75,1.0,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
202,CodeBlock245,138,145,TaskManager.java,"['void fireStatusUpdated(Task task)', '{', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.statusUpdated(task);', '}', '}']","{'void': 1, 'fireStatusUpdated': 1, 'TOKEN_VARIABLE': 10, 'for': 1, 'statusUpdated': 1}",CodeBlock242,TaskManager.java,0.6666666666666666,0.75,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
203,CodeBlock245,138,145,TaskManager.java,"['void fireStatusUpdated(Task task)', '{', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.statusUpdated(task);', '}', '}']","{'void': 1, 'fireStatusUpdated': 1, 'TOKEN_VARIABLE': 10, 'for': 1, 'statusUpdated': 1}",CodeBlock243,TaskManager.java,0.75,1.0,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
204,CodeBlock245,138,145,TaskManager.java,"['void fireStatusUpdated(Task task)', '{', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.statusUpdated(task);', '}', '}']","{'void': 1, 'fireStatusUpdated': 1, 'TOKEN_VARIABLE': 10, 'for': 1, 'statusUpdated': 1}",CodeBlock246,TaskManager.java,0.75,1.0,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
205,CodeBlock245,138,145,TaskManager.java,"['void fireStatusUpdated(Task task)', '{', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.statusUpdated(task);', '}', '}']","{'void': 1, 'fireStatusUpdated': 1, 'TOKEN_VARIABLE': 10, 'for': 1, 'statusUpdated': 1}",CodeBlock247,TaskManager.java,0.75,1.0,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
206,CodeBlock246,147,154,TaskManager.java,"['void fireValueUpdated(Task task)', '{', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.valueUpdated(task);', '}', '}']","{'void': 1, 'fireValueUpdated': 1, 'TOKEN_VARIABLE': 10, 'for': 1, 'valueUpdated': 1}",CodeBlock242,TaskManager.java,0.6666666666666666,0.75,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
207,CodeBlock246,147,154,TaskManager.java,"['void fireValueUpdated(Task task)', '{', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.valueUpdated(task);', '}', '}']","{'void': 1, 'fireValueUpdated': 1, 'TOKEN_VARIABLE': 10, 'for': 1, 'valueUpdated': 1}",CodeBlock243,TaskManager.java,0.75,1.0,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
208,CodeBlock246,147,154,TaskManager.java,"['void fireValueUpdated(Task task)', '{', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.valueUpdated(task);', '}', '}']","{'void': 1, 'fireValueUpdated': 1, 'TOKEN_VARIABLE': 10, 'for': 1, 'valueUpdated': 1}",CodeBlock245,TaskManager.java,0.75,1.0,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
209,CodeBlock246,147,154,TaskManager.java,"['void fireValueUpdated(Task task)', '{', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.valueUpdated(task);', '}', '}']","{'void': 1, 'fireValueUpdated': 1, 'TOKEN_VARIABLE': 10, 'for': 1, 'valueUpdated': 1}",CodeBlock247,TaskManager.java,0.75,1.0,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
210,CodeBlock247,156,163,TaskManager.java,"['void fireMaximumUpdated(Task task)', '{', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.maximumUpdated(task);', '}', '}']","{'void': 1, 'fireMaximumUpdated': 1, 'TOKEN_VARIABLE': 10, 'for': 1, 'maximumUpdated': 1}",CodeBlock242,TaskManager.java,0.6666666666666666,0.75,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
211,CodeBlock247,156,163,TaskManager.java,"['void fireMaximumUpdated(Task task)', '{', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.maximumUpdated(task);', '}', '}']","{'void': 1, 'fireMaximumUpdated': 1, 'TOKEN_VARIABLE': 10, 'for': 1, 'maximumUpdated': 1}",CodeBlock243,TaskManager.java,0.75,1.0,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
212,CodeBlock247,156,163,TaskManager.java,"['void fireMaximumUpdated(Task task)', '{', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.maximumUpdated(task);', '}', '}']","{'void': 1, 'fireMaximumUpdated': 1, 'TOKEN_VARIABLE': 10, 'for': 1, 'maximumUpdated': 1}",CodeBlock245,TaskManager.java,0.75,1.0,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
213,CodeBlock247,156,163,TaskManager.java,"['void fireMaximumUpdated(Task task)', '{', 'List<TaskListener> listeners = this.listeners;', 'for (TaskListener listener : listeners)', '{', 'listener.maximumUpdated(task);', '}', '}']","{'void': 1, 'fireMaximumUpdated': 1, 'TOKEN_VARIABLE': 10, 'for': 1, 'maximumUpdated': 1}",CodeBlock246,TaskManager.java,0.75,1.0,1.0,172,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
214,CodeBlock254,37,90,KeymapManager.java,"['Keymap getKeymap();', '', 'void reload();', '', 'Collection<String> getKeymapNames();', '', '', '', '', '', '', '', 'Keymap getKeymap(String name);', '', '', '', '', '', '', 'State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 15, 'getKeymap': 2, 'void': 3, 'reload': 1, 'String': 7, 'getKeymapNames': 1, 'getKeymapState': 1, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock255,KeymapManager.java,0.9428571428571428,0.8,0.75,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
215,CodeBlock254,37,90,KeymapManager.java,"['Keymap getKeymap();', '', 'void reload();', '', 'Collection<String> getKeymapNames();', '', '', '', '', '', '', '', 'Keymap getKeymap(String name);', '', '', '', '', '', '', 'State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 15, 'getKeymap': 2, 'void': 3, 'reload': 1, 'String': 7, 'getKeymapNames': 1, 'getKeymapState': 1, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock256,KeymapManager.java,0.8857142857142857,0.8,0.75,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
216,CodeBlock254,37,90,KeymapManager.java,"['Keymap getKeymap();', '', 'void reload();', '', 'Collection<String> getKeymapNames();', '', '', '', '', '', '', '', 'Keymap getKeymap(String name);', '', '', '', '', '', '', 'State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 15, 'getKeymap': 2, 'void': 3, 'reload': 1, 'String': 7, 'getKeymapNames': 1, 'getKeymapState': 1, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock257,KeymapManager.java,0.8,0.8,0.75,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
217,CodeBlock254,37,90,KeymapManager.java,"['Keymap getKeymap();', '', 'void reload();', '', 'Collection<String> getKeymapNames();', '', '', '', '', '', '', '', 'Keymap getKeymap(String name);', '', '', '', '', '', '', 'State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 15, 'getKeymap': 2, 'void': 3, 'reload': 1, 'String': 7, 'getKeymapNames': 1, 'getKeymapState': 1, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock258,KeymapManager.java,0.6857142857142857,0.6,0.75,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
218,CodeBlock255,39,90,KeymapManager.java,"['void reload();', '', 'Collection<String> getKeymapNames();', '', '', '', '', '', '', '', 'Keymap getKeymap(String name);', '', '', '', '', '', '', 'State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'void': 3, 'reload': 1, 'TOKEN_VARIABLE': 14, 'String': 7, 'getKeymapNames': 1, 'getKeymap': 1, 'getKeymapState': 1, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock254,KeymapManager.java,0.9428571428571428,0.8,0.75,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
219,CodeBlock255,39,90,KeymapManager.java,"['void reload();', '', 'Collection<String> getKeymapNames();', '', '', '', '', '', '', '', 'Keymap getKeymap(String name);', '', '', '', '', '', '', 'State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'void': 3, 'reload': 1, 'TOKEN_VARIABLE': 14, 'String': 7, 'getKeymapNames': 1, 'getKeymap': 1, 'getKeymapState': 1, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock256,KeymapManager.java,0.9393939393939394,1.0,1.0,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
220,CodeBlock255,39,90,KeymapManager.java,"['void reload();', '', 'Collection<String> getKeymapNames();', '', '', '', '', '', '', '', 'Keymap getKeymap(String name);', '', '', '', '', '', '', 'State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'void': 3, 'reload': 1, 'TOKEN_VARIABLE': 14, 'String': 7, 'getKeymapNames': 1, 'getKeymap': 1, 'getKeymapState': 1, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock257,KeymapManager.java,0.8484848484848485,1.0,0.75,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
221,CodeBlock255,39,90,KeymapManager.java,"['void reload();', '', 'Collection<String> getKeymapNames();', '', '', '', '', '', '', '', 'Keymap getKeymap(String name);', '', '', '', '', '', '', 'State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'void': 3, 'reload': 1, 'TOKEN_VARIABLE': 14, 'String': 7, 'getKeymapNames': 1, 'getKeymap': 1, 'getKeymapState': 1, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock258,KeymapManager.java,0.7272727272727273,0.6,0.75,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
222,CodeBlock256,41,90,KeymapManager.java,"['Collection<String> getKeymapNames();', '', '', '', '', '', '', '', 'Keymap getKeymap(String name);', '', '', '', '', '', '', 'State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 14, 'String': 7, 'getKeymapNames': 1, 'getKeymap': 1, 'getKeymapState': 1, 'void': 2, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock254,KeymapManager.java,0.8857142857142857,0.8,0.75,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
223,CodeBlock256,41,90,KeymapManager.java,"['Collection<String> getKeymapNames();', '', '', '', '', '', '', '', 'Keymap getKeymap(String name);', '', '', '', '', '', '', 'State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 14, 'String': 7, 'getKeymapNames': 1, 'getKeymap': 1, 'getKeymapState': 1, 'void': 2, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock255,KeymapManager.java,0.9393939393939394,1.0,1.0,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
224,CodeBlock256,41,90,KeymapManager.java,"['Collection<String> getKeymapNames();', '', '', '', '', '', '', '', 'Keymap getKeymap(String name);', '', '', '', '', '', '', 'State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 14, 'String': 7, 'getKeymapNames': 1, 'getKeymap': 1, 'getKeymapState': 1, 'void': 2, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock257,KeymapManager.java,0.9032258064516129,1.0,0.75,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
225,CodeBlock256,41,90,KeymapManager.java,"['Collection<String> getKeymapNames();', '', '', '', '', '', '', '', 'Keymap getKeymap(String name);', '', '', '', '', '', '', 'State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 14, 'String': 7, 'getKeymapNames': 1, 'getKeymap': 1, 'getKeymapState': 1, 'void': 2, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock258,KeymapManager.java,0.7741935483870968,0.6,0.75,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
226,CodeBlock257,49,90,KeymapManager.java,"['Keymap getKeymap(String name);', '', '', '', '', '', '', 'State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 13, 'getKeymap': 1, 'String': 6, 'getKeymapState': 1, 'void': 2, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock254,KeymapManager.java,0.8,0.8,0.75,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
227,CodeBlock257,49,90,KeymapManager.java,"['Keymap getKeymap(String name);', '', '', '', '', '', '', 'State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 13, 'getKeymap': 1, 'String': 6, 'getKeymapState': 1, 'void': 2, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock255,KeymapManager.java,0.8484848484848485,1.0,0.75,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
228,CodeBlock257,49,90,KeymapManager.java,"['Keymap getKeymap(String name);', '', '', '', '', '', '', 'State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 13, 'getKeymap': 1, 'String': 6, 'getKeymapState': 1, 'void': 2, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock256,KeymapManager.java,0.9032258064516129,1.0,0.75,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
229,CodeBlock257,49,90,KeymapManager.java,"['Keymap getKeymap(String name);', '', '', '', '', '', '', 'State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 13, 'getKeymap': 1, 'String': 6, 'getKeymapState': 1, 'void': 2, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock258,KeymapManager.java,0.8571428571428571,0.6,1.0,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
230,CodeBlock257,49,90,KeymapManager.java,"['Keymap getKeymap(String name);', '', '', '', '', '', '', 'State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 13, 'getKeymap': 1, 'String': 6, 'getKeymapState': 1, 'void': 2, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock259,KeymapManager.java,0.7142857142857143,0.6,0.6666666666666666,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
231,CodeBlock258,56,90,KeymapManager.java,"['State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 11, 'getKeymapState': 1, 'String': 5, 'void': 2, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock254,KeymapManager.java,0.6857142857142857,0.6,0.75,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
232,CodeBlock258,56,90,KeymapManager.java,"['State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 11, 'getKeymapState': 1, 'String': 5, 'void': 2, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock255,KeymapManager.java,0.7272727272727273,0.6,0.75,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
233,CodeBlock258,56,90,KeymapManager.java,"['State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 11, 'getKeymapState': 1, 'String': 5, 'void': 2, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock256,KeymapManager.java,0.7741935483870968,0.6,0.75,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
234,CodeBlock258,56,90,KeymapManager.java,"['State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 11, 'getKeymapState': 1, 'String': 5, 'void': 2, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock257,KeymapManager.java,0.8571428571428571,0.6,1.0,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
235,CodeBlock258,56,90,KeymapManager.java,"['State getKeymapState(String name);', '', '', '', '', '', 'void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'TOKEN_VARIABLE': 11, 'getKeymapState': 1, 'String': 5, 'void': 2, 'resetKeymap': 1, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock260,KeymapManager.java,0.6666666666666666,0.75,0.6666666666666666,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
236,CodeBlock259,62,90,KeymapManager.java,"['void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'void': 2, 'resetKeymap': 1, 'String': 4, 'TOKEN_VARIABLE': 9, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock257,KeymapManager.java,0.7142857142857143,0.6,0.6666666666666666,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
237,CodeBlock259,62,90,KeymapManager.java,"['void resetKeymap(String name);', '', '', '', '', '', 'void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'void': 2, 'resetKeymap': 1, 'String': 4, 'TOKEN_VARIABLE': 9, 'deleteUserKeymap': 1, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock260,KeymapManager.java,0.8,0.75,1.0,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
238,CodeBlock260,68,90,KeymapManager.java,"['void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'void': 1, 'deleteUserKeymap': 1, 'String': 3, 'TOKEN_VARIABLE': 8, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock258,KeymapManager.java,0.6666666666666666,0.75,0.6666666666666666,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
239,CodeBlock260,68,90,KeymapManager.java,"['void deleteUserKeymap(String name);', '', '', '', '', '', '', 'boolean copyKeymap(String name, String newName);', '', '', '', '', 'enum State', '{', '', 'User,', '', 'System,', '', 'SystemModified,', '', 'Unknown', '}']","{'void': 1, 'deleteUserKeymap': 1, 'String': 3, 'TOKEN_VARIABLE': 8, 'boolean': 1, 'copyKeymap': 1, 'enum': 1}",CodeBlock259,KeymapManager.java,0.8,0.75,1.0,21,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
240,CodeBlock266,82,87,Native2ASCIIEncodingTest.java,"['private Reader getReader(String input) throws IOException', '{', 'InputStream inputStream = new ByteArrayInputStream(input.getBytes(iso_8859_1));', 'reader = native2ASCIIEncoding.getTextReader(inputStream);', 'return reader;', '}']","{'private': 1, 'TOKEN_VARIABLE': 9, 'getReader': 1, 'String': 1, 'throws': 1, 'new': 1, 'ByteArrayInputStream': 1, 'getBytes': 1, 'getTextReader': 1, 'return': 1}",CodeBlock267,Native2ASCIIEncodingTest.java,0.7083333333333334,0.5714285714285714,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
241,CodeBlock266,82,87,Native2ASCIIEncodingTest.java,"['private Reader getReader(String input) throws IOException', '{', 'InputStream inputStream = new ByteArrayInputStream(input.getBytes(iso_8859_1));', 'reader = native2ASCIIEncoding.getTextReader(inputStream);', 'return reader;', '}']","{'private': 1, 'TOKEN_VARIABLE': 9, 'getReader': 1, 'String': 1, 'throws': 1, 'new': 1, 'ByteArrayInputStream': 1, 'getBytes': 1, 'getTextReader': 1, 'return': 1}",CodeBlock268,Native2ASCIIEncodingTest.java,0.8,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
242,CodeBlock267,89,96,Native2ASCIIEncodingTest.java,"['private Reader getThrottledReader(String input)', 'throws IOException, InvocationTargetException, NoSuchMethodException, IllegalAccessException,', '       InstantiationException', '{', 'InputStream inputStream = new ByteArrayInputStream(input.getBytes(iso_8859_1));', 'reader = native2ASCIIEncoding.getTextReader(inputStream, ThrottledPushbackReader.class);', 'return reader;', '}']","{'private': 1, 'TOKEN_VARIABLE': 14, 'getThrottledReader': 1, 'String': 1, 'throws': 1, 'new': 1, 'ByteArrayInputStream': 1, 'getBytes': 1, 'getTextReader': 1, 'return': 1}",CodeBlock266,Native2ASCIIEncodingTest.java,0.7083333333333334,0.5714285714285714,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
243,CodeBlock267,89,96,Native2ASCIIEncodingTest.java,"['private Reader getThrottledReader(String input)', 'throws IOException, InvocationTargetException, NoSuchMethodException, IllegalAccessException,', '       InstantiationException', '{', 'InputStream inputStream = new ByteArrayInputStream(input.getBytes(iso_8859_1));', 'reader = native2ASCIIEncoding.getTextReader(inputStream, ThrottledPushbackReader.class);', 'return reader;', '}']","{'private': 1, 'TOKEN_VARIABLE': 14, 'getThrottledReader': 1, 'String': 1, 'throws': 1, 'new': 1, 'ByteArrayInputStream': 1, 'getBytes': 1, 'getTextReader': 1, 'return': 1}",CodeBlock269,Native2ASCIIEncodingTest.java,0.84,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
244,CodeBlock268,98,103,Native2ASCIIEncodingTest.java,"['private Reader getPermissiveReader(String input) throws IOException', '{', 'InputStream inputStream = new ByteArrayInputStream(input.getBytes(iso_8859_1));', 'reader = native2ASCIIEncoding.getPermissiveTextReader(inputStream);', 'return reader;', '}']","{'private': 1, 'TOKEN_VARIABLE': 9, 'getPermissiveReader': 1, 'String': 1, 'throws': 1, 'new': 1, 'ByteArrayInputStream': 1, 'getBytes': 1, 'getPermissiveTextReader': 1, 'return': 1}",CodeBlock266,Native2ASCIIEncodingTest.java,0.8,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
245,CodeBlock268,98,103,Native2ASCIIEncodingTest.java,"['private Reader getPermissiveReader(String input) throws IOException', '{', 'InputStream inputStream = new ByteArrayInputStream(input.getBytes(iso_8859_1));', 'reader = native2ASCIIEncoding.getPermissiveTextReader(inputStream);', 'return reader;', '}']","{'private': 1, 'TOKEN_VARIABLE': 9, 'getPermissiveReader': 1, 'String': 1, 'throws': 1, 'new': 1, 'ByteArrayInputStream': 1, 'getBytes': 1, 'getPermissiveTextReader': 1, 'return': 1}",CodeBlock269,Native2ASCIIEncodingTest.java,0.7083333333333334,0.5714285714285714,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
246,CodeBlock269,105,112,Native2ASCIIEncodingTest.java,"['private Reader getThrottledPermissiveReader(String input)', 'throws IOException, InvocationTargetException, NoSuchMethodException, IllegalAccessException,', '       InstantiationException', '{', 'InputStream inputStream = new ByteArrayInputStream(input.getBytes(iso_8859_1));', 'reader = native2ASCIIEncoding.getPermissiveTextReader(inputStream, ThrottledPushbackReader.class);', 'return reader;', '}']","{'private': 1, 'TOKEN_VARIABLE': 14, 'getThrottledPermissiveReader': 1, 'String': 1, 'throws': 1, 'new': 1, 'ByteArrayInputStream': 1, 'getBytes': 1, 'getPermissiveTextReader': 1, 'return': 1}",CodeBlock267,Native2ASCIIEncodingTest.java,0.84,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
247,CodeBlock269,105,112,Native2ASCIIEncodingTest.java,"['private Reader getThrottledPermissiveReader(String input)', 'throws IOException, InvocationTargetException, NoSuchMethodException, IllegalAccessException,', '       InstantiationException', '{', 'InputStream inputStream = new ByteArrayInputStream(input.getBytes(iso_8859_1));', 'reader = native2ASCIIEncoding.getPermissiveTextReader(inputStream, ThrottledPushbackReader.class);', 'return reader;', '}']","{'private': 1, 'TOKEN_VARIABLE': 14, 'getThrottledPermissiveReader': 1, 'String': 1, 'throws': 1, 'new': 1, 'ByteArrayInputStream': 1, 'getBytes': 1, 'getPermissiveTextReader': 1, 'return': 1}",CodeBlock268,Native2ASCIIEncodingTest.java,0.7083333333333334,0.5714285714285714,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
248,CodeBlock270,115,119,Native2ASCIIEncodingTest.java,"['public void readShouldConvertEscapeSequence() throws IOException', '{', 'int c = getReader(""\\\\u21aF"").read();', ""assertThat((char) c, is(equalTo('\\u21aF')));"", '}']","{'public': 1, 'void': 1, 'readShouldConvertEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 3, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'assertThat': 1, 'char': 1, 'is': 1, 'equalTo': 1}",CodeBlock287,Native2ASCIIEncodingTest.java,0.6842105263157895,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
249,CodeBlock270,115,119,Native2ASCIIEncodingTest.java,"['public void readShouldConvertEscapeSequence() throws IOException', '{', 'int c = getReader(""\\\\u21aF"").read();', ""assertThat((char) c, is(equalTo('\\u21aF')));"", '}']","{'public': 1, 'void': 1, 'readShouldConvertEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 3, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'assertThat': 1, 'char': 1, 'is': 1, 'equalTo': 1}",CodeBlock288,Native2ASCIIEncodingTest.java,0.65,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
250,CodeBlock271,122,127,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldConvertEscapeSequence() throws IOException', '{', 'int c = getReader(""\\\\u21aF"").read(bufferArray);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\u21aF')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldConvertEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'assertThat': 2, 'is': 2, 'equalTo': 2, 'INTEGER_LITERAL': 2}",CodeBlock272,Native2ASCIIEncodingTest.java,0.84,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
251,CodeBlock271,122,127,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldConvertEscapeSequence() throws IOException', '{', 'int c = getReader(""\\\\u21aF"").read(bufferArray);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\u21aF')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldConvertEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'assertThat': 2, 'is': 2, 'equalTo': 2, 'INTEGER_LITERAL': 2}",CodeBlock292,Native2ASCIIEncodingTest.java,0.9130434782608695,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
252,CodeBlock271,122,127,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldConvertEscapeSequence() throws IOException', '{', 'int c = getReader(""\\\\u21aF"").read(bufferArray);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\u21aF')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldConvertEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'assertThat': 2, 'is': 2, 'equalTo': 2, 'INTEGER_LITERAL': 2}",CodeBlock293,Native2ASCIIEncodingTest.java,0.84,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
253,CodeBlock272,130,135,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldConvertEscapeSequence() throws IOException', '{', 'int c = getReader(""\\\\u21aF"").read(bufferArray, 0, 1);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\u21aF')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldConvertEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'INTEGER_LITERAL': 4, 'assertThat': 2, 'is': 2, 'equalTo': 2}",CodeBlock271,Native2ASCIIEncodingTest.java,0.84,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
254,CodeBlock272,130,135,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldConvertEscapeSequence() throws IOException', '{', 'int c = getReader(""\\\\u21aF"").read(bufferArray, 0, 1);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\u21aF')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldConvertEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'INTEGER_LITERAL': 4, 'assertThat': 2, 'is': 2, 'equalTo': 2}",CodeBlock292,Native2ASCIIEncodingTest.java,0.84,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
255,CodeBlock272,130,135,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldConvertEscapeSequence() throws IOException', '{', 'int c = getReader(""\\\\u21aF"").read(bufferArray, 0, 1);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\u21aF')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldConvertEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'INTEGER_LITERAL': 4, 'assertThat': 2, 'is': 2, 'equalTo': 2}",CodeBlock293,Native2ASCIIEncodingTest.java,0.92,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
256,CodeBlock273,138,145,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequence() throws IOException', '{', 'int c = getReader(""\\\\u21aF"").read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.length(), is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(""\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 4, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock294,Native2ASCIIEncodingTest.java,0.78125,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
257,CodeBlock273,138,145,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequence() throws IOException', '{', 'int c = getReader(""\\\\u21aF"").read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.length(), is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(""\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 4, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock298,Native2ASCIIEncodingTest.java,0.78125,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
258,CodeBlock273,138,145,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequence() throws IOException', '{', 'int c = getReader(""\\\\u21aF"").read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.length(), is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(""\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 4, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock317,Native2ASCIIEncodingTest.java,0.9285714285714286,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
259,CodeBlock273,138,145,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequence() throws IOException', '{', 'int c = getReader(""\\\\u21aF"").read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.length(), is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(""\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 4, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock325,Native2ASCIIEncodingTest.java,0.8666666666666667,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
260,CodeBlock275,223,238,Native2ASCIIEncodingTest.java,"['public void permissiveReadShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'Reader reader = getPermissiveReader(""\\\\u21a"");', 'int c = reader.read();', ""assertThat((char) c, is(equalTo('\\\\')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('u')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('2')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('1')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('a')));"", 'c = reader.read();', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'permissiveReadShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 15, 'getPermissiveReader': 1, 'STRING_LITERAL': 6, 'int': 1, 'read': 6, 'assertThat': 6, 'char': 5, 'is': 6, 'equalTo': 6, 'INTEGER_LITERAL': 2}",CodeBlock295,Native2ASCIIEncodingTest.java,0.9333333333333333,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
261,CodeBlock276,241,252,Native2ASCIIEncodingTest.java,"['public void permissiveRead_charArray_ShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'Reader reader = getPermissiveReader(""\\\\u21a"");', 'int c = reader.read(bufferArray);', 'assertThat(c, is(equalTo(5)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", '}']","{'public': 1, 'void': 1, 'permissiveRead_charArray_ShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 17, 'getPermissiveReader': 1, 'STRING_LITERAL': 6, 'int': 2, 'read': 1, 'assertThat': 6, 'is': 6, 'equalTo': 6, 'INTEGER_LITERAL': 12}",CodeBlock277,Native2ASCIIEncodingTest.java,0.9375,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
262,CodeBlock276,241,252,Native2ASCIIEncodingTest.java,"['public void permissiveRead_charArray_ShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'Reader reader = getPermissiveReader(""\\\\u21a"");', 'int c = reader.read(bufferArray);', 'assertThat(c, is(equalTo(5)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", '}']","{'public': 1, 'void': 1, 'permissiveRead_charArray_ShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 17, 'getPermissiveReader': 1, 'STRING_LITERAL': 6, 'int': 2, 'read': 1, 'assertThat': 6, 'is': 6, 'equalTo': 6, 'INTEGER_LITERAL': 12}",CodeBlock296,Native2ASCIIEncodingTest.java,0.9047619047619048,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
263,CodeBlock276,241,252,Native2ASCIIEncodingTest.java,"['public void permissiveRead_charArray_ShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'Reader reader = getPermissiveReader(""\\\\u21a"");', 'int c = reader.read(bufferArray);', 'assertThat(c, is(equalTo(5)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", '}']","{'public': 1, 'void': 1, 'permissiveRead_charArray_ShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 17, 'getPermissiveReader': 1, 'STRING_LITERAL': 6, 'int': 2, 'read': 1, 'assertThat': 6, 'is': 6, 'equalTo': 6, 'INTEGER_LITERAL': 12}",CodeBlock297,Native2ASCIIEncodingTest.java,0.8769230769230769,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
264,CodeBlock277,255,266,Native2ASCIIEncodingTest.java,"['public void permissiveRead_charArray_int_int_ShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'Reader reader = getPermissiveReader(""\\\\u21a"");', 'int c = reader.read(bufferArray, 0, 5);', 'assertThat(c, is(equalTo(5)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", '}']","{'public': 1, 'void': 1, 'permissiveRead_charArray_int_int_ShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 17, 'getPermissiveReader': 1, 'STRING_LITERAL': 6, 'int': 2, 'read': 1, 'INTEGER_LITERAL': 14, 'assertThat': 6, 'is': 6, 'equalTo': 6}",CodeBlock276,Native2ASCIIEncodingTest.java,0.9375,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
265,CodeBlock277,255,266,Native2ASCIIEncodingTest.java,"['public void permissiveRead_charArray_int_int_ShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'Reader reader = getPermissiveReader(""\\\\u21a"");', 'int c = reader.read(bufferArray, 0, 5);', 'assertThat(c, is(equalTo(5)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", '}']","{'public': 1, 'void': 1, 'permissiveRead_charArray_int_int_ShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 17, 'getPermissiveReader': 1, 'STRING_LITERAL': 6, 'int': 2, 'read': 1, 'INTEGER_LITERAL': 14, 'assertThat': 6, 'is': 6, 'equalTo': 6}",CodeBlock296,Native2ASCIIEncodingTest.java,0.8769230769230769,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
266,CodeBlock277,255,266,Native2ASCIIEncodingTest.java,"['public void permissiveRead_charArray_int_int_ShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'Reader reader = getPermissiveReader(""\\\\u21a"");', 'int c = reader.read(bufferArray, 0, 5);', 'assertThat(c, is(equalTo(5)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", '}']","{'public': 1, 'void': 1, 'permissiveRead_charArray_int_int_ShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 17, 'getPermissiveReader': 1, 'STRING_LITERAL': 6, 'int': 2, 'read': 1, 'INTEGER_LITERAL': 14, 'assertThat': 6, 'is': 6, 'equalTo': 6}",CodeBlock297,Native2ASCIIEncodingTest.java,0.9076923076923077,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
267,CodeBlock278,269,278,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'String input = ""\\\\u21a"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock282,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
268,CodeBlock278,269,278,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'String input = ""\\\\u21a"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock286,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
269,CodeBlock278,269,278,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'String input = ""\\\\u21a"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock294,Native2ASCIIEncodingTest.java,0.8235294117647058,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
270,CodeBlock278,269,278,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'String input = ""\\\\u21a"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock298,Native2ASCIIEncodingTest.java,0.8235294117647058,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
271,CodeBlock278,269,278,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'String input = ""\\\\u21a"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock310,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
272,CodeBlock278,269,278,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'String input = ""\\\\u21a"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock314,Native2ASCIIEncodingTest.java,0.7894736842105263,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
273,CodeBlock278,269,278,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'String input = ""\\\\u21a"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock321,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
274,CodeBlock278,269,278,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'String input = ""\\\\u21a"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock325,Native2ASCIIEncodingTest.java,0.7428571428571429,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
275,CodeBlock278,269,278,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'String input = ""\\\\u21a"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock330,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
276,CodeBlock278,269,278,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'String input = ""\\\\u21a"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock334,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
277,CodeBlock278,269,278,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence() throws IOException', '{', 'String input = ""\\\\u21a"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptIncompleteEscapeSequence': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock338,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
278,CodeBlock280,293,301,Native2ASCIIEncodingTest.java,"['public void permissiveRead_charArray_ShouldAcceptMissingInputAfterU() throws IOException', '{', 'Reader reader = getPermissiveReader(""\\\\u"");', 'int c = reader.read(bufferArray);', 'assertThat(c, is(equalTo(2)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", '}']","{'public': 1, 'void': 1, 'permissiveRead_charArray_ShouldAcceptMissingInputAfterU': 1, 'throws': 1, 'TOKEN_VARIABLE': 11, 'getPermissiveReader': 1, 'STRING_LITERAL': 3, 'int': 2, 'read': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 6}",CodeBlock281,Native2ASCIIEncodingTest.java,0.9,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
279,CodeBlock281,304,312,Native2ASCIIEncodingTest.java,"['public void permissiveRead_charArray_int_int_ShouldAcceptMissingInputAfterU() throws IOException', '{', 'Reader reader = getPermissiveReader(""\\\\u"");', 'int c = reader.read(bufferArray, 0, 2);', 'assertThat(c, is(equalTo(2)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", '}']","{'public': 1, 'void': 1, 'permissiveRead_charArray_int_int_ShouldAcceptMissingInputAfterU': 1, 'throws': 1, 'TOKEN_VARIABLE': 11, 'getPermissiveReader': 1, 'STRING_LITERAL': 3, 'int': 2, 'read': 1, 'INTEGER_LITERAL': 8, 'assertThat': 3, 'is': 3, 'equalTo': 3}",CodeBlock280,Native2ASCIIEncodingTest.java,0.9,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
280,CodeBlock282,315,324,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU() throws IOException', '{', 'String input = ""\\\\u"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(2)));', 'assertThat(buffer.length(), is(equalTo(2)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock278,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
281,CodeBlock282,315,324,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU() throws IOException', '{', 'String input = ""\\\\u"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(2)));', 'assertThat(buffer.length(), is(equalTo(2)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock286,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
282,CodeBlock282,315,324,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU() throws IOException', '{', 'String input = ""\\\\u"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(2)));', 'assertThat(buffer.length(), is(equalTo(2)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock294,Native2ASCIIEncodingTest.java,0.8235294117647058,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
283,CodeBlock282,315,324,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU() throws IOException', '{', 'String input = ""\\\\u"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(2)));', 'assertThat(buffer.length(), is(equalTo(2)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock298,Native2ASCIIEncodingTest.java,0.8235294117647058,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
284,CodeBlock282,315,324,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU() throws IOException', '{', 'String input = ""\\\\u"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(2)));', 'assertThat(buffer.length(), is(equalTo(2)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock310,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
285,CodeBlock282,315,324,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU() throws IOException', '{', 'String input = ""\\\\u"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(2)));', 'assertThat(buffer.length(), is(equalTo(2)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock314,Native2ASCIIEncodingTest.java,0.7894736842105263,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
286,CodeBlock282,315,324,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU() throws IOException', '{', 'String input = ""\\\\u"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(2)));', 'assertThat(buffer.length(), is(equalTo(2)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock321,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
287,CodeBlock282,315,324,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU() throws IOException', '{', 'String input = ""\\\\u"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(2)));', 'assertThat(buffer.length(), is(equalTo(2)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock325,Native2ASCIIEncodingTest.java,0.7428571428571429,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
288,CodeBlock282,315,324,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU() throws IOException', '{', 'String input = ""\\\\u"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(2)));', 'assertThat(buffer.length(), is(equalTo(2)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock330,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
289,CodeBlock282,315,324,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU() throws IOException', '{', 'String input = ""\\\\u"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(2)));', 'assertThat(buffer.length(), is(equalTo(2)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock334,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
290,CodeBlock282,315,324,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU() throws IOException', '{', 'String input = ""\\\\u"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(2)));', 'assertThat(buffer.length(), is(equalTo(2)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMissingInputAfterU': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock338,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
291,CodeBlock284,369,391,Native2ASCIIEncodingTest.java,"['public void permissiveRead_charArray_ShouldAcceptMalformedInput() throws IOException', '{', 'int c = getPermissiveReader(""asdf\\\\: \\\\u21a/asdf"").read(bufferArray);', 'assertThat(c, is(equalTo(17)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo(':')));"", ""assertThat(bufferArray[i++], is(equalTo(' ')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('/')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", '}']","{'public': 1, 'void': 1, 'permissiveRead_charArray_ShouldAcceptMalformedInput': 1, 'throws': 1, 'TOKEN_VARIABLE': 39, 'int': 2, 'getPermissiveReader': 1, 'STRING_LITERAL': 18, 'read': 1, 'assertThat': 18, 'is': 18, 'equalTo': 18, 'INTEGER_LITERAL': 36}",CodeBlock285,Native2ASCIIEncodingTest.java,0.9746835443037974,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
292,CodeBlock285,394,416,Native2ASCIIEncodingTest.java,"['public void permissiveRead_charArray_int_int_ShouldAcceptMalformedInput() throws IOException', '{', 'int c = getPermissiveReader(""asdf\\\\: \\\\u21a/asdf"").read(bufferArray, 0, 17);', 'assertThat(c, is(equalTo(17)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo(':')));"", ""assertThat(bufferArray[i++], is(equalTo(' ')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('/')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", '}']","{'public': 1, 'void': 1, 'permissiveRead_charArray_int_int_ShouldAcceptMalformedInput': 1, 'throws': 1, 'TOKEN_VARIABLE': 39, 'int': 2, 'getPermissiveReader': 1, 'STRING_LITERAL': 18, 'read': 1, 'INTEGER_LITERAL': 38, 'assertThat': 18, 'is': 18, 'equalTo': 18}",CodeBlock284,Native2ASCIIEncodingTest.java,0.9746835443037974,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
293,CodeBlock286,419,428,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInput() throws IOException', '{', 'String input = ""asdf\\\\: \\\\u21a/asdf"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(17)));', 'assertThat(buffer.length(), is(equalTo(17)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInput': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock278,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
294,CodeBlock286,419,428,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInput() throws IOException', '{', 'String input = ""asdf\\\\: \\\\u21a/asdf"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(17)));', 'assertThat(buffer.length(), is(equalTo(17)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInput': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock282,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
295,CodeBlock286,419,428,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInput() throws IOException', '{', 'String input = ""asdf\\\\: \\\\u21a/asdf"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(17)));', 'assertThat(buffer.length(), is(equalTo(17)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInput': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock294,Native2ASCIIEncodingTest.java,0.8235294117647058,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
296,CodeBlock286,419,428,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInput() throws IOException', '{', 'String input = ""asdf\\\\: \\\\u21a/asdf"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(17)));', 'assertThat(buffer.length(), is(equalTo(17)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInput': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock298,Native2ASCIIEncodingTest.java,0.8235294117647058,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
297,CodeBlock286,419,428,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInput() throws IOException', '{', 'String input = ""asdf\\\\: \\\\u21a/asdf"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(17)));', 'assertThat(buffer.length(), is(equalTo(17)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInput': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock310,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
298,CodeBlock286,419,428,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInput() throws IOException', '{', 'String input = ""asdf\\\\: \\\\u21a/asdf"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(17)));', 'assertThat(buffer.length(), is(equalTo(17)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInput': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock314,Native2ASCIIEncodingTest.java,0.7894736842105263,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
299,CodeBlock286,419,428,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInput() throws IOException', '{', 'String input = ""asdf\\\\: \\\\u21a/asdf"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(17)));', 'assertThat(buffer.length(), is(equalTo(17)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInput': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock321,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
300,CodeBlock286,419,428,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInput() throws IOException', '{', 'String input = ""asdf\\\\: \\\\u21a/asdf"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(17)));', 'assertThat(buffer.length(), is(equalTo(17)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInput': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock325,Native2ASCIIEncodingTest.java,0.7428571428571429,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
301,CodeBlock286,419,428,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInput() throws IOException', '{', 'String input = ""asdf\\\\: \\\\u21a/asdf"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(17)));', 'assertThat(buffer.length(), is(equalTo(17)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInput': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock330,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
302,CodeBlock286,419,428,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInput() throws IOException', '{', 'String input = ""asdf\\\\: \\\\u21a/asdf"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(17)));', 'assertThat(buffer.length(), is(equalTo(17)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInput': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock334,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
303,CodeBlock286,419,428,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInput() throws IOException', '{', 'String input = ""asdf\\\\: \\\\u21a/asdf"";', 'Reader reader = getPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(17)));', 'assertThat(buffer.length(), is(equalTo(17)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInput': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock338,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
304,CodeBlock287,431,435,Native2ASCIIEncodingTest.java,"['public void readShouldCorrectlyHandleEOF() throws IOException', '{', 'int c = getReader("""").read();', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'readShouldCorrectlyHandleEOF': 1, 'throws': 1, 'TOKEN_VARIABLE': 3, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 1, 'read': 1, 'assertThat': 1, 'is': 1, 'equalTo': 1, 'INTEGER_LITERAL': 2}",CodeBlock270,Native2ASCIIEncodingTest.java,0.6842105263157895,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
305,CodeBlock287,431,435,Native2ASCIIEncodingTest.java,"['public void readShouldCorrectlyHandleEOF() throws IOException', '{', 'int c = getReader("""").read();', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'readShouldCorrectlyHandleEOF': 1, 'throws': 1, 'TOKEN_VARIABLE': 3, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 1, 'read': 1, 'assertThat': 1, 'is': 1, 'equalTo': 1, 'INTEGER_LITERAL': 2}",CodeBlock288,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
306,CodeBlock287,431,435,Native2ASCIIEncodingTest.java,"['public void readShouldCorrectlyHandleEOF() throws IOException', '{', 'int c = getReader("""").read();', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'readShouldCorrectlyHandleEOF': 1, 'throws': 1, 'TOKEN_VARIABLE': 3, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 1, 'read': 1, 'assertThat': 1, 'is': 1, 'equalTo': 1, 'INTEGER_LITERAL': 2}",CodeBlock289,Native2ASCIIEncodingTest.java,0.75,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
307,CodeBlock288,438,442,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldCorrectlyHandleEOF() throws IOException', '{', 'int c = getReader("""").read(bufferArray);', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldCorrectlyHandleEOF': 1, 'throws': 1, 'TOKEN_VARIABLE': 4, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 1, 'read': 1, 'assertThat': 1, 'is': 1, 'equalTo': 1, 'INTEGER_LITERAL': 2}",CodeBlock270,Native2ASCIIEncodingTest.java,0.65,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
308,CodeBlock288,438,442,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldCorrectlyHandleEOF() throws IOException', '{', 'int c = getReader("""").read(bufferArray);', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldCorrectlyHandleEOF': 1, 'throws': 1, 'TOKEN_VARIABLE': 4, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 1, 'read': 1, 'assertThat': 1, 'is': 1, 'equalTo': 1, 'INTEGER_LITERAL': 2}",CodeBlock287,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
309,CodeBlock288,438,442,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldCorrectlyHandleEOF() throws IOException', '{', 'int c = getReader("""").read(bufferArray);', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldCorrectlyHandleEOF': 1, 'throws': 1, 'TOKEN_VARIABLE': 4, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 1, 'read': 1, 'assertThat': 1, 'is': 1, 'equalTo': 1, 'INTEGER_LITERAL': 2}",CodeBlock289,Native2ASCIIEncodingTest.java,0.8,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
310,CodeBlock289,445,449,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldCorrectlyHandleEOF() throws IOException', '{', 'int c = getReader("""").read(bufferArray, 0, 1);', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldCorrectlyHandleEOF': 1, 'throws': 1, 'TOKEN_VARIABLE': 4, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 1, 'read': 1, 'INTEGER_LITERAL': 4, 'assertThat': 1, 'is': 1, 'equalTo': 1}",CodeBlock287,Native2ASCIIEncodingTest.java,0.75,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
311,CodeBlock289,445,449,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldCorrectlyHandleEOF() throws IOException', '{', 'int c = getReader("""").read(bufferArray, 0, 1);', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldCorrectlyHandleEOF': 1, 'throws': 1, 'TOKEN_VARIABLE': 4, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 1, 'read': 1, 'INTEGER_LITERAL': 4, 'assertThat': 1, 'is': 1, 'equalTo': 1}",CodeBlock288,Native2ASCIIEncodingTest.java,0.8,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
312,CodeBlock292,471,476,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'int c = getReader(""\\\\"").read(bufferArray);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\\\')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'assertThat': 2, 'is': 2, 'equalTo': 2, 'INTEGER_LITERAL': 2}",CodeBlock271,Native2ASCIIEncodingTest.java,0.9130434782608695,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
313,CodeBlock292,471,476,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'int c = getReader(""\\\\"").read(bufferArray);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\\\')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'assertThat': 2, 'is': 2, 'equalTo': 2, 'INTEGER_LITERAL': 2}",CodeBlock272,Native2ASCIIEncodingTest.java,0.84,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
314,CodeBlock292,471,476,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'int c = getReader(""\\\\"").read(bufferArray);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\\\')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'assertThat': 2, 'is': 2, 'equalTo': 2, 'INTEGER_LITERAL': 2}",CodeBlock293,Native2ASCIIEncodingTest.java,0.84,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
315,CodeBlock293,479,484,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'int c = getReader(""\\\\"").read(bufferArray, 0, 1);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\\\')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'INTEGER_LITERAL': 4, 'assertThat': 2, 'is': 2, 'equalTo': 2}",CodeBlock271,Native2ASCIIEncodingTest.java,0.84,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
316,CodeBlock293,479,484,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'int c = getReader(""\\\\"").read(bufferArray, 0, 1);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\\\')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'INTEGER_LITERAL': 4, 'assertThat': 2, 'is': 2, 'equalTo': 2}",CodeBlock272,Native2ASCIIEncodingTest.java,0.92,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
317,CodeBlock293,479,484,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'int c = getReader(""\\\\"").read(bufferArray, 0, 1);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\\\')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'INTEGER_LITERAL': 4, 'assertThat': 2, 'is': 2, 'equalTo': 2}",CodeBlock292,Native2ASCIIEncodingTest.java,0.84,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
318,CodeBlock294,487,495,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'String input = ""\\\\"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.length(), is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock273,Native2ASCIIEncodingTest.java,0.78125,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
319,CodeBlock294,487,495,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'String input = ""\\\\"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.length(), is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock278,Native2ASCIIEncodingTest.java,0.8235294117647058,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
320,CodeBlock294,487,495,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'String input = ""\\\\"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.length(), is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock282,Native2ASCIIEncodingTest.java,0.8235294117647058,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
321,CodeBlock294,487,495,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'String input = ""\\\\"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.length(), is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock286,Native2ASCIIEncodingTest.java,0.8235294117647058,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
322,CodeBlock294,487,495,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'String input = ""\\\\"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.length(), is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock298,Native2ASCIIEncodingTest.java,0.9354838709677419,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
323,CodeBlock294,487,495,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'String input = ""\\\\"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.length(), is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock310,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
324,CodeBlock294,487,495,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'String input = ""\\\\"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.length(), is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock317,Native2ASCIIEncodingTest.java,0.78125,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
325,CodeBlock294,487,495,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'String input = ""\\\\"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.length(), is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock321,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
326,CodeBlock294,487,495,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'String input = ""\\\\"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.length(), is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock325,Native2ASCIIEncodingTest.java,0.84375,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
327,CodeBlock294,487,495,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'String input = ""\\\\"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.length(), is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock330,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
328,CodeBlock294,487,495,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'String input = ""\\\\"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.length(), is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock334,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
329,CodeBlock294,487,495,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash() throws IOException', '{', 'String input = ""\\\\"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.length(), is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleEOFAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock338,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
330,CodeBlock295,498,513,Native2ASCIIEncodingTest.java,"['public void readShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash() throws IOException', '{', 'Reader reader = getReader(""\\\\asdf"");', 'int c = reader.read();', ""assertThat((char) c, is(equalTo('\\\\')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('a')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('s')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('d')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('f')));"", 'c = reader.read();', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'readShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 15, 'getReader': 1, 'STRING_LITERAL': 6, 'int': 1, 'read': 6, 'assertThat': 6, 'char': 5, 'is': 6, 'equalTo': 6, 'INTEGER_LITERAL': 2}",CodeBlock275,Native2ASCIIEncodingTest.java,0.9333333333333333,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
331,CodeBlock296,516,526,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash() throws IOException', '{', 'int c = getReader(""\\\\asdf"").read(bufferArray);', 'assertThat(c, is(equalTo(5)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 15, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 6, 'read': 1, 'assertThat': 6, 'is': 6, 'equalTo': 6, 'INTEGER_LITERAL': 12}",CodeBlock276,Native2ASCIIEncodingTest.java,0.9047619047619048,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
332,CodeBlock296,516,526,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash() throws IOException', '{', 'int c = getReader(""\\\\asdf"").read(bufferArray);', 'assertThat(c, is(equalTo(5)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 15, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 6, 'read': 1, 'assertThat': 6, 'is': 6, 'equalTo': 6, 'INTEGER_LITERAL': 12}",CodeBlock277,Native2ASCIIEncodingTest.java,0.8769230769230769,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
333,CodeBlock296,516,526,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash() throws IOException', '{', 'int c = getReader(""\\\\asdf"").read(bufferArray);', 'assertThat(c, is(equalTo(5)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 15, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 6, 'read': 1, 'assertThat': 6, 'is': 6, 'equalTo': 6, 'INTEGER_LITERAL': 12}",CodeBlock297,Native2ASCIIEncodingTest.java,0.9354838709677419,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
334,CodeBlock297,529,540,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash()', 'throws IOException', '{', 'int c = getReader(""\\\\asdf"").read(bufferArray, 0, 5);', 'assertThat(c, is(equalTo(5)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 15, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 6, 'read': 1, 'INTEGER_LITERAL': 14, 'assertThat': 6, 'is': 6, 'equalTo': 6}",CodeBlock276,Native2ASCIIEncodingTest.java,0.8769230769230769,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
335,CodeBlock297,529,540,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash()', 'throws IOException', '{', 'int c = getReader(""\\\\asdf"").read(bufferArray, 0, 5);', 'assertThat(c, is(equalTo(5)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 15, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 6, 'read': 1, 'INTEGER_LITERAL': 14, 'assertThat': 6, 'is': 6, 'equalTo': 6}",CodeBlock277,Native2ASCIIEncodingTest.java,0.9076923076923077,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
336,CodeBlock297,529,540,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash()', 'throws IOException', '{', 'int c = getReader(""\\\\asdf"").read(bufferArray, 0, 5);', 'assertThat(c, is(equalTo(5)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 15, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 6, 'read': 1, 'INTEGER_LITERAL': 14, 'assertThat': 6, 'is': 6, 'equalTo': 6}",CodeBlock296,Native2ASCIIEncodingTest.java,0.9354838709677419,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
337,CodeBlock298,543,551,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash() throws IOException', '{', 'String input = ""\\\\asdf"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock273,Native2ASCIIEncodingTest.java,0.78125,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
338,CodeBlock298,543,551,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash() throws IOException', '{', 'String input = ""\\\\asdf"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock278,Native2ASCIIEncodingTest.java,0.8235294117647058,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
339,CodeBlock298,543,551,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash() throws IOException', '{', 'String input = ""\\\\asdf"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock282,Native2ASCIIEncodingTest.java,0.8235294117647058,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
340,CodeBlock298,543,551,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash() throws IOException', '{', 'String input = ""\\\\asdf"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock286,Native2ASCIIEncodingTest.java,0.8235294117647058,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
341,CodeBlock298,543,551,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash() throws IOException', '{', 'String input = ""\\\\asdf"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock294,Native2ASCIIEncodingTest.java,0.9354838709677419,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
342,CodeBlock298,543,551,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash() throws IOException', '{', 'String input = ""\\\\asdf"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock310,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
343,CodeBlock298,543,551,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash() throws IOException', '{', 'String input = ""\\\\asdf"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock317,Native2ASCIIEncodingTest.java,0.78125,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
344,CodeBlock298,543,551,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash() throws IOException', '{', 'String input = ""\\\\asdf"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock321,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
345,CodeBlock298,543,551,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash() throws IOException', '{', 'String input = ""\\\\asdf"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock325,Native2ASCIIEncodingTest.java,0.84375,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
346,CodeBlock298,543,551,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash() throws IOException', '{', 'String input = ""\\\\asdf"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock330,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
347,CodeBlock298,543,551,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash() throws IOException', '{', 'String input = ""\\\\asdf"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock334,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
348,CodeBlock298,543,551,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash() throws IOException', '{', 'String input = ""\\\\asdf"";', 'int c = getReader(input).read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(5)));', 'assertThat(buffer.length(), is(equalTo(5)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 7, 'String': 1, 'STRING_LITERAL': 1, 'int': 1, 'getReader': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock338,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
349,CodeBlock299,554,559,Native2ASCIIEncodingTest.java,"['public void readShouldThrowExceptionOnMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'getThrottledReader(""\\\\u21aL"").read();', '}']","{'public': 1, 'void': 1, 'readShouldThrowExceptionOnMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'getThrottledReader': 1, 'STRING_LITERAL': 1, 'read': 1}",CodeBlock300,Native2ASCIIEncodingTest.java,0.7857142857142857,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
350,CodeBlock299,554,559,Native2ASCIIEncodingTest.java,"['public void readShouldThrowExceptionOnMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'getThrottledReader(""\\\\u21aL"").read();', '}']","{'public': 1, 'void': 1, 'readShouldThrowExceptionOnMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'getThrottledReader': 1, 'STRING_LITERAL': 1, 'read': 1}",CodeBlock301,Native2ASCIIEncodingTest.java,0.6875,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
351,CodeBlock299,554,559,Native2ASCIIEncodingTest.java,"['public void readShouldThrowExceptionOnMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'getThrottledReader(""\\\\u21aL"").read();', '}']","{'public': 1, 'void': 1, 'readShouldThrowExceptionOnMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'getThrottledReader': 1, 'STRING_LITERAL': 1, 'read': 1}",CodeBlock302,Native2ASCIIEncodingTest.java,0.7857142857142857,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
352,CodeBlock300,562,567,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldThrowExceptionOnMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'getThrottledReader(""\\\\u21aL"").read(bufferArray);', '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldThrowExceptionOnMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getThrottledReader': 1, 'STRING_LITERAL': 1, 'read': 1}",CodeBlock299,Native2ASCIIEncodingTest.java,0.7857142857142857,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
353,CodeBlock300,562,567,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldThrowExceptionOnMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'getThrottledReader(""\\\\u21aL"").read(bufferArray);', '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldThrowExceptionOnMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getThrottledReader': 1, 'STRING_LITERAL': 1, 'read': 1}",CodeBlock301,Native2ASCIIEncodingTest.java,0.75,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
354,CodeBlock300,562,567,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldThrowExceptionOnMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'getThrottledReader(""\\\\u21aL"").read(bufferArray);', '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldThrowExceptionOnMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getThrottledReader': 1, 'STRING_LITERAL': 1, 'read': 1}",CodeBlock302,Native2ASCIIEncodingTest.java,0.8571428571428571,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
355,CodeBlock301,570,575,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldThrowExceptionOnMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'getThrottledReader(""\\\\u21aL"").read(bufferArray, 0, 1);', '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldThrowExceptionOnMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getThrottledReader': 1, 'STRING_LITERAL': 1, 'read': 1, 'INTEGER_LITERAL': 2}",CodeBlock299,Native2ASCIIEncodingTest.java,0.6875,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
356,CodeBlock301,570,575,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldThrowExceptionOnMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'getThrottledReader(""\\\\u21aL"").read(bufferArray, 0, 1);', '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldThrowExceptionOnMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getThrottledReader': 1, 'STRING_LITERAL': 1, 'read': 1, 'INTEGER_LITERAL': 2}",CodeBlock300,Native2ASCIIEncodingTest.java,0.75,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
357,CodeBlock301,570,575,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldThrowExceptionOnMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'getThrottledReader(""\\\\u21aL"").read(bufferArray, 0, 1);', '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldThrowExceptionOnMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getThrottledReader': 1, 'STRING_LITERAL': 1, 'read': 1, 'INTEGER_LITERAL': 2}",CodeBlock302,Native2ASCIIEncodingTest.java,0.75,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
358,CodeBlock302,578,583,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldThrowExceptionOnMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'getThrottledReader(""\\\\u21aL"").read(buffer);', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldThrowExceptionOnMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getThrottledReader': 1, 'STRING_LITERAL': 1, 'read': 1}",CodeBlock299,Native2ASCIIEncodingTest.java,0.7857142857142857,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
359,CodeBlock302,578,583,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldThrowExceptionOnMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'getThrottledReader(""\\\\u21aL"").read(buffer);', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldThrowExceptionOnMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getThrottledReader': 1, 'STRING_LITERAL': 1, 'read': 1}",CodeBlock300,Native2ASCIIEncodingTest.java,0.8571428571428571,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
360,CodeBlock302,578,583,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldThrowExceptionOnMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'getThrottledReader(""\\\\u21aL"").read(buffer);', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldThrowExceptionOnMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getThrottledReader': 1, 'STRING_LITERAL': 1, 'read': 1}",CodeBlock301,Native2ASCIIEncodingTest.java,0.75,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
361,CodeBlock304,595,602,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldConvertEscapeSequenceWithThrottledInputStream()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'int c = getThrottledReader(""\\\\u21aF"").read(bufferArray);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\u21aF')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldConvertEscapeSequenceWithThrottledInputStream': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'int': 1, 'getThrottledReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'assertThat': 2, 'is': 2, 'equalTo': 2, 'INTEGER_LITERAL': 2}",CodeBlock305,Native2ASCIIEncodingTest.java,0.8620689655172413,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
362,CodeBlock304,595,602,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldConvertEscapeSequenceWithThrottledInputStream()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'int c = getThrottledReader(""\\\\u21aF"").read(bufferArray);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\u21aF')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldConvertEscapeSequenceWithThrottledInputStream': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'int': 1, 'getThrottledReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'assertThat': 2, 'is': 2, 'equalTo': 2, 'INTEGER_LITERAL': 2}",CodeBlock306,Native2ASCIIEncodingTest.java,0.7931034482758621,0.75,0.8,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
363,CodeBlock304,595,602,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldConvertEscapeSequenceWithThrottledInputStream()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'int c = getThrottledReader(""\\\\u21aF"").read(bufferArray);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\u21aF')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldConvertEscapeSequenceWithThrottledInputStream': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'int': 1, 'getThrottledReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'assertThat': 2, 'is': 2, 'equalTo': 2, 'INTEGER_LITERAL': 2}",CodeBlock342,Native2ASCIIEncodingTest.java,0.7096774193548387,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
364,CodeBlock305,605,612,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldConvertEscapeSequenceWithThrottledInputStream()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'int c = getThrottledReader(""\\\\u21aF"").read(bufferArray, 0, 1);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\u21aF')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldConvertEscapeSequenceWithThrottledInputStream': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'int': 1, 'getThrottledReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'INTEGER_LITERAL': 4, 'assertThat': 2, 'is': 2, 'equalTo': 2}",CodeBlock304,Native2ASCIIEncodingTest.java,0.8620689655172413,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
365,CodeBlock305,605,612,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldConvertEscapeSequenceWithThrottledInputStream()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'int c = getThrottledReader(""\\\\u21aF"").read(bufferArray, 0, 1);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\u21aF')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldConvertEscapeSequenceWithThrottledInputStream': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'int': 1, 'getThrottledReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'INTEGER_LITERAL': 4, 'assertThat': 2, 'is': 2, 'equalTo': 2}",CodeBlock306,Native2ASCIIEncodingTest.java,0.7419354838709677,0.75,0.8,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
366,CodeBlock305,605,612,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldConvertEscapeSequenceWithThrottledInputStream()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'int c = getThrottledReader(""\\\\u21aF"").read(bufferArray, 0, 1);', 'assertThat(c, is(equalTo(1)));', ""assertThat(bufferArray[0], is(equalTo('\\u21aF')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldConvertEscapeSequenceWithThrottledInputStream': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'int': 1, 'getThrottledReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'INTEGER_LITERAL': 4, 'assertThat': 2, 'is': 2, 'equalTo': 2}",CodeBlock342,Native2ASCIIEncodingTest.java,0.71875,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
367,CodeBlock306,615,623,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequenceWithThrottledInputStream()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'int c = getThrottledReader(""\\\\u21aF"").read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(""\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequenceWithThrottledInputStream': 1, 'throws': 1, 'TOKEN_VARIABLE': 8, 'int': 1, 'getThrottledReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'flip': 1, 'assertThat': 2, 'is': 2, 'equalTo': 2, 'INTEGER_LITERAL': 1, 'toString': 1}",CodeBlock304,Native2ASCIIEncodingTest.java,0.7931034482758621,0.75,0.8,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
368,CodeBlock306,615,623,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequenceWithThrottledInputStream()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'int c = getThrottledReader(""\\\\u21aF"").read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(""\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequenceWithThrottledInputStream': 1, 'throws': 1, 'TOKEN_VARIABLE': 8, 'int': 1, 'getThrottledReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'flip': 1, 'assertThat': 2, 'is': 2, 'equalTo': 2, 'INTEGER_LITERAL': 1, 'toString': 1}",CodeBlock305,Native2ASCIIEncodingTest.java,0.7419354838709677,0.75,0.8,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
369,CodeBlock306,615,623,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequenceWithThrottledInputStream()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'int c = getThrottledReader(""\\\\u21aF"").read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(1)));', 'assertThat(buffer.toString(), is(equalTo(""\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequenceWithThrottledInputStream': 1, 'throws': 1, 'TOKEN_VARIABLE': 8, 'int': 1, 'getThrottledReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'flip': 1, 'assertThat': 2, 'is': 2, 'equalTo': 2, 'INTEGER_LITERAL': 1, 'toString': 1}",CodeBlock342,Native2ASCIIEncodingTest.java,0.65625,0.75,0.8,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
370,CodeBlock307,626,645,Native2ASCIIEncodingTest.java,"['public void readShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'Reader reader = getReader(""\\\\nu21aF"");', 'int c = reader.read();', ""assertThat((char) c, is(equalTo('\\\\')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('n')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('u')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('2')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('1')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('a')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('F')));"", 'c = reader.read();', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'readShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 19, 'getReader': 1, 'STRING_LITERAL': 8, 'int': 1, 'read': 8, 'assertThat': 8, 'char': 7, 'is': 8, 'equalTo': 8, 'INTEGER_LITERAL': 2}",CodeBlock318,Native2ASCIIEncodingTest.java,0.9733333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
371,CodeBlock308,648,660,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'int c = getReader(""\\\\nu21aF"").read(bufferArray);', 'assertThat(c, is(equalTo(7)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('n')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('F')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 19, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 8, 'read': 1, 'assertThat': 8, 'is': 8, 'equalTo': 8, 'INTEGER_LITERAL': 16}",CodeBlock309,Native2ASCIIEncodingTest.java,0.9487179487179487,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
372,CodeBlock308,648,660,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'int c = getReader(""\\\\nu21aF"").read(bufferArray);', 'assertThat(c, is(equalTo(7)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('n')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('F')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 19, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 8, 'read': 1, 'assertThat': 8, 'is': 8, 'equalTo': 8, 'INTEGER_LITERAL': 16}",CodeBlock319,Native2ASCIIEncodingTest.java,0.9736842105263158,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
373,CodeBlock308,648,660,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'int c = getReader(""\\\\nu21aF"").read(bufferArray);', 'assertThat(c, is(equalTo(7)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('n')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('F')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 19, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 8, 'read': 1, 'assertThat': 8, 'is': 8, 'equalTo': 8, 'INTEGER_LITERAL': 16}",CodeBlock320,Native2ASCIIEncodingTest.java,0.9487179487179487,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
374,CodeBlock309,663,675,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'int c = getReader(""\\\\nu21aF"").read(bufferArray, 0, 7);', 'assertThat(c, is(equalTo(7)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('n')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('F')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 19, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 8, 'read': 1, 'INTEGER_LITERAL': 18, 'assertThat': 8, 'is': 8, 'equalTo': 8}",CodeBlock308,Native2ASCIIEncodingTest.java,0.9487179487179487,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
375,CodeBlock309,663,675,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'int c = getReader(""\\\\nu21aF"").read(bufferArray, 0, 7);', 'assertThat(c, is(equalTo(7)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('n')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('F')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 19, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 8, 'read': 1, 'INTEGER_LITERAL': 18, 'assertThat': 8, 'is': 8, 'equalTo': 8}",CodeBlock319,Native2ASCIIEncodingTest.java,0.9487179487179487,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
376,CodeBlock309,663,675,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'int c = getReader(""\\\\nu21aF"").read(bufferArray, 0, 7);', 'assertThat(c, is(equalTo(7)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('n')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('F')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 19, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 8, 'read': 1, 'INTEGER_LITERAL': 18, 'assertThat': 8, 'is': 8, 'equalTo': 8}",CodeBlock320,Native2ASCIIEncodingTest.java,0.9743589743589743,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
377,CodeBlock310,678,687,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'String input = ""\\\\nu21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock278,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
378,CodeBlock310,678,687,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'String input = ""\\\\nu21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock282,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
379,CodeBlock310,678,687,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'String input = ""\\\\nu21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock286,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
380,CodeBlock310,678,687,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'String input = ""\\\\nu21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock294,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
381,CodeBlock310,678,687,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'String input = ""\\\\nu21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock298,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
382,CodeBlock310,678,687,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'String input = ""\\\\nu21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock314,Native2ASCIIEncodingTest.java,0.7894736842105263,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
383,CodeBlock310,678,687,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'String input = ""\\\\nu21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock321,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
384,CodeBlock310,678,687,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'String input = ""\\\\nu21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock325,Native2ASCIIEncodingTest.java,0.7941176470588235,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
385,CodeBlock310,678,687,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'String input = ""\\\\nu21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock330,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
386,CodeBlock310,678,687,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'String input = ""\\\\nu21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock334,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
387,CodeBlock310,678,687,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException', '{', 'String input = ""\\\\nu21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldReadBackslashWithoutFollowingUAsBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock338,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
388,CodeBlock311,690,709,Native2ASCIIEncodingTest.java,"['public void permissiveReadShouldAcceptMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'Reader reader = getThrottledPermissiveReader(""\\\\u21a;"");', 'int c = reader.read();', ""assertThat((char) c, is(equalTo('\\\\')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('u')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('2')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('1')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('a')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo(';')));"", 'c = reader.read();', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'permissiveReadShouldAcceptMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 21, 'getThrottledPermissiveReader': 1, 'STRING_LITERAL': 7, 'int': 1, 'read': 7, 'assertThat': 7, 'char': 6, 'is': 7, 'equalTo': 7, 'INTEGER_LITERAL': 2}",CodeBlock331,Native2ASCIIEncodingTest.java,0.8888888888888888,0.6,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
389,CodeBlock312,712,725,Native2ASCIIEncodingTest.java,"['public void permissiveRead_charArray_ShouldAcceptMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'int c = getThrottledPermissiveReader(""\\\\u21a;"").read(bufferArray);', 'assertThat(c, is(equalTo(6)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo(';')));"", '}']","{'public': 1, 'void': 1, 'permissiveRead_charArray_ShouldAcceptMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 21, 'int': 2, 'getThrottledPermissiveReader': 1, 'STRING_LITERAL': 7, 'read': 1, 'assertThat': 7, 'is': 7, 'equalTo': 7, 'INTEGER_LITERAL': 14}",CodeBlock313,Native2ASCIIEncodingTest.java,0.9459459459459459,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
390,CodeBlock312,712,725,Native2ASCIIEncodingTest.java,"['public void permissiveRead_charArray_ShouldAcceptMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'int c = getThrottledPermissiveReader(""\\\\u21a;"").read(bufferArray);', 'assertThat(c, is(equalTo(6)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo(';')));"", '}']","{'public': 1, 'void': 1, 'permissiveRead_charArray_ShouldAcceptMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 21, 'int': 2, 'getThrottledPermissiveReader': 1, 'STRING_LITERAL': 7, 'read': 1, 'assertThat': 7, 'is': 7, 'equalTo': 7, 'INTEGER_LITERAL': 14}",CodeBlock332,Native2ASCIIEncodingTest.java,0.8904109589041096,0.6,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
391,CodeBlock312,712,725,Native2ASCIIEncodingTest.java,"['public void permissiveRead_charArray_ShouldAcceptMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'int c = getThrottledPermissiveReader(""\\\\u21a;"").read(bufferArray);', 'assertThat(c, is(equalTo(6)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo(';')));"", '}']","{'public': 1, 'void': 1, 'permissiveRead_charArray_ShouldAcceptMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 21, 'int': 2, 'getThrottledPermissiveReader': 1, 'STRING_LITERAL': 7, 'read': 1, 'assertThat': 7, 'is': 7, 'equalTo': 7, 'INTEGER_LITERAL': 14}",CodeBlock333,Native2ASCIIEncodingTest.java,0.8666666666666667,0.6,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
392,CodeBlock313,728,741,Native2ASCIIEncodingTest.java,"['public void permissiveRead_charArray_int_int_ShouldAcceptMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'int c = getThrottledPermissiveReader(""\\\\u21a;"").read(bufferArray, 0, 6);', 'assertThat(c, is(equalTo(6)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo(';')));"", '}']","{'public': 1, 'void': 1, 'permissiveRead_charArray_int_int_ShouldAcceptMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 21, 'int': 2, 'getThrottledPermissiveReader': 1, 'STRING_LITERAL': 7, 'read': 1, 'INTEGER_LITERAL': 16, 'assertThat': 7, 'is': 7, 'equalTo': 7}",CodeBlock312,Native2ASCIIEncodingTest.java,0.9459459459459459,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
393,CodeBlock313,728,741,Native2ASCIIEncodingTest.java,"['public void permissiveRead_charArray_int_int_ShouldAcceptMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'int c = getThrottledPermissiveReader(""\\\\u21a;"").read(bufferArray, 0, 6);', 'assertThat(c, is(equalTo(6)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo(';')));"", '}']","{'public': 1, 'void': 1, 'permissiveRead_charArray_int_int_ShouldAcceptMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 21, 'int': 2, 'getThrottledPermissiveReader': 1, 'STRING_LITERAL': 7, 'read': 1, 'INTEGER_LITERAL': 16, 'assertThat': 7, 'is': 7, 'equalTo': 7}",CodeBlock332,Native2ASCIIEncodingTest.java,0.8666666666666667,0.6,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
394,CodeBlock313,728,741,Native2ASCIIEncodingTest.java,"['public void permissiveRead_charArray_int_int_ShouldAcceptMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'int c = getThrottledPermissiveReader(""\\\\u21a;"").read(bufferArray, 0, 6);', 'assertThat(c, is(equalTo(6)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo(';')));"", '}']","{'public': 1, 'void': 1, 'permissiveRead_charArray_int_int_ShouldAcceptMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 21, 'int': 2, 'getThrottledPermissiveReader': 1, 'STRING_LITERAL': 7, 'read': 1, 'INTEGER_LITERAL': 16, 'assertThat': 7, 'is': 7, 'equalTo': 7}",CodeBlock333,Native2ASCIIEncodingTest.java,0.8933333333333333,0.6,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
395,CodeBlock314,744,755,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'String input = ""\\\\u21a;"";', 'Reader reader = getThrottledPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 13, 'String': 1, 'STRING_LITERAL': 1, 'getThrottledPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock278,Native2ASCIIEncodingTest.java,0.7894736842105263,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
396,CodeBlock314,744,755,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'String input = ""\\\\u21a;"";', 'Reader reader = getThrottledPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 13, 'String': 1, 'STRING_LITERAL': 1, 'getThrottledPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock282,Native2ASCIIEncodingTest.java,0.7894736842105263,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
397,CodeBlock314,744,755,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'String input = ""\\\\u21a;"";', 'Reader reader = getThrottledPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 13, 'String': 1, 'STRING_LITERAL': 1, 'getThrottledPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock286,Native2ASCIIEncodingTest.java,0.7894736842105263,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
398,CodeBlock314,744,755,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'String input = ""\\\\u21a;"";', 'Reader reader = getThrottledPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 13, 'String': 1, 'STRING_LITERAL': 1, 'getThrottledPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock310,Native2ASCIIEncodingTest.java,0.7894736842105263,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
399,CodeBlock314,744,755,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'String input = ""\\\\u21a;"";', 'Reader reader = getThrottledPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 13, 'String': 1, 'STRING_LITERAL': 1, 'getThrottledPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock321,Native2ASCIIEncodingTest.java,0.7894736842105263,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
400,CodeBlock314,744,755,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'String input = ""\\\\u21a;"";', 'Reader reader = getThrottledPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 13, 'String': 1, 'STRING_LITERAL': 1, 'getThrottledPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock330,Native2ASCIIEncodingTest.java,0.7894736842105263,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
401,CodeBlock314,744,755,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'String input = ""\\\\u21a;"";', 'Reader reader = getThrottledPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 13, 'String': 1, 'STRING_LITERAL': 1, 'getThrottledPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock334,Native2ASCIIEncodingTest.java,0.7894736842105263,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
402,CodeBlock314,744,755,Native2ASCIIEncodingTest.java,"['public void permissiveRead_CharBuffer_ShouldAcceptMalformedInputWithThrottledReader()', 'throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException,', '       IllegalAccessException', '{', 'String input = ""\\\\u21a;"";', 'Reader reader = getThrottledPermissiveReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'permissiveRead_CharBuffer_ShouldAcceptMalformedInputWithThrottledReader': 1, 'throws': 1, 'TOKEN_VARIABLE': 13, 'String': 1, 'STRING_LITERAL': 1, 'getThrottledPermissiveReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock338,Native2ASCIIEncodingTest.java,0.7894736842105263,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
403,CodeBlock315,758,775,Native2ASCIIEncodingTest.java,"['public void read_charArray_shouldReadOnAfterCollapsingEscapeSequences() throws IOException', '{', 'int c = getReader(""asdf\\\\: \\\\u21aFasdf"").read(bufferArray);', 'assertThat(c, is(equalTo(12)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo(':')));"", ""assertThat(bufferArray[i++], is(equalTo(' ')));"", ""assertThat(bufferArray[i++], is(equalTo('\\u21aF')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_shouldReadOnAfterCollapsingEscapeSequences': 1, 'throws': 1, 'TOKEN_VARIABLE': 29, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 13, 'read': 1, 'assertThat': 13, 'is': 13, 'equalTo': 13, 'INTEGER_LITERAL': 26}",CodeBlock316,Native2ASCIIEncodingTest.java,0.9661016949152542,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
404,CodeBlock316,778,795,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_shouldReadOnAfterCollapsingEscapeSequences() throws IOException', '{', 'int c = getReader(""asdf\\\\: \\\\u21aFasdf"").read(bufferArray, 0, 12);', 'assertThat(c, is(equalTo(12)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo(':')));"", ""assertThat(bufferArray[i++], is(equalTo(' ')));"", ""assertThat(bufferArray[i++], is(equalTo('\\u21aF')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_shouldReadOnAfterCollapsingEscapeSequences': 1, 'throws': 1, 'TOKEN_VARIABLE': 29, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 13, 'read': 1, 'INTEGER_LITERAL': 28, 'assertThat': 13, 'is': 13, 'equalTo': 13}",CodeBlock315,Native2ASCIIEncodingTest.java,0.9661016949152542,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
405,CodeBlock317,798,805,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_shouldReadOnAfterCollapsingEscapeSequences() throws IOException', '{', 'int c = getReader(""asdf\\\\: \\\\u21aFasdf"").read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(12)));', 'assertThat(buffer.length(), is(equalTo(12)));', 'assertThat(buffer.toString(), is(equalTo(""asdf\\\\: \\u21aFasdf"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_shouldReadOnAfterCollapsingEscapeSequences': 1, 'throws': 1, 'TOKEN_VARIABLE': 4, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock273,Native2ASCIIEncodingTest.java,0.9285714285714286,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
406,CodeBlock317,798,805,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_shouldReadOnAfterCollapsingEscapeSequences() throws IOException', '{', 'int c = getReader(""asdf\\\\: \\\\u21aFasdf"").read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(12)));', 'assertThat(buffer.length(), is(equalTo(12)));', 'assertThat(buffer.toString(), is(equalTo(""asdf\\\\: \\u21aFasdf"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_shouldReadOnAfterCollapsingEscapeSequences': 1, 'throws': 1, 'TOKEN_VARIABLE': 4, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock294,Native2ASCIIEncodingTest.java,0.78125,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
407,CodeBlock317,798,805,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_shouldReadOnAfterCollapsingEscapeSequences() throws IOException', '{', 'int c = getReader(""asdf\\\\: \\\\u21aFasdf"").read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(12)));', 'assertThat(buffer.length(), is(equalTo(12)));', 'assertThat(buffer.toString(), is(equalTo(""asdf\\\\: \\u21aFasdf"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_shouldReadOnAfterCollapsingEscapeSequences': 1, 'throws': 1, 'TOKEN_VARIABLE': 4, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock298,Native2ASCIIEncodingTest.java,0.78125,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
408,CodeBlock317,798,805,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_shouldReadOnAfterCollapsingEscapeSequences() throws IOException', '{', 'int c = getReader(""asdf\\\\: \\\\u21aFasdf"").read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(12)));', 'assertThat(buffer.length(), is(equalTo(12)));', 'assertThat(buffer.toString(), is(equalTo(""asdf\\\\: \\u21aFasdf"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_shouldReadOnAfterCollapsingEscapeSequences': 1, 'throws': 1, 'TOKEN_VARIABLE': 4, 'int': 1, 'getReader': 1, 'STRING_LITERAL': 2, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock325,Native2ASCIIEncodingTest.java,0.8666666666666667,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
409,CodeBlock318,808,827,Native2ASCIIEncodingTest.java,"['public void readShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'Reader reader = getReader(""\\\\\\\\u21aF"");', 'int c = reader.read();', ""assertThat((char) c, is(equalTo('\\\\')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('\\\\')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('u')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('2')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('1')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('a')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('F')));"", 'c = reader.read();', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'readShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 19, 'getReader': 1, 'STRING_LITERAL': 8, 'int': 1, 'read': 8, 'assertThat': 8, 'char': 7, 'is': 8, 'equalTo': 8, 'INTEGER_LITERAL': 2}",CodeBlock307,Native2ASCIIEncodingTest.java,0.9733333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
410,CodeBlock319,830,842,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'int c = getReader(""\\\\\\\\u21aF"").read(bufferArray);', 'assertThat(c, is(equalTo(7)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('F')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 19, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 8, 'read': 1, 'assertThat': 8, 'is': 8, 'equalTo': 8, 'INTEGER_LITERAL': 16}",CodeBlock308,Native2ASCIIEncodingTest.java,0.9736842105263158,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
411,CodeBlock319,830,842,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'int c = getReader(""\\\\\\\\u21aF"").read(bufferArray);', 'assertThat(c, is(equalTo(7)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('F')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 19, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 8, 'read': 1, 'assertThat': 8, 'is': 8, 'equalTo': 8, 'INTEGER_LITERAL': 16}",CodeBlock309,Native2ASCIIEncodingTest.java,0.9487179487179487,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
412,CodeBlock319,830,842,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'int c = getReader(""\\\\\\\\u21aF"").read(bufferArray);', 'assertThat(c, is(equalTo(7)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('F')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 19, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 8, 'read': 1, 'assertThat': 8, 'is': 8, 'equalTo': 8, 'INTEGER_LITERAL': 16}",CodeBlock320,Native2ASCIIEncodingTest.java,0.9487179487179487,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
413,CodeBlock320,845,857,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'int c = getReader(""\\\\\\\\u21aF"").read(bufferArray, 0, 7);', 'assertThat(c, is(equalTo(7)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('F')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 19, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 8, 'read': 1, 'INTEGER_LITERAL': 18, 'assertThat': 8, 'is': 8, 'equalTo': 8}",CodeBlock308,Native2ASCIIEncodingTest.java,0.9487179487179487,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
414,CodeBlock320,845,857,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'int c = getReader(""\\\\\\\\u21aF"").read(bufferArray, 0, 7);', 'assertThat(c, is(equalTo(7)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('F')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 19, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 8, 'read': 1, 'INTEGER_LITERAL': 18, 'assertThat': 8, 'is': 8, 'equalTo': 8}",CodeBlock309,Native2ASCIIEncodingTest.java,0.9743589743589743,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
415,CodeBlock320,845,857,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'int c = getReader(""\\\\\\\\u21aF"").read(bufferArray, 0, 7);', 'assertThat(c, is(equalTo(7)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('F')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 19, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 8, 'read': 1, 'INTEGER_LITERAL': 18, 'assertThat': 8, 'is': 8, 'equalTo': 8}",CodeBlock319,Native2ASCIIEncodingTest.java,0.9487179487179487,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
416,CodeBlock321,860,869,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock278,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
417,CodeBlock321,860,869,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock282,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
418,CodeBlock321,860,869,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock286,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
419,CodeBlock321,860,869,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock294,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
420,CodeBlock321,860,869,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock298,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
421,CodeBlock321,860,869,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock310,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
422,CodeBlock321,860,869,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock314,Native2ASCIIEncodingTest.java,0.7894736842105263,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
423,CodeBlock321,860,869,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock325,Native2ASCIIEncodingTest.java,0.7941176470588235,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
424,CodeBlock321,860,869,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock330,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
425,CodeBlock321,860,869,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock334,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
426,CodeBlock321,860,869,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(7)));', 'assertThat(buffer.length(), is(equalTo(7)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock338,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
427,CodeBlock323,886,894,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes() throws IOException', '{', 'int c = getReader(""\\\\\\\\\\\\u21aF"").read(bufferArray);', 'assertThat(c, is(equalTo(3)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\u21aF')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 11, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 4, 'read': 1, 'assertThat': 4, 'is': 4, 'equalTo': 4, 'INTEGER_LITERAL': 8}",CodeBlock324,Native2ASCIIEncodingTest.java,0.9130434782608695,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
428,CodeBlock324,897,905,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes() throws IOException', '{', 'int c = getReader(""\\\\\\\\\\\\u21aF"").read(bufferArray, 0, 3);', 'assertThat(c, is(equalTo(3)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\u21af')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 11, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 4, 'read': 1, 'INTEGER_LITERAL': 10, 'assertThat': 4, 'is': 4, 'equalTo': 4}",CodeBlock323,Native2ASCIIEncodingTest.java,0.9130434782608695,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
429,CodeBlock325,908,916,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes() throws IOException', '{', 'Reader reader = getReader(""\\\\\\\\\\\\u21aF"");', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(3)));', 'assertThat(buffer.length(), is(equalTo(3)));', 'assertThat(buffer.toString(), is(equalTo(""\\\\\\\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getReader': 1, 'STRING_LITERAL': 2, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock273,Native2ASCIIEncodingTest.java,0.8666666666666667,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
430,CodeBlock325,908,916,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes() throws IOException', '{', 'Reader reader = getReader(""\\\\\\\\\\\\u21aF"");', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(3)));', 'assertThat(buffer.length(), is(equalTo(3)));', 'assertThat(buffer.toString(), is(equalTo(""\\\\\\\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getReader': 1, 'STRING_LITERAL': 2, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock278,Native2ASCIIEncodingTest.java,0.7428571428571429,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
431,CodeBlock325,908,916,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes() throws IOException', '{', 'Reader reader = getReader(""\\\\\\\\\\\\u21aF"");', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(3)));', 'assertThat(buffer.length(), is(equalTo(3)));', 'assertThat(buffer.toString(), is(equalTo(""\\\\\\\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getReader': 1, 'STRING_LITERAL': 2, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock282,Native2ASCIIEncodingTest.java,0.7428571428571429,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
432,CodeBlock325,908,916,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes() throws IOException', '{', 'Reader reader = getReader(""\\\\\\\\\\\\u21aF"");', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(3)));', 'assertThat(buffer.length(), is(equalTo(3)));', 'assertThat(buffer.toString(), is(equalTo(""\\\\\\\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getReader': 1, 'STRING_LITERAL': 2, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock286,Native2ASCIIEncodingTest.java,0.7428571428571429,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
433,CodeBlock325,908,916,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes() throws IOException', '{', 'Reader reader = getReader(""\\\\\\\\\\\\u21aF"");', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(3)));', 'assertThat(buffer.length(), is(equalTo(3)));', 'assertThat(buffer.toString(), is(equalTo(""\\\\\\\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getReader': 1, 'STRING_LITERAL': 2, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock294,Native2ASCIIEncodingTest.java,0.84375,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
434,CodeBlock325,908,916,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes() throws IOException', '{', 'Reader reader = getReader(""\\\\\\\\\\\\u21aF"");', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(3)));', 'assertThat(buffer.length(), is(equalTo(3)));', 'assertThat(buffer.toString(), is(equalTo(""\\\\\\\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getReader': 1, 'STRING_LITERAL': 2, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock298,Native2ASCIIEncodingTest.java,0.84375,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
435,CodeBlock325,908,916,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes() throws IOException', '{', 'Reader reader = getReader(""\\\\\\\\\\\\u21aF"");', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(3)));', 'assertThat(buffer.length(), is(equalTo(3)));', 'assertThat(buffer.toString(), is(equalTo(""\\\\\\\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getReader': 1, 'STRING_LITERAL': 2, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock310,Native2ASCIIEncodingTest.java,0.7941176470588235,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
436,CodeBlock325,908,916,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes() throws IOException', '{', 'Reader reader = getReader(""\\\\\\\\\\\\u21aF"");', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(3)));', 'assertThat(buffer.length(), is(equalTo(3)));', 'assertThat(buffer.toString(), is(equalTo(""\\\\\\\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getReader': 1, 'STRING_LITERAL': 2, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock317,Native2ASCIIEncodingTest.java,0.8666666666666667,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
437,CodeBlock325,908,916,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes() throws IOException', '{', 'Reader reader = getReader(""\\\\\\\\\\\\u21aF"");', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(3)));', 'assertThat(buffer.length(), is(equalTo(3)));', 'assertThat(buffer.toString(), is(equalTo(""\\\\\\\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getReader': 1, 'STRING_LITERAL': 2, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock321,Native2ASCIIEncodingTest.java,0.7941176470588235,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
438,CodeBlock325,908,916,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes() throws IOException', '{', 'Reader reader = getReader(""\\\\\\\\\\\\u21aF"");', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(3)));', 'assertThat(buffer.length(), is(equalTo(3)));', 'assertThat(buffer.toString(), is(equalTo(""\\\\\\\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getReader': 1, 'STRING_LITERAL': 2, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock330,Native2ASCIIEncodingTest.java,0.7941176470588235,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
439,CodeBlock325,908,916,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes() throws IOException', '{', 'Reader reader = getReader(""\\\\\\\\\\\\u21aF"");', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(3)));', 'assertThat(buffer.length(), is(equalTo(3)));', 'assertThat(buffer.toString(), is(equalTo(""\\\\\\\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getReader': 1, 'STRING_LITERAL': 2, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock334,Native2ASCIIEncodingTest.java,0.7941176470588235,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
440,CodeBlock325,908,916,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes() throws IOException', '{', 'Reader reader = getReader(""\\\\\\\\\\\\u21aF"");', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(3)));', 'assertThat(buffer.length(), is(equalTo(3)));', 'assertThat(buffer.toString(), is(equalTo(""\\\\\\\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldConvertEscapeSequenceThatFollowsTwoBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 6, 'getReader': 1, 'STRING_LITERAL': 2, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock338,Native2ASCIIEncodingTest.java,0.7941176470588235,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
441,CodeBlock328,977,991,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes() throws IOException', '{', 'int c = getReader(""\\\\\\\\\\\\\\\\u21aF"").read(bufferArray);', 'assertThat(c, is(equalTo(9)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('F')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 23, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 10, 'read': 1, 'assertThat': 10, 'is': 10, 'equalTo': 10, 'INTEGER_LITERAL': 20}",CodeBlock329,Native2ASCIIEncodingTest.java,0.9574468085106383,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
442,CodeBlock329,994,1008,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes() throws IOException', '{', 'int c = getReader(""\\\\\\\\\\\\\\\\u21aF"").read(bufferArray, 0, 9);', 'assertThat(c, is(equalTo(9)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('F')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 23, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 10, 'read': 1, 'INTEGER_LITERAL': 22, 'assertThat': 10, 'is': 10, 'equalTo': 10}",CodeBlock328,Native2ASCIIEncodingTest.java,0.9574468085106383,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
443,CodeBlock330,1011,1020,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes() throws IOException', '{', 'String input = ""\\\\\\\\\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(9)));', 'assertThat(buffer.length(), is(equalTo(9)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock278,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
444,CodeBlock330,1011,1020,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes() throws IOException', '{', 'String input = ""\\\\\\\\\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(9)));', 'assertThat(buffer.length(), is(equalTo(9)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock282,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
445,CodeBlock330,1011,1020,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes() throws IOException', '{', 'String input = ""\\\\\\\\\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(9)));', 'assertThat(buffer.length(), is(equalTo(9)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock286,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
446,CodeBlock330,1011,1020,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes() throws IOException', '{', 'String input = ""\\\\\\\\\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(9)));', 'assertThat(buffer.length(), is(equalTo(9)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock294,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
447,CodeBlock330,1011,1020,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes() throws IOException', '{', 'String input = ""\\\\\\\\\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(9)));', 'assertThat(buffer.length(), is(equalTo(9)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock298,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
448,CodeBlock330,1011,1020,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes() throws IOException', '{', 'String input = ""\\\\\\\\\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(9)));', 'assertThat(buffer.length(), is(equalTo(9)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock310,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
449,CodeBlock330,1011,1020,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes() throws IOException', '{', 'String input = ""\\\\\\\\\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(9)));', 'assertThat(buffer.length(), is(equalTo(9)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock314,Native2ASCIIEncodingTest.java,0.7894736842105263,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
450,CodeBlock330,1011,1020,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes() throws IOException', '{', 'String input = ""\\\\\\\\\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(9)));', 'assertThat(buffer.length(), is(equalTo(9)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock321,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
451,CodeBlock330,1011,1020,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes() throws IOException', '{', 'String input = ""\\\\\\\\\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(9)));', 'assertThat(buffer.length(), is(equalTo(9)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock325,Native2ASCIIEncodingTest.java,0.7941176470588235,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
452,CodeBlock330,1011,1020,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes() throws IOException', '{', 'String input = ""\\\\\\\\\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(9)));', 'assertThat(buffer.length(), is(equalTo(9)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock334,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
453,CodeBlock330,1011,1020,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes() throws IOException', '{', 'String input = ""\\\\\\\\\\\\\\\\u21aF"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(9)));', 'assertThat(buffer.length(), is(equalTo(9)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreEscapeSequenceThatFollowsThreeBackslashes': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock338,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
454,CodeBlock331,1023,1040,Native2ASCIIEncodingTest.java,"['public void readShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'Reader reader = getReader(""\\\\\\\\u21a"");', 'int c = reader.read();', ""assertThat((char) c, is(equalTo('\\\\')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('\\\\')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('u')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('2')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('1')));"", 'c = reader.read();', ""assertThat((char) c, is(equalTo('a')));"", 'c = reader.read();', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'readShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 17, 'getReader': 1, 'STRING_LITERAL': 7, 'int': 1, 'read': 7, 'assertThat': 7, 'char': 6, 'is': 7, 'equalTo': 7, 'INTEGER_LITERAL': 2}",CodeBlock311,Native2ASCIIEncodingTest.java,0.8888888888888888,0.6,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
455,CodeBlock332,1043,1054,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'int c = getReader(""\\\\\\\\u21a"").read(bufferArray);', 'assertThat(c, is(equalTo(6)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 17, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 7, 'read': 1, 'assertThat': 7, 'is': 7, 'equalTo': 7, 'INTEGER_LITERAL': 14}",CodeBlock312,Native2ASCIIEncodingTest.java,0.8904109589041096,0.6,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
456,CodeBlock332,1043,1054,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'int c = getReader(""\\\\\\\\u21a"").read(bufferArray);', 'assertThat(c, is(equalTo(6)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 17, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 7, 'read': 1, 'assertThat': 7, 'is': 7, 'equalTo': 7, 'INTEGER_LITERAL': 14}",CodeBlock313,Native2ASCIIEncodingTest.java,0.8666666666666667,0.6,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
457,CodeBlock332,1043,1054,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'int c = getReader(""\\\\\\\\u21a"").read(bufferArray);', 'assertThat(c, is(equalTo(6)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 17, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 7, 'read': 1, 'assertThat': 7, 'is': 7, 'equalTo': 7, 'INTEGER_LITERAL': 14}",CodeBlock333,Native2ASCIIEncodingTest.java,0.9428571428571428,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
458,CodeBlock333,1057,1069,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash()', 'throws IOException', '{', 'int c = getReader(""\\\\\\\\u21a"").read(bufferArray, 0, 6);', 'assertThat(c, is(equalTo(6)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 17, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 7, 'read': 1, 'INTEGER_LITERAL': 16, 'assertThat': 7, 'is': 7, 'equalTo': 7}",CodeBlock312,Native2ASCIIEncodingTest.java,0.8666666666666667,0.6,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
459,CodeBlock333,1057,1069,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash()', 'throws IOException', '{', 'int c = getReader(""\\\\\\\\u21a"").read(bufferArray, 0, 6);', 'assertThat(c, is(equalTo(6)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 17, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 7, 'read': 1, 'INTEGER_LITERAL': 16, 'assertThat': 7, 'is': 7, 'equalTo': 7}",CodeBlock313,Native2ASCIIEncodingTest.java,0.8933333333333333,0.6,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
460,CodeBlock333,1057,1069,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash()', 'throws IOException', '{', 'int c = getReader(""\\\\\\\\u21a"").read(bufferArray, 0, 6);', 'assertThat(c, is(equalTo(6)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 17, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 7, 'read': 1, 'INTEGER_LITERAL': 16, 'assertThat': 7, 'is': 7, 'equalTo': 7}",CodeBlock332,Native2ASCIIEncodingTest.java,0.9428571428571428,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
461,CodeBlock334,1072,1081,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21a"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock278,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
462,CodeBlock334,1072,1081,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21a"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock282,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
463,CodeBlock334,1072,1081,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21a"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock286,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
464,CodeBlock334,1072,1081,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21a"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock294,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
465,CodeBlock334,1072,1081,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21a"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock298,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
466,CodeBlock334,1072,1081,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21a"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock310,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
467,CodeBlock334,1072,1081,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21a"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock314,Native2ASCIIEncodingTest.java,0.7894736842105263,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
468,CodeBlock334,1072,1081,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21a"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock321,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
469,CodeBlock334,1072,1081,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21a"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock325,Native2ASCIIEncodingTest.java,0.7941176470588235,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
470,CodeBlock334,1072,1081,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21a"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock330,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
471,CodeBlock334,1072,1081,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""\\\\\\\\u21a"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(6)));', 'assertThat(buffer.length(), is(equalTo(6)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreIncompleteEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock338,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
472,CodeBlock336,1128,1151,Native2ASCIIEncodingTest.java,"['public void read_charArray_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'int c = getReader(""asdf\\\\: \\\\\\\\u21alasdf"").read(bufferArray);', 'assertThat(c, is(equalTo(18)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo(':')));"", ""assertThat(bufferArray[i++], is(equalTo(' ')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('l')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 41, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 19, 'read': 1, 'assertThat': 19, 'is': 19, 'equalTo': 19, 'INTEGER_LITERAL': 38}",CodeBlock337,Native2ASCIIEncodingTest.java,0.9759036144578314,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
473,CodeBlock337,1154,1178,Native2ASCIIEncodingTest.java,"['public void read_charArray_int_int_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash()', 'throws IOException', '{', 'int c = getReader(""asdf\\\\: \\\\\\\\u21alasdf"").read(bufferArray, 0, 18);', 'assertThat(c, is(equalTo(18)));', 'int i = 0;', ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo(':')));"", ""assertThat(bufferArray[i++], is(equalTo(' ')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('\\\\')));"", ""assertThat(bufferArray[i++], is(equalTo('u')));"", ""assertThat(bufferArray[i++], is(equalTo('2')));"", ""assertThat(bufferArray[i++], is(equalTo('1')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('l')));"", ""assertThat(bufferArray[i++], is(equalTo('a')));"", ""assertThat(bufferArray[i++], is(equalTo('s')));"", ""assertThat(bufferArray[i++], is(equalTo('d')));"", ""assertThat(bufferArray[i++], is(equalTo('f')));"", '}']","{'public': 1, 'void': 1, 'read_charArray_int_int_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 41, 'int': 2, 'getReader': 1, 'STRING_LITERAL': 19, 'read': 1, 'INTEGER_LITERAL': 40, 'assertThat': 19, 'is': 19, 'equalTo': 19}",CodeBlock336,Native2ASCIIEncodingTest.java,0.9759036144578314,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
474,CodeBlock338,1181,1190,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""asdf\\\\: \\\\\\\\u21alasdf"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(18)));', 'assertThat(buffer.length(), is(equalTo(18)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock278,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
475,CodeBlock338,1181,1190,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""asdf\\\\: \\\\\\\\u21alasdf"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(18)));', 'assertThat(buffer.length(), is(equalTo(18)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock282,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
476,CodeBlock338,1181,1190,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""asdf\\\\: \\\\\\\\u21alasdf"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(18)));', 'assertThat(buffer.length(), is(equalTo(18)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock286,Native2ASCIIEncodingTest.java,0.8823529411764706,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
477,CodeBlock338,1181,1190,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""asdf\\\\: \\\\\\\\u21alasdf"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(18)));', 'assertThat(buffer.length(), is(equalTo(18)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock294,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
478,CodeBlock338,1181,1190,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""asdf\\\\: \\\\\\\\u21alasdf"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(18)));', 'assertThat(buffer.length(), is(equalTo(18)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock298,Native2ASCIIEncodingTest.java,0.8787878787878788,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
479,CodeBlock338,1181,1190,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""asdf\\\\: \\\\\\\\u21alasdf"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(18)));', 'assertThat(buffer.length(), is(equalTo(18)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock310,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
480,CodeBlock338,1181,1190,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""asdf\\\\: \\\\\\\\u21alasdf"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(18)));', 'assertThat(buffer.length(), is(equalTo(18)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock314,Native2ASCIIEncodingTest.java,0.7894736842105263,0.6666666666666666,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
481,CodeBlock338,1181,1190,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""asdf\\\\: \\\\\\\\u21alasdf"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(18)));', 'assertThat(buffer.length(), is(equalTo(18)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock321,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
482,CodeBlock338,1181,1190,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""asdf\\\\: \\\\\\\\u21alasdf"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(18)));', 'assertThat(buffer.length(), is(equalTo(18)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock325,Native2ASCIIEncodingTest.java,0.7941176470588235,0.75,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
483,CodeBlock338,1181,1190,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""asdf\\\\: \\\\\\\\u21alasdf"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(18)));', 'assertThat(buffer.length(), is(equalTo(18)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock330,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
484,CodeBlock338,1181,1190,Native2ASCIIEncodingTest.java,"['public void read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash() throws IOException', '{', 'String input = ""asdf\\\\: \\\\\\\\u21alasdf"";', 'Reader reader = getReader(input);', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(18)));', 'assertThat(buffer.length(), is(equalTo(18)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'read_CharBuffer_ShouldIgnoreMalformedEscapeSequenceThatFollowsOneBackslash': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'int': 1, 'read': 1, 'flip': 1, 'assertThat': 3, 'is': 3, 'equalTo': 3, 'INTEGER_LITERAL': 2, 'length': 1, 'toString': 1}",CodeBlock334,Native2ASCIIEncodingTest.java,0.9393939393939394,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
485,CodeBlock340,1233,1245,Native2ASCIIEncodingTest.java,"['public void skipShouldNotDoAnythingIfToSkipIsZero() throws IOException', '{', 'String input = ""asdf\\\\: \\\\\\\\u21alasdf"";', 'Reader reader = getReader(input);', 'long skipped = reader.skip(0);', 'assertThat(skipped, is(equalTo(0L)));', '', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(18)));', 'assertThat(buffer.length(), is(equalTo(18)));', 'assertThat(buffer.toString(), is(equalTo(input)));', '}']","{'public': 1, 'void': 1, 'skipShouldNotDoAnythingIfToSkipIsZero': 1, 'throws': 1, 'TOKEN_VARIABLE': 12, 'String': 1, 'STRING_LITERAL': 1, 'getReader': 1, 'long': 1, 'skip': 1, 'INTEGER_LITERAL': 3, 'assertThat': 4, 'is': 4, 'equalTo': 4, 'int': 1, 'read': 1, 'flip': 1, 'length': 1, 'toString': 1}",CodeBlock341,Native2ASCIIEncodingTest.java,0.8372093023255814,0.8,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
486,CodeBlock341,1248,1259,Native2ASCIIEncodingTest.java,"['public void skipShouldSkipGivenAmountIfAvailable() throws IOException', '{', 'Reader reader = getReader(""asdf\\\\: \\\\\\\\u21alasdf"");', 'long skipped = reader.skip(8);', 'assertThat(skipped, is(equalTo(8L)));', '', 'int c = reader.read(buffer);', 'buffer.flip();', 'assertThat(c, is(equalTo(10)));', 'assertThat(buffer.length(), is(equalTo(10)));', 'assertThat(buffer.toString(), is(equalTo(""\\\\u21alasdf"")));', '}']","{'public': 1, 'void': 1, 'skipShouldSkipGivenAmountIfAvailable': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'getReader': 1, 'STRING_LITERAL': 2, 'long': 1, 'skip': 1, 'INTEGER_LITERAL': 3, 'assertThat': 4, 'is': 4, 'equalTo': 4, 'int': 1, 'read': 1, 'flip': 1, 'length': 1, 'toString': 1}",CodeBlock340,Native2ASCIIEncodingTest.java,0.8372093023255814,0.8,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
487,CodeBlock342,1262,1270,Native2ASCIIEncodingTest.java,"['public void skipShouldSkipAllIfToSkipIsGreaterThanInputLength() throws IOException', '{', 'Reader reader = getReader(""asdf\\\\: \\\\\\\\u21alasdf"");', 'long skipped = reader.skip(20);', 'assertThat(skipped, is(equalTo(18L)));', '', 'int c = reader.read();', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'skipShouldSkipAllIfToSkipIsGreaterThanInputLength': 1, 'throws': 1, 'TOKEN_VARIABLE': 8, 'getReader': 1, 'STRING_LITERAL': 1, 'long': 1, 'skip': 1, 'INTEGER_LITERAL': 3, 'assertThat': 2, 'is': 2, 'equalTo': 2, 'int': 1, 'read': 1}",CodeBlock304,Native2ASCIIEncodingTest.java,0.7096774193548387,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
488,CodeBlock342,1262,1270,Native2ASCIIEncodingTest.java,"['public void skipShouldSkipAllIfToSkipIsGreaterThanInputLength() throws IOException', '{', 'Reader reader = getReader(""asdf\\\\: \\\\\\\\u21alasdf"");', 'long skipped = reader.skip(20);', 'assertThat(skipped, is(equalTo(18L)));', '', 'int c = reader.read();', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'skipShouldSkipAllIfToSkipIsGreaterThanInputLength': 1, 'throws': 1, 'TOKEN_VARIABLE': 8, 'getReader': 1, 'STRING_LITERAL': 1, 'long': 1, 'skip': 1, 'INTEGER_LITERAL': 3, 'assertThat': 2, 'is': 2, 'equalTo': 2, 'int': 1, 'read': 1}",CodeBlock305,Native2ASCIIEncodingTest.java,0.71875,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
489,CodeBlock342,1262,1270,Native2ASCIIEncodingTest.java,"['public void skipShouldSkipAllIfToSkipIsGreaterThanInputLength() throws IOException', '{', 'Reader reader = getReader(""asdf\\\\: \\\\\\\\u21alasdf"");', 'long skipped = reader.skip(20);', 'assertThat(skipped, is(equalTo(18L)));', '', 'int c = reader.read();', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'skipShouldSkipAllIfToSkipIsGreaterThanInputLength': 1, 'throws': 1, 'TOKEN_VARIABLE': 8, 'getReader': 1, 'STRING_LITERAL': 1, 'long': 1, 'skip': 1, 'INTEGER_LITERAL': 3, 'assertThat': 2, 'is': 2, 'equalTo': 2, 'int': 1, 'read': 1}",CodeBlock306,Native2ASCIIEncodingTest.java,0.65625,0.75,0.8,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
490,CodeBlock345,1302,1315,Native2ASCIIEncodingTest.java,"['public void readerShouldBeAbleToDecodeWhatWriterHasEncoded() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write('\\u21AF');"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', 'ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());', 'reader = native2ASCIIEncoding.getTextReader(bais);', 'int c = reader.read();', ""assertThat((char) c, is(equalTo('\\u21AF')));"", 'c = reader.read();', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'readerShouldBeAbleToDecodeWhatWriterHasEncoded': 1, 'throws': 1, 'TOKEN_VARIABLE': 13, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 4, 'flush': 1, 'assertThat': 3, 'toString': 1, 'is': 3, 'equalTo': 3, 'ByteArrayInputStream': 1, 'toByteArray': 1, 'getTextReader': 1, 'int': 1, 'read': 2, 'char': 1, 'INTEGER_LITERAL': 2}",CodeBlock347,Native2ASCIIEncodingTest.java,0.7894736842105263,1.0,0.875,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
491,CodeBlock347,1347,1365,Native2ASCIIEncodingTest.java,"['public void readerShouldDecodeIfWriterHasWrittenEscapeSequenceAsSingleCharacters() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write('\\\\');"", ""writer.write('u');"", ""writer.write('2');"", ""writer.write('1');"", ""writer.write('a');"", ""writer.write('F');"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', 'ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());', 'reader = native2ASCIIEncoding.getTextReader(bais);', 'int c = reader.read();', ""assertThat((char) c, is(equalTo('\\u21aF')));"", 'c = reader.read();', 'assertThat(c, is(equalTo(-1)));', '}']","{'public': 1, 'void': 1, 'readerShouldDecodeIfWriterHasWrittenEscapeSequenceAsSingleCharacters': 1, 'throws': 1, 'TOKEN_VARIABLE': 13, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 6, 'STRING_LITERAL': 9, 'flush': 1, 'assertThat': 3, 'toString': 1, 'is': 3, 'equalTo': 3, 'ByteArrayInputStream': 1, 'toByteArray': 1, 'getTextReader': 1, 'int': 1, 'read': 2, 'char': 1, 'INTEGER_LITERAL': 2}",CodeBlock345,Native2ASCIIEncodingTest.java,0.7894736842105263,1.0,0.875,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
492,CodeBlock348,1368,1380,Native2ASCIIEncodingTest.java,"['public void write_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write('\\\\');"", ""writer.write('u');"", ""writer.write('2');"", ""writer.write('1');"", ""writer.write('a');"", ""writer.write('F');"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 6, 'STRING_LITERAL': 8, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock349,Native2ASCIIEncodingTest.java,0.6944444444444444,1.0,0.8,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
493,CodeBlock348,1368,1380,Native2ASCIIEncodingTest.java,"['public void write_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write('\\\\');"", ""writer.write('u');"", ""writer.write('2');"", ""writer.write('1');"", ""writer.write('a');"", ""writer.write('F');"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 6, 'STRING_LITERAL': 8, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock351,Native2ASCIIEncodingTest.java,0.7352941176470589,1.0,0.8,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
494,CodeBlock349,1383,1390,Native2ASCIIEncodingTest.java,"['public void write_charArray_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\\\', 'u', '2', '1', 'a', 'F' }, 0, 6);"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 8, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock348,Native2ASCIIEncodingTest.java,0.6944444444444444,1.0,0.8,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
495,CodeBlock349,1383,1390,Native2ASCIIEncodingTest.java,"['public void write_charArray_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\\\', 'u', '2', '1', 'a', 'F' }, 0, 6);"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 8, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock350,Native2ASCIIEncodingTest.java,0.7096774193548387,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
496,CodeBlock349,1383,1390,Native2ASCIIEncodingTest.java,"['public void write_charArray_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\\\', 'u', '2', '1', 'a', 'F' }, 0, 6);"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 8, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock351,Native2ASCIIEncodingTest.java,0.8709677419354839,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
497,CodeBlock349,1383,1390,Native2ASCIIEncodingTest.java,"['public void write_charArray_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\\\', 'u', '2', '1', 'a', 'F' }, 0, 6);"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 8, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock357,Native2ASCIIEncodingTest.java,0.7741935483870968,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
498,CodeBlock349,1383,1390,Native2ASCIIEncodingTest.java,"['public void write_charArray_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\\\', 'u', '2', '1', 'a', 'F' }, 0, 6);"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 8, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock358,Native2ASCIIEncodingTest.java,0.7096774193548387,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
499,CodeBlock349,1383,1390,Native2ASCIIEncodingTest.java,"['public void write_charArray_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\\\', 'u', '2', '1', 'a', 'F' }, 0, 6);"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 8, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock359,Native2ASCIIEncodingTest.java,0.7096774193548387,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
500,CodeBlock350,1393,1400,Native2ASCIIEncodingTest.java,"['public void write_String_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\\\u21aF"", 0, 6);', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_String_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock349,Native2ASCIIEncodingTest.java,0.7096774193548387,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
501,CodeBlock350,1393,1400,Native2ASCIIEncodingTest.java,"['public void write_String_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\\\u21aF"", 0, 6);', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_String_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock352,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
502,CodeBlock350,1393,1400,Native2ASCIIEncodingTest.java,"['public void write_String_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\\\u21aF"", 0, 6);', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_String_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock356,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
503,CodeBlock350,1393,1400,Native2ASCIIEncodingTest.java,"['public void write_String_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\\\u21aF"", 0, 6);', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_String_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock357,Native2ASCIIEncodingTest.java,0.8461538461538461,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
504,CodeBlock350,1393,1400,Native2ASCIIEncodingTest.java,"['public void write_String_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\\\u21aF"", 0, 6);', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_String_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock358,Native2ASCIIEncodingTest.java,0.9166666666666666,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
505,CodeBlock350,1393,1400,Native2ASCIIEncodingTest.java,"['public void write_String_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\\\u21aF"", 0, 6);', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_String_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock359,Native2ASCIIEncodingTest.java,0.7692307692307693,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
506,CodeBlock350,1393,1400,Native2ASCIIEncodingTest.java,"['public void write_String_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\\\u21aF"", 0, 6);', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_String_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock360,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
507,CodeBlock351,1403,1410,Native2ASCIIEncodingTest.java,"['public void write_charArray_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\\\', 'u', '2', '1', 'a', 'F' });"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 8, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock348,Native2ASCIIEncodingTest.java,0.7352941176470589,1.0,0.8,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
508,CodeBlock351,1403,1410,Native2ASCIIEncodingTest.java,"['public void write_charArray_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\\\', 'u', '2', '1', 'a', 'F' });"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 8, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock349,Native2ASCIIEncodingTest.java,0.8709677419354839,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
509,CodeBlock351,1403,1410,Native2ASCIIEncodingTest.java,"['public void write_charArray_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\\\', 'u', '2', '1', 'a', 'F' });"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 8, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock352,Native2ASCIIEncodingTest.java,0.6896551724137931,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
510,CodeBlock351,1403,1410,Native2ASCIIEncodingTest.java,"['public void write_charArray_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\\\', 'u', '2', '1', 'a', 'F' });"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 8, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock356,Native2ASCIIEncodingTest.java,0.6896551724137931,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
511,CodeBlock351,1403,1410,Native2ASCIIEncodingTest.java,"['public void write_charArray_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\\\', 'u', '2', '1', 'a', 'F' });"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 8, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock357,Native2ASCIIEncodingTest.java,0.7096774193548387,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
512,CodeBlock351,1403,1410,Native2ASCIIEncodingTest.java,"['public void write_charArray_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\\\', 'u', '2', '1', 'a', 'F' });"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 8, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock359,Native2ASCIIEncodingTest.java,0.7586206896551724,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
513,CodeBlock351,1403,1410,Native2ASCIIEncodingTest.java,"['public void write_charArray_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\\\', 'u', '2', '1', 'a', 'F' });"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 8, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock360,Native2ASCIIEncodingTest.java,0.6896551724137931,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
514,CodeBlock352,1413,1420,Native2ASCIIEncodingTest.java,"['public void write_String_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\\\u21aF"");', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_String_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock350,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
515,CodeBlock352,1413,1420,Native2ASCIIEncodingTest.java,"['public void write_String_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\\\u21aF"");', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_String_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock351,Native2ASCIIEncodingTest.java,0.6896551724137931,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
516,CodeBlock352,1413,1420,Native2ASCIIEncodingTest.java,"['public void write_String_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\\\u21aF"");', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_String_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock356,Native2ASCIIEncodingTest.java,0.9090909090909091,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
517,CodeBlock352,1413,1420,Native2ASCIIEncodingTest.java,"['public void write_String_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\\\u21aF"");', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_String_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock357,Native2ASCIIEncodingTest.java,0.7692307692307693,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
518,CodeBlock352,1413,1420,Native2ASCIIEncodingTest.java,"['public void write_String_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\\\u21aF"");', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_String_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock358,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
519,CodeBlock352,1413,1420,Native2ASCIIEncodingTest.java,"['public void write_String_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\\\u21aF"");', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_String_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock359,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
520,CodeBlock352,1413,1420,Native2ASCIIEncodingTest.java,"['public void write_String_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\\\u21aF"");', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'write_String_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock360,Native2ASCIIEncodingTest.java,0.9090909090909091,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
521,CodeBlock353,1423,1431,Native2ASCIIEncodingTest.java,"['public void append_char_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""Writer returnedWriter = writer.append('\\\\').append('u').append('2').append('1').append('a').append('F');"", 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_char_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 6, 'STRING_LITERAL': 8, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock354,Native2ASCIIEncodingTest.java,0.6585365853658537,1.0,0.8333333333333334,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
522,CodeBlock353,1423,1431,Native2ASCIIEncodingTest.java,"['public void append_char_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""Writer returnedWriter = writer.append('\\\\').append('u').append('2').append('1').append('a').append('F');"", 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_char_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 6, 'STRING_LITERAL': 8, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock355,Native2ASCIIEncodingTest.java,0.6923076923076923,1.0,0.8333333333333334,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
523,CodeBlock353,1423,1431,Native2ASCIIEncodingTest.java,"['public void append_char_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""Writer returnedWriter = writer.append('\\\\').append('u').append('2').append('1').append('a').append('F');"", 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_char_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 6, 'STRING_LITERAL': 8, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock361,Native2ASCIIEncodingTest.java,0.6923076923076923,1.0,0.8333333333333334,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
524,CodeBlock353,1423,1431,Native2ASCIIEncodingTest.java,"['public void append_char_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""Writer returnedWriter = writer.append('\\\\').append('u').append('2').append('1').append('a').append('F');"", 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_char_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 6, 'STRING_LITERAL': 8, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock362,Native2ASCIIEncodingTest.java,0.6585365853658537,1.0,0.8333333333333334,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
525,CodeBlock353,1423,1431,Native2ASCIIEncodingTest.java,"['public void append_char_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""Writer returnedWriter = writer.append('\\\\').append('u').append('2').append('1').append('a').append('F');"", 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_char_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 6, 'STRING_LITERAL': 8, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock363,Native2ASCIIEncodingTest.java,0.6923076923076923,1.0,0.8333333333333334,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
526,CodeBlock353,1423,1431,Native2ASCIIEncodingTest.java,"['public void append_char_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""Writer returnedWriter = writer.append('\\\\').append('u').append('2').append('1').append('a').append('F');"", 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_char_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 6, 'STRING_LITERAL': 8, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock365,Native2ASCIIEncodingTest.java,0.65,1.0,0.8333333333333334,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
527,CodeBlock354,1434,1442,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\\\u21aF"", 0, 6);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock353,Native2ASCIIEncodingTest.java,0.6585365853658537,1.0,0.8333333333333334,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
528,CodeBlock354,1434,1442,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\\\u21aF"", 0, 6);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock355,Native2ASCIIEncodingTest.java,0.8709677419354839,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
529,CodeBlock354,1434,1442,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\\\u21aF"", 0, 6);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock361,Native2ASCIIEncodingTest.java,0.8709677419354839,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
530,CodeBlock354,1434,1442,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\\\u21aF"", 0, 6);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock362,Native2ASCIIEncodingTest.java,0.9354838709677419,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
531,CodeBlock354,1434,1442,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\\\u21aF"", 0, 6);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock363,Native2ASCIIEncodingTest.java,0.8709677419354839,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
532,CodeBlock354,1434,1442,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\\\u21aF"", 0, 6);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock364,Native2ASCIIEncodingTest.java,0.875,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
533,CodeBlock354,1434,1442,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\\\u21aF"", 0, 6);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock365,Native2ASCIIEncodingTest.java,0.8125,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
534,CodeBlock355,1445,1453,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\\\u21aF"");', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock353,Native2ASCIIEncodingTest.java,0.6923076923076923,1.0,0.8333333333333334,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
535,CodeBlock355,1445,1453,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\\\u21aF"");', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock354,Native2ASCIIEncodingTest.java,0.8709677419354839,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
536,CodeBlock355,1445,1453,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\\\u21aF"");', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock361,Native2ASCIIEncodingTest.java,0.9310344827586207,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
537,CodeBlock355,1445,1453,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\\\u21aF"");', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock362,Native2ASCIIEncodingTest.java,0.8709677419354839,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
538,CodeBlock355,1445,1453,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\\\u21aF"");', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock363,Native2ASCIIEncodingTest.java,0.9310344827586207,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
539,CodeBlock355,1445,1453,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\\\u21aF"");', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock364,Native2ASCIIEncodingTest.java,0.8125,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
540,CodeBlock355,1445,1453,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\\\u21aF"");', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21aF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock365,Native2ASCIIEncodingTest.java,0.8666666666666667,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
541,CodeBlock356,1456,1463,Native2ASCIIEncodingTest.java,"['public void write_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write('\\u21AF');"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock350,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
542,CodeBlock356,1456,1463,Native2ASCIIEncodingTest.java,"['public void write_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write('\\u21AF');"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock351,Native2ASCIIEncodingTest.java,0.6896551724137931,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
543,CodeBlock356,1456,1463,Native2ASCIIEncodingTest.java,"['public void write_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write('\\u21AF');"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock352,Native2ASCIIEncodingTest.java,0.9090909090909091,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
544,CodeBlock356,1456,1463,Native2ASCIIEncodingTest.java,"['public void write_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write('\\u21AF');"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock357,Native2ASCIIEncodingTest.java,0.7692307692307693,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
545,CodeBlock356,1456,1463,Native2ASCIIEncodingTest.java,"['public void write_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write('\\u21AF');"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock358,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
546,CodeBlock356,1456,1463,Native2ASCIIEncodingTest.java,"['public void write_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write('\\u21AF');"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock359,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
547,CodeBlock356,1456,1463,Native2ASCIIEncodingTest.java,"['public void write_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write('\\u21AF');"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock360,Native2ASCIIEncodingTest.java,0.9090909090909091,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
548,CodeBlock357,1466,1473,Native2ASCIIEncodingTest.java,"['public void write_charArray_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\u21AF' }, 0, 1);"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock349,Native2ASCIIEncodingTest.java,0.7741935483870968,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
549,CodeBlock357,1466,1473,Native2ASCIIEncodingTest.java,"['public void write_charArray_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\u21AF' }, 0, 1);"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock350,Native2ASCIIEncodingTest.java,0.8461538461538461,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
550,CodeBlock357,1466,1473,Native2ASCIIEncodingTest.java,"['public void write_charArray_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\u21AF' }, 0, 1);"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock351,Native2ASCIIEncodingTest.java,0.7096774193548387,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
551,CodeBlock357,1466,1473,Native2ASCIIEncodingTest.java,"['public void write_charArray_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\u21AF' }, 0, 1);"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock352,Native2ASCIIEncodingTest.java,0.7692307692307693,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
552,CodeBlock357,1466,1473,Native2ASCIIEncodingTest.java,"['public void write_charArray_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\u21AF' }, 0, 1);"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock356,Native2ASCIIEncodingTest.java,0.7692307692307693,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
553,CodeBlock357,1466,1473,Native2ASCIIEncodingTest.java,"['public void write_charArray_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\u21AF' }, 0, 1);"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock358,Native2ASCIIEncodingTest.java,0.8461538461538461,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
554,CodeBlock357,1466,1473,Native2ASCIIEncodingTest.java,"['public void write_charArray_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\u21AF' }, 0, 1);"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock359,Native2ASCIIEncodingTest.java,0.8461538461538461,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
555,CodeBlock357,1466,1473,Native2ASCIIEncodingTest.java,"['public void write_charArray_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\u21AF' }, 0, 1);"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock360,Native2ASCIIEncodingTest.java,0.7692307692307693,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
556,CodeBlock358,1476,1483,Native2ASCIIEncodingTest.java,"['public void write_String_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\u21AF"", 0, 1);', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_String_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock349,Native2ASCIIEncodingTest.java,0.7096774193548387,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
557,CodeBlock358,1476,1483,Native2ASCIIEncodingTest.java,"['public void write_String_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\u21AF"", 0, 1);', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_String_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock350,Native2ASCIIEncodingTest.java,0.9166666666666666,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
558,CodeBlock358,1476,1483,Native2ASCIIEncodingTest.java,"['public void write_String_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\u21AF"", 0, 1);', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_String_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock352,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
559,CodeBlock358,1476,1483,Native2ASCIIEncodingTest.java,"['public void write_String_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\u21AF"", 0, 1);', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_String_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock356,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
560,CodeBlock358,1476,1483,Native2ASCIIEncodingTest.java,"['public void write_String_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\u21AF"", 0, 1);', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_String_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock357,Native2ASCIIEncodingTest.java,0.8461538461538461,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
561,CodeBlock358,1476,1483,Native2ASCIIEncodingTest.java,"['public void write_String_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\u21AF"", 0, 1);', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_String_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock359,Native2ASCIIEncodingTest.java,0.7692307692307693,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
562,CodeBlock358,1476,1483,Native2ASCIIEncodingTest.java,"['public void write_String_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\u21AF"", 0, 1);', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_String_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock360,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
563,CodeBlock359,1486,1493,Native2ASCIIEncodingTest.java,"['public void write_charArray_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\u21AF' });"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock349,Native2ASCIIEncodingTest.java,0.7096774193548387,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
564,CodeBlock359,1486,1493,Native2ASCIIEncodingTest.java,"['public void write_charArray_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\u21AF' });"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock350,Native2ASCIIEncodingTest.java,0.7692307692307693,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
565,CodeBlock359,1486,1493,Native2ASCIIEncodingTest.java,"['public void write_charArray_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\u21AF' });"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock351,Native2ASCIIEncodingTest.java,0.7586206896551724,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
566,CodeBlock359,1486,1493,Native2ASCIIEncodingTest.java,"['public void write_charArray_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\u21AF' });"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock352,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
567,CodeBlock359,1486,1493,Native2ASCIIEncodingTest.java,"['public void write_charArray_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\u21AF' });"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock356,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
568,CodeBlock359,1486,1493,Native2ASCIIEncodingTest.java,"['public void write_charArray_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\u21AF' });"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock357,Native2ASCIIEncodingTest.java,0.8461538461538461,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
569,CodeBlock359,1486,1493,Native2ASCIIEncodingTest.java,"['public void write_charArray_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\u21AF' });"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock358,Native2ASCIIEncodingTest.java,0.7692307692307693,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
570,CodeBlock359,1486,1493,Native2ASCIIEncodingTest.java,"['public void write_charArray_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""writer.write(new char[] { '\\u21AF' });"", 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_charArray_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 2, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'char': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock360,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
571,CodeBlock360,1496,1503,Native2ASCIIEncodingTest.java,"['public void write_String_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\u21AF"");', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_String_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock350,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
572,CodeBlock360,1496,1503,Native2ASCIIEncodingTest.java,"['public void write_String_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\u21AF"");', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_String_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock351,Native2ASCIIEncodingTest.java,0.6896551724137931,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
573,CodeBlock360,1496,1503,Native2ASCIIEncodingTest.java,"['public void write_String_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\u21AF"");', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_String_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock352,Native2ASCIIEncodingTest.java,0.9090909090909091,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
574,CodeBlock360,1496,1503,Native2ASCIIEncodingTest.java,"['public void write_String_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\u21AF"");', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_String_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock356,Native2ASCIIEncodingTest.java,0.9090909090909091,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
575,CodeBlock360,1496,1503,Native2ASCIIEncodingTest.java,"['public void write_String_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\u21AF"");', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_String_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock357,Native2ASCIIEncodingTest.java,0.7692307692307693,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
576,CodeBlock360,1496,1503,Native2ASCIIEncodingTest.java,"['public void write_String_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\u21AF"");', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_String_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock358,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
577,CodeBlock360,1496,1503,Native2ASCIIEncodingTest.java,"['public void write_String_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'writer.write(""\\u21AF"");', 'writer.flush();', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'write_String_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 5, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'write': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 1, 'toString': 1, 'is': 1, 'equalTo': 1}",CodeBlock359,Native2ASCIIEncodingTest.java,0.8333333333333334,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
578,CodeBlock361,1506,1514,Native2ASCIIEncodingTest.java,"['public void append_char_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""Writer returnedWriter = writer.append('\\u21AF');"", 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_char_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock353,Native2ASCIIEncodingTest.java,0.6923076923076923,1.0,0.8333333333333334,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
579,CodeBlock361,1506,1514,Native2ASCIIEncodingTest.java,"['public void append_char_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""Writer returnedWriter = writer.append('\\u21AF');"", 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_char_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock354,Native2ASCIIEncodingTest.java,0.8709677419354839,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
580,CodeBlock361,1506,1514,Native2ASCIIEncodingTest.java,"['public void append_char_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""Writer returnedWriter = writer.append('\\u21AF');"", 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_char_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock355,Native2ASCIIEncodingTest.java,0.9310344827586207,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
581,CodeBlock361,1506,1514,Native2ASCIIEncodingTest.java,"['public void append_char_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""Writer returnedWriter = writer.append('\\u21AF');"", 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_char_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock362,Native2ASCIIEncodingTest.java,0.8709677419354839,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
582,CodeBlock361,1506,1514,Native2ASCIIEncodingTest.java,"['public void append_char_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""Writer returnedWriter = writer.append('\\u21AF');"", 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_char_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock363,Native2ASCIIEncodingTest.java,0.9310344827586207,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
583,CodeBlock361,1506,1514,Native2ASCIIEncodingTest.java,"['public void append_char_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""Writer returnedWriter = writer.append('\\u21AF');"", 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_char_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock364,Native2ASCIIEncodingTest.java,0.8125,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
584,CodeBlock361,1506,1514,Native2ASCIIEncodingTest.java,"['public void append_char_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', ""Writer returnedWriter = writer.append('\\u21AF');"", 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_char_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock365,Native2ASCIIEncodingTest.java,0.8666666666666667,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
585,CodeBlock362,1517,1525,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\u21AF"", 0, 1);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock353,Native2ASCIIEncodingTest.java,0.6585365853658537,1.0,0.8333333333333334,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
586,CodeBlock362,1517,1525,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\u21AF"", 0, 1);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock354,Native2ASCIIEncodingTest.java,0.9354838709677419,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
587,CodeBlock362,1517,1525,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\u21AF"", 0, 1);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock355,Native2ASCIIEncodingTest.java,0.8709677419354839,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
588,CodeBlock362,1517,1525,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\u21AF"", 0, 1);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock361,Native2ASCIIEncodingTest.java,0.8709677419354839,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
589,CodeBlock362,1517,1525,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\u21AF"", 0, 1);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock363,Native2ASCIIEncodingTest.java,0.8709677419354839,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
590,CodeBlock362,1517,1525,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\u21AF"", 0, 1);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock364,Native2ASCIIEncodingTest.java,0.875,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
591,CodeBlock362,1517,1525,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\u21AF"", 0, 1);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock365,Native2ASCIIEncodingTest.java,0.8125,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
592,CodeBlock363,1528,1536,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\u21AF"");', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock353,Native2ASCIIEncodingTest.java,0.6923076923076923,1.0,0.8333333333333334,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
593,CodeBlock363,1528,1536,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\u21AF"");', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock354,Native2ASCIIEncodingTest.java,0.8709677419354839,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
594,CodeBlock363,1528,1536,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\u21AF"");', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock355,Native2ASCIIEncodingTest.java,0.9310344827586207,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
595,CodeBlock363,1528,1536,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\u21AF"");', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock361,Native2ASCIIEncodingTest.java,0.9310344827586207,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
596,CodeBlock363,1528,1536,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\u21AF"");', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock362,Native2ASCIIEncodingTest.java,0.8709677419354839,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
597,CodeBlock363,1528,1536,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\u21AF"");', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock364,Native2ASCIIEncodingTest.java,0.8125,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
598,CodeBlock363,1528,1536,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeNonASCIICharactersCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(""\\u21AF"");', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""\\\\u21AF"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeNonASCIICharactersCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 9, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'STRING_LITERAL': 3, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'equalTo': 1}",CodeBlock365,Native2ASCIIEncodingTest.java,0.8666666666666667,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
599,CodeBlock364,1539,1547,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeNullCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(null, 0, 4);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""null"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeNullCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 10, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'STRING_LITERAL': 2, 'equalTo': 1}",CodeBlock354,Native2ASCIIEncodingTest.java,0.875,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
600,CodeBlock364,1539,1547,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeNullCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(null, 0, 4);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""null"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeNullCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 10, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'STRING_LITERAL': 2, 'equalTo': 1}",CodeBlock355,Native2ASCIIEncodingTest.java,0.8125,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
601,CodeBlock364,1539,1547,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeNullCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(null, 0, 4);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""null"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeNullCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 10, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'STRING_LITERAL': 2, 'equalTo': 1}",CodeBlock361,Native2ASCIIEncodingTest.java,0.8125,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
602,CodeBlock364,1539,1547,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeNullCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(null, 0, 4);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""null"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeNullCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 10, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'STRING_LITERAL': 2, 'equalTo': 1}",CodeBlock362,Native2ASCIIEncodingTest.java,0.875,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
603,CodeBlock364,1539,1547,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeNullCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(null, 0, 4);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""null"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeNullCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 10, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'STRING_LITERAL': 2, 'equalTo': 1}",CodeBlock363,Native2ASCIIEncodingTest.java,0.8125,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
604,CodeBlock364,1539,1547,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_int_int_ShouldEncodeNullCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(null, 0, 4);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""null"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_int_int_ShouldEncodeNullCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 10, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'INTEGER_LITERAL': 2, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'STRING_LITERAL': 2, 'equalTo': 1}",CodeBlock365,Native2ASCIIEncodingTest.java,0.8709677419354839,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
605,CodeBlock365,1550,1558,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeNullCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(null);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""null"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeNullCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 10, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'STRING_LITERAL': 2, 'equalTo': 1}",CodeBlock353,Native2ASCIIEncodingTest.java,0.65,1.0,0.8333333333333334,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
606,CodeBlock365,1550,1558,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeNullCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(null);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""null"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeNullCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 10, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'STRING_LITERAL': 2, 'equalTo': 1}",CodeBlock354,Native2ASCIIEncodingTest.java,0.8125,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
607,CodeBlock365,1550,1558,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeNullCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(null);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""null"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeNullCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 10, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'STRING_LITERAL': 2, 'equalTo': 1}",CodeBlock355,Native2ASCIIEncodingTest.java,0.8666666666666667,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
608,CodeBlock365,1550,1558,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeNullCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(null);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""null"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeNullCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 10, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'STRING_LITERAL': 2, 'equalTo': 1}",CodeBlock361,Native2ASCIIEncodingTest.java,0.8666666666666667,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
609,CodeBlock365,1550,1558,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeNullCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(null);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""null"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeNullCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 10, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'STRING_LITERAL': 2, 'equalTo': 1}",CodeBlock362,Native2ASCIIEncodingTest.java,0.8125,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
610,CodeBlock365,1550,1558,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeNullCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(null);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""null"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeNullCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 10, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'STRING_LITERAL': 2, 'equalTo': 1}",CodeBlock363,Native2ASCIIEncodingTest.java,0.8666666666666667,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
611,CodeBlock365,1550,1558,Native2ASCIIEncodingTest.java,"['public void append_CharSequence_ShouldEncodeNullCorrectly() throws IOException', '{', 'ByteArrayOutputStream baos = new ByteArrayOutputStream();', 'writer = native2ASCIIEncoding.getTextWriter(baos);', 'Writer returnedWriter = writer.append(null);', 'writer.flush();', 'assertThat(returnedWriter, is(sameInstance(writer)));', 'assertThat(baos.toString(""ISO-8859-1""), is(equalTo(""null"")));', '}']","{'public': 1, 'void': 1, 'append_CharSequence_ShouldEncodeNullCorrectly': 1, 'throws': 1, 'TOKEN_VARIABLE': 10, 'new': 1, 'ByteArrayOutputStream': 1, 'getTextWriter': 1, 'append': 1, 'flush': 1, 'assertThat': 2, 'is': 2, 'sameInstance': 1, 'toString': 1, 'STRING_LITERAL': 2, 'equalTo': 1}",CodeBlock364,Native2ASCIIEncodingTest.java,0.8709677419354839,1.0,1.0,1444,ModificationType.ADD,b5a523f87afca3491f9137bc775277ef96cba982,1,2022-10-18 01:55:14.574919
